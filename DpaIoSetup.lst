CC5X Version 3.8A,   File: C:\customdpa\DpaIoSetup.c 22. Jan 2025  16:58   Page 1

ADDR CODE  LINE SOURCE

           0001 
           0002 ; CC5X Version 3.8A, Copyright (c) B Knudsen Data
           0003 ; C compiler for the PICmicro family
           0004 ; ************  22. Jan 2025  16:58  *************
           0005 
           0006         processor  16LF18877
           0007         radix  DEC
           0008 
           0009 
0000 2900  0010         GOTO main
           0011 
           0012   ; FILE C:\customdpa\IQRF.h
           0013                         ;// *********************************************************************
           0014                         ;//                     IQRF OS basic include file                      *
           0015                         ;// *********************************************************************
           0016                         ;//
           0017                         ;// Online IQRF OS Reference Guide: http://www.iqrf.org/IQRF-OS-Reference-guide/
           0018                         ;//
           0019                         ;// Copyright (c) MICRORISC s.r.o.
           0020                         ;//
           0021                         ;// Intended for:
           0022                         ;//   HW: TR-72D, TR-76D, TR-77D, TR-78D, TR-75D, TR-72G, TR-76G, TR-75G, TR-82G
           0023                         ;//   OS: 4.06D, 4.06G
           0024                         ;//
           0025                         ;// File:    IQRF.h
           0026                         ;// Version: v1.00                                   Revision: 03/06/2022
           0027                         ;//
           0028                         ;// Revision history:
           0029                         ;//   v1.00: 03/06/2022  First release for OS 4.06D and 4.06G.
           0030                         ;//
           0031                         ;// *********************************************************************
           0032                         ;
           0033                         ;#if IQRFOS != 406
           0034                         ;    #error Invalid IQRF OS version, v4.06D or v4.06G is expected. Make sure matching header files and project IQRF OS version setting are used.
           0035                         ;#endif
           0036                         ;
           0037                         ;#if __CC5X__ < 3701
           0038                         ;    #warning Insufficient CC5X compiler version, V3.7A or higher is recommended.
           0039                         ;#endif
           0040                         ;
           0041                         ;#define OS_VERSION 0x46
           0042                         ;
           0043                         ;#if defined TR72D
           0044                         ;    #message Compilation for TR-72D modules (PIC16LF1938) and IQRF OS 4.06D.
           0045                         ;    #define TR7xD
           0046                         ;#elif defined TR76D
           0047                         ;    #message Compilation for TR-76D modules (PIC16LF1938) and IQRF OS 4.06D.
           0048                         ;    #define TR7xD
           0049                         ;#elif defined TR77D
           0050                         ;    #message Compilation for TR-77D modules (PIC16LF1938) and IQRF OS 4.06D.
           0051                         ;    #define TR7xD
           0052                         ;#elif defined TR78D
           0053                         ;    #message Compilation for TR-78D modules (PIC16LF1938) and IQRF OS 4.06D.
           0054                         ;    #define TR7xD
           0055                         ;#elif defined TR75D
           0056                         ;    #message Compilation for TR-75D modules (PIC16LF1938) and IQRF OS 4.06D.
           0057                         ;    #define TR7xD
           0058                         ;#elif defined TR72G
           0059                         ;    #message Compilation for TR-72G modules (PIC16LF18877) and IQRF OS 4.06G.
           0060                         ;    #define TR7xG
           0061                         ;#elif defined TR76G
           0062                         ;    #message Compilation for TR-76G modules (PIC16LF18877) and IQRF OS 4.06G.
           0063                         ;    #define TR7xG
           0064                         ;#elif defined TR75G
           0065                         ;    #message Compilation for TR-75G modules (PIC16LF18877) and IQRF OS 4.06G.
           0066                         ;    #define TR7xG
           0067                         ;#elif defined TR82G
           0068                         ;    #message Compilation for TR-82G modules (PIC16LF18877) and IQRF OS 4.06G.
           0069                         ;    #define TR8xG
           0070                         ;#else
           0071                         ;    #error Unsupported TR module type.
           0072                         ;#endif
           0073                         ;
           0074                         ;// TR-7xD
           0075                         ;#if defined TR7xD
           0076                         ;    #if _16LF1938 != 1
           0077                         ;        #pragma chip      PIC16LF1938
           0078                         ;    #endif
           0079                         ;    
           0080                         ;    #define MCU_ID    4
           0081                         ;    #define TR_FAMILY 1 // TR-7xD
           0082                         ;
           0083                         ;    #define _ACKDT    ACKDT
           0084                         ;    #define _ACKEN    ACKEN
           0085                         ;    #define _ACKSTAT  ACKSTAT
           0086                         ;    #define _BAUDCON  BAUDCON
           0087                         ;    #define _BF       BF
           0088                         ;    #define _CKE      CKE
           0089                         ;    #define _DACCON0  DACCON0
           0090                         ;    #define _DACCON1  DACCON1
           0091                         ;    #define _EEADRH   EEADRH
           0092                         ;    #define _EEADRL   EEADRL
           0093                         ;    #define _EECON1   EECON1
           0094                         ;    #define _EECON2   EECON2
           0095                         ;    #define _EEDATH   EEDATH
           0096                         ;    #define _EEDATL   EEDATL
           0097                         ;    #define _GO       GO
           0098                         ;    #define _PEN      PEN
           0099                         ;    #define _PR6      PR6
           0100                         ;    #define _RCEN     RCEN
           0101                         ;    #define _RCREG    RCREG
           0102                         ;    #define _RCSTA    RCSTA
           0103                         ;    #define _RW_      RW_
           0104                         ;    #define _SEN      SEN
           0105                         ;    #define _SMP      SMP
           0106                         ;    #define _SPBRGH   SPBRGH
           0107                         ;    #define _SPBRGL   SPBRGL
           0108                         ;    #define _SSPADD   SSPADD
           0109                         ;    #define _SSPBUF   SSPBUF
           0110                         ;    #define _SSPCON1  SSPCON1
           0111                         ;    #define _SSPCON2  SSPCON2
           0112                         ;    #define _SSPIF    SSPIF
           0113                         ;    #define _SSPEN    SSPEN
           0114                         ;    #define _SSPSTAT  SSPSTAT
           0115                         ;    #define _SWDTEN   SWDTEN
           0116                         ;    #define _T1SYNC_  T1SYNC_
           0117                         ;    #define _TMR1ON   TMR1ON
           0118                         ;    #define _TMR6     TMR6
           0119                         ;    #define _TMR6ON   TMR6ON
           0120                         ;    #define _TXREG    TXREG
           0121                         ;    #define _TXSTA    TXSTA
           0122                         ;    #define _WDTCON   WDTCON
           0123                         ;
           0124                         ;// TR-7xG, TR-8xG
           0125                         ;#elif defined TR7xG || defined TR8xG
           0126                         ;    #if _16LF18877 != 1
           0127                         ;        #pragma chip      PIC16LF18877
           0128                         ;    #endif
           0129                         ;    
           0130                         ;    #define MCU_ID    5
           0131                         ;    
           0132                         ;    #if defined TR7xG
           0133                         ;        #define TR_FAMILY 2 // TR-7xG
           0134                         ;    #else
           0135                         ;        #define TR_FAMILY 3 // TR-8xG
           0136                         ;    #endif
           0137                         ;
           0138                         ;    #define _ACKDT    SSP1CON2.5
           0139                         ;    #define _ACKEN    SSP1CON2.4
           0140                         ;    #define _ACKSTAT  SSP1CON2.6
           0141                         ;    #define _BAUDCON  BAUD1CON
           0142                         ;    #define _BF       SSP1STAT.0
           0143                         ;    #define _CKE      SSP1STAT.6
           0144                         ;    #define _DACCON0  DAC1CON0
           0145                         ;    #define _DACCON1  DAC1CON1
           0146                         ;    #define _EEADRH   NVMADRH
           0147                         ;    #define _EEADRL   NVMADRL
           0148                         ;    #define _EECON1   NVMCON1
           0149                         ;    #define _EECON2   NVMCON2
           0150                         ;    #define _EEDATH   NVMDATH
           0151                         ;    #define _EEDATL   NVMDATL
           0152                         ;    #define _GO       ADGO
           0153                         ;    #define _PEN      SSP1CON2.2
           0154                         ;    #define _PR6      T6PR
           0155                         ;    #define _RCEN     SSP1CON2.3
           0156                         ;    #define _RCREG    RC1REG
           0157                         ;    #define _RCSTA    RC1STA
           0158                         ;    #define _RW_      SSP1STAT.2
           0159                         ;    #define _SEN      SSP1CON2.0
           0160                         ;    #define _SMP      SSP1STAT.7
           0161                         ;    #define _SPBRGH   SP1BRGH
           0162                         ;    #define _SPBRGL   SP1BRGL
           0163                         ;    #define _SSPADD   SSP1ADD
           0164                         ;    #define _SSPBUF   SSP1BUF
           0165                         ;    #define _SSPCON1  SSP1CON1
           0166                         ;    #define _SSPCON2  SSP1CON2
           0167                         ;    #define _SSPIF    SSP1IF
           0168                         ;    #define _SSPEN    SSP1CON1.5
           0169                         ;    #define _SSPSTAT  SSP1STAT
           0170                         ;    #define _SWDTEN   WDTCON0.0
           0171                         ;    #define _T1SYNC_  T1CON.2
           0172                         ;    #define _TMR1ON   T1CON.0
           0173                         ;    #define _TMR6     T6TMR
           0174                         ;    #define _TMR6ON   T6CON.7
           0175                         ;    #define _TXREG    TX1REG
           0176                         ;    #define _TXSTA    TX1STA
           0177                         ;    #define _WDTCON   WDTCON0
           0178                         ;#else
           0179                         ;    #error Unsupported TR module family.
           0180                         ;#endif
           0181                         ;
           0182                         ;#pragma origin 0x100
     0000  0183         ORG 0x0100
           0184                         ;#pragma update_RP 0
           0185                         ;
           0186                         ;void APPLICATION();
           0187                         ;
           0188                         ;void main()                                 // Skipped during Upload
           0189                         ;{
           0190 main
           0191                         ;    APPLICATION();
0100 31B8  0192         MOVLP 0x38
0101 2200  0193         CALL  APPLICATION
0102 3180  0194         MOVLP 0x00
           0195                         ;}
0103 0063  0196         SLEEP
0104 2900  0197         GOTO main
           0198 
           0199   ; FILE C:\customdpa\IQRF-functions.h
           0200                         ;// *********************************************************************
           0201                         ;//                         IQRF OS functions                           *
           0202                         ;// *********************************************************************
           0203                         ;//
           0204                         ;// Online IQRF OS Reference Guide: http://www.iqrf.org/IQRF-OS-Reference-guide/
           0205                         ;//
           0206                         ;// Copyright (c) MICRORISC s.r.o.
           0207                         ;//
           0208                         ;// Intended for:
           0209                         ;//   HW: TR-72D, TR-76D, TR-77D, TR-78D, TR-75D, TR-72G, TR-76G, TR-75G, TR-82G
           0210                         ;//   OS: 4.06D, 4.06G
           0211                         ;//
           0212                         ;// File:    IQRF-functions.h
           0213                         ;// Version: v1.01                                   Revision: 05/12/2024
           0214                         ;//
           0215                         ;// Revision history:
           0216                         ;//   v1.01: 05/12/2024  The return value of the wasRFICrestarted function is different for TR-7xD and TR-7xG module lines.
           0217                         ;//   v1.00: 03/06/2022  First release for OS 4.06D and 4.06G.
           0218                         ;//
           0219                         ;// *********************************************************************
           0220                         ;
           0221                         ;#pragma optimize 0
           0222                         ;#pragma update_PAGE 0
           0223                         ;#pragma update_RP 0
           0224                         ;
           0225                         ;// Identification header for internal use only
           0226                         ;#pragma cdata[0x3800] = OS_VERSION /* OS Version */, MCU_ID /* MCU ID */, TR_FAMILY | 0x80 /*TR Family*/
           0227                         ;
           0228                         ;#define dummy_address   0x3810
           0229                         ;#pragma origin dummy_address
     0000  0230         ORG 0x3810
           0231                         ;void dummy()
           0232                         ;{
           0233 dummy
           0234                         ;  #asm
           0235                         ;    DW 0x2000
3810 2000  0236         DW    0x2000
           0237                         ;  #endasm
           0238                         ;  #pragma updateBank exit=UserBank_01
           0239                         ;}
3811 0008  0240         RETURN
           0241                         ;
           0242                         ;#define iqrfSleep_address   0x3816
           0243                         ;#pragma origin iqrfSleep_address
     0000  0244         ORG 0x3816
           0245                         ;void iqrfSleep()
           0246                         ;{
           0247 iqrfSleep
           0248                         ;  #asm
           0249                         ;    DW 0x2000
3816 2000  0250         DW    0x2000
           0251                         ;  #endasm
           0252                         ;  #pragma updateBank exit=UserBank_01
           0253                         ;}
3817 0008  0254         RETURN
           0255                         ;
           0256                         ;#define _debug_address  0x3819
           0257                         ;#pragma origin _debug_address
     0000  0258         ORG 0x3819
           0259                         ;void _debug()
           0260                         ;{
           0261 _debug
           0262                         ;  #asm
           0263                         ;    DW 0x2000
3819 2000  0264         DW    0x2000
           0265                         ;  #endasm
           0266                         ;  #pragma updateBank exit=UserBank_01
           0267                         ;}
381A 0008  0268         RETURN
           0269                         ;
           0270                         ;#define debug()     \
           0271                         ;    do {            \
           0272                         ;        _debug();   \
           0273                         ;        nop();      \
           0274                         ;    } while (0)
           0275                         ;
           0276                         ;#define moduleInfo_address  0x381c
           0277                         ;#pragma origin moduleInfo_address
     0000  0278         ORG 0x381C
           0279                         ;void moduleInfo()
           0280                         ;{
           0281 moduleInfo
           0282                         ;  #asm
           0283                         ;    DW 0x2000
381C 2000  0284         DW    0x2000
           0285                         ;  #endasm
           0286                         ;  #pragma updateBank exit=UserBank_01
           0287                         ;}
381D 0008  0288         RETURN
           0289                         ;
           0290                         ;#define pulsingLEDR_address 0x3822
           0291                         ;#pragma origin pulsingLEDR_address
     0000  0292         ORG 0x3822
           0293                         ;void pulsingLEDR()
           0294                         ;{
           0295 pulsingLEDR
           0296                         ;  #asm
           0297                         ;    DW 0x2000
3822 2000  0298         DW    0x2000
           0299                         ;  #endasm
           0300                         ;  #pragma updateBank exit=UserBank_01
           0301                         ;}
3823 0008  0302         RETURN
           0303                         ;
           0304                         ;#define pulseLEDR_address   0x3825
           0305                         ;#pragma origin pulseLEDR_address
     0000  0306         ORG 0x3825
           0307                         ;void pulseLEDR()
           0308                         ;{
           0309 pulseLEDR
           0310                         ;  #asm
           0311                         ;    DW 0x2000
3825 2000  0312         DW    0x2000
           0313                         ;  #endasm
           0314                         ;  #pragma updateBank exit=UserBank_01
           0315                         ;}
3826 0008  0316         RETURN
           0317                         ;
           0318                         ;#define stopLEDR_address    0x3828
           0319                         ;#pragma origin stopLEDR_address
     0000  0320         ORG 0x3828
           0321                         ;void stopLEDR()
           0322                         ;{
           0323 stopLEDR
           0324                         ;  #asm
           0325                         ;    DW 0x2000
3828 2000  0326         DW    0x2000
           0327                         ;  #endasm
           0328                         ;  #pragma updateBank exit=UserBank_01
           0329                         ;}
3829 0008  0330         RETURN
           0331                         ;
           0332                         ;#define pulsingLEDG_address 0x382b
           0333                         ;#pragma origin pulsingLEDG_address
     0000  0334         ORG 0x382B
           0335                         ;void pulsingLEDG()
           0336                         ;{
           0337 pulsingLEDG
           0338                         ;  #asm
           0339                         ;    DW 0x2000
382B 2000  0340         DW    0x2000
           0341                         ;  #endasm
           0342                         ;  #pragma updateBank exit=UserBank_01
           0343                         ;}
382C 0008  0344         RETURN
           0345                         ;
           0346                         ;#define pulseLEDG_address   0x382e
           0347                         ;#pragma origin pulseLEDG_address
     0000  0348         ORG 0x382E
           0349                         ;void pulseLEDG()
           0350                         ;{
           0351 pulseLEDG
           0352                         ;  #asm
           0353                         ;    DW 0x2000
382E 2000  0354         DW    0x2000
           0355                         ;  #endasm
           0356                         ;  #pragma updateBank exit=UserBank_01
           0357                         ;}
382F 0008  0358         RETURN
           0359                         ;
           0360                         ;#define stopLEDG_address    0x3831
           0361                         ;#pragma origin stopLEDG_address
     0000  0362         ORG 0x3831
           0363                         ;void stopLEDG()
           0364                         ;{
           0365 stopLEDG
           0366                         ;  #asm
           0367                         ;    DW 0x2000
3831 2000  0368         DW    0x2000
           0369                         ;  #endasm
           0370                         ;  #pragma updateBank exit=UserBank_01
           0371                         ;}
3832 0008  0372         RETURN
           0373                         ;
           0374                         ;#define setOnPulsingLED_address 0x3834
           0375                         ;#pragma origin setOnPulsingLED_address
     0000  0376         ORG 0x3834
           0377                         ;void setOnPulsingLED(uns8 ticks @ W)
           0378                         ;{
           0379 setOnPulsingLED
           0380                         ;  #asm
           0381                         ;    DW 0x2000
3834 2000  0382         DW    0x2000
           0383                         ;  #endasm
           0384                         ;  #pragma updateBank exit=UserBank_01
           0385                         ;}
3835 0008  0386         RETURN
           0387                         ;
           0388                         ;#define setOffPulsingLED_address    0x3837
           0389                         ;#pragma origin setOffPulsingLED_address
     0000  0390         ORG 0x3837
           0391                         ;void setOffPulsingLED(uns8 ticks @ W)
           0392                         ;{
           0393 setOffPulsingLED
           0394                         ;  #asm
           0395                         ;    DW 0x2000
3837 2000  0396         DW    0x2000
           0397                         ;  #endasm
           0398                         ;  #pragma updateBank exit=UserBank_01
           0399                         ;}
3838 0008  0400         RETURN
           0401                         ;
           0402                         ;#define eeReadByte_address  0x383a
           0403                         ;#pragma origin eeReadByte_address
     0000  0404         ORG 0x383A
           0405                         ;uns8 eeReadByte(uns8 address @ W)
           0406                         ;{
           0407 eeReadByte
           0408                         ;  #asm
           0409                         ;    DW 0x2000
383A 2000  0410         DW    0x2000
           0411                         ;  #endasm
           0412                         ;  #pragma updateBank exit=UserBank_01
           0413                         ;  return W;
383B 0008  0414         RETURN
           0415                         ;}
           0416                         ;
           0417                         ;#define eeReadData_address  0x383d
           0418                         ;#pragma origin eeReadData_address
     0000  0419         ORG 0x383D
           0420                         ;bit eeReadData(uns8 address @ param2, uns8 length @ W)
           0421                         ;{
           0422 eeReadData
           0423                         ;  #asm
           0424                         ;    DW 0x2000
383D 2000  0425         DW    0x2000
           0426                         ;  #endasm
           0427                         ;  #pragma updateBank exit=UserBank_01
           0428                         ;  return Carry;
383E 0008  0429         RETURN
           0430                         ;}
           0431                         ;
           0432                         ;#define eeWriteByte_address 0x3840
           0433                         ;#pragma origin eeWriteByte_address
     0000  0434         ORG 0x3840
           0435                         ;void eeWriteByte(uns8 address @ param2, uns8 data @ W)
           0436                         ;{
           0437 eeWriteByte
           0438                         ;  #asm
           0439                         ;    DW 0x2000
3840 2000  0440         DW    0x2000
           0441                         ;  #endasm
           0442                         ;  #pragma updateBank exit=UserBank_01
           0443                         ;}
3841 0008  0444         RETURN
           0445                         ;
           0446                         ;#define eeWriteData_address 0x3843
           0447                         ;#pragma origin eeWriteData_address
     0000  0448         ORG 0x3843
           0449                         ;void eeWriteData(uns8 address @ param2, uns8 length @ W)
           0450                         ;{
           0451 eeWriteData
           0452                         ;  #asm
           0453                         ;    DW 0x2000
3843 2000  0454         DW    0x2000
           0455                         ;  #endasm
           0456                         ;  #pragma updateBank exit=UserBank_01
           0457                         ;}
3844 0008  0458         RETURN
           0459                         ;
           0460                         ;#define readFromRAM_address 0x3846
           0461                         ;#pragma origin readFromRAM_address
     0000  0462         ORG 0x3846
           0463                         ;uns8 readFromRAM(uns16 address @ FSR0)
           0464                         ;{
           0465 readFromRAM
           0466                         ;  #asm
           0467                         ;    DW 0x2000
3846 2000  0468         DW    0x2000
           0469                         ;  #endasm
           0470                         ;  #pragma updateBank exit=UserBank_01
           0471                         ;  return W;
3847 0008  0472         RETURN
           0473                         ;}
           0474                         ;
           0475                         ;#define clearBufferINFO_address 0x384c
           0476                         ;#pragma origin clearBufferINFO_address
     0000  0477         ORG 0x384C
           0478                         ;void clearBufferINFO()
           0479                         ;{
           0480 clearBufferINFO
           0481                         ;  #asm
           0482                         ;    DW 0x2000
384C 2000  0483         DW    0x2000
           0484                         ;  #endasm
           0485                         ;  #pragma updateBank exit=UserBank_01
           0486                         ;}
384D 0008  0487         RETURN
           0488                         ;
           0489                         ;#define swapBufferINFO_address  0x384f
           0490                         ;#pragma origin swapBufferINFO_address
     0000  0491         ORG 0x384F
           0492                         ;void swapBufferINFO()
           0493                         ;{
           0494 swapBufferINFO
           0495                         ;  #asm
           0496                         ;    DW 0x2000
384F 2000  0497         DW    0x2000
           0498                         ;  #endasm
           0499                         ;  #pragma updateBank exit=UserBank_01
           0500                         ;}
3850 0008  0501         RETURN
           0502                         ;
           0503                         ;#define compareBufferINFO2RF_address    0x3852
           0504                         ;#pragma origin compareBufferINFO2RF_address
     0000  0505         ORG 0x3852
           0506                         ;bit compareBufferINFO2RF(uns8 length @ W)
           0507                         ;{
           0508 compareBufferINFO2RF
           0509                         ;  #asm
           0510                         ;    DW 0x2000
3852 2000  0511         DW    0x2000
           0512                         ;  #endasm
           0513                         ;  #pragma updateBank exit=UserBank_01
           0514                         ;  return Carry;
3853 0008  0515         RETURN
           0516                         ;}
           0517                         ;
           0518                         ;#define copyBufferINFO2COM_address  0x3855
           0519                         ;#pragma origin copyBufferINFO2COM_address
     0000  0520         ORG 0x3855
           0521                         ;void copyBufferINFO2COM()
           0522                         ;{
           0523 copyBufferINFO2COM
           0524                         ;  #asm
           0525                         ;    DW 0x2000
3855 2000  0526         DW    0x2000
           0527                         ;  #endasm
           0528                         ;  #pragma updateBank exit=UserBank_01
           0529                         ;}
3856 0008  0530         RETURN
           0531                         ;
           0532                         ;#define copyBufferINFO2RF_address   0x3858
           0533                         ;#pragma origin copyBufferINFO2RF_address
     0000  0534         ORG 0x3858
           0535                         ;void copyBufferINFO2RF()
           0536                         ;{
           0537 copyBufferINFO2RF
           0538                         ;  #asm
           0539                         ;    DW 0x2000
3858 2000  0540         DW    0x2000
           0541                         ;  #endasm
           0542                         ;  #pragma updateBank exit=UserBank_01
           0543                         ;}
3859 0008  0544         RETURN
           0545                         ;
           0546                         ;#define copyBufferRF2COM_address    0x385b
           0547                         ;#pragma origin copyBufferRF2COM_address
     0000  0548         ORG 0x385B
           0549                         ;void copyBufferRF2COM()
           0550                         ;{
           0551 copyBufferRF2COM
           0552                         ;  #asm
           0553                         ;    DW 0x2000
385B 2000  0554         DW    0x2000
           0555                         ;  #endasm
           0556                         ;  #pragma updateBank exit=UserBank_01
           0557                         ;}
385C 0008  0558         RETURN
           0559                         ;
           0560                         ;#define copyBufferRF2INFO_address   0x385e
           0561                         ;#pragma origin copyBufferRF2INFO_address
     0000  0562         ORG 0x385E
           0563                         ;void copyBufferRF2INFO()
           0564                         ;{
           0565 copyBufferRF2INFO
           0566                         ;  #asm
           0567                         ;    DW 0x2000
385E 2000  0568         DW    0x2000
           0569                         ;  #endasm
           0570                         ;  #pragma updateBank exit=UserBank_01
           0571                         ;}
385F 0008  0572         RETURN
           0573                         ;
           0574                         ;#define copyBufferCOM2RF_address    0x3861
           0575                         ;#pragma origin copyBufferCOM2RF_address
     0000  0576         ORG 0x3861
           0577                         ;void copyBufferCOM2RF()
           0578                         ;{
           0579 copyBufferCOM2RF
           0580                         ;  #asm
           0581                         ;    DW 0x2000
3861 2000  0582         DW    0x2000
           0583                         ;  #endasm
           0584                         ;  #pragma updateBank exit=UserBank_01
           0585                         ;}
3862 0008  0586         RETURN
           0587                         ;
           0588                         ;#define copyBufferCOM2INFO_address  0x3864
           0589                         ;#pragma origin copyBufferCOM2INFO_address
     0000  0590         ORG 0x3864
           0591                         ;void copyBufferCOM2INFO()
           0592                         ;{
           0593 copyBufferCOM2INFO
           0594                         ;  #asm
           0595                         ;    DW 0x2000
3864 2000  0596         DW    0x2000
           0597                         ;  #endasm
           0598                         ;  #pragma updateBank exit=UserBank_01
           0599                         ;}
3865 0008  0600         RETURN
           0601                         ;
           0602                         ;#define copyMemoryBlock_address 0x3867
           0603                         ;#pragma origin copyMemoryBlock_address
     0000  0604         ORG 0x3867
           0605                         ;void copyMemoryBlock(uns16 from @ FSR0, uns16 to @ FSR1, uns8 length @ W)
           0606                         ;{
           0607 copyMemoryBlock
           0608                         ;  #asm
           0609                         ;    DW 0x2000
3867 2000  0610         DW    0x2000
           0611                         ;  #endasm
           0612                         ; #pragma updateBank exit=UserBank_01
           0613                         ;}
3868 0008  0614         RETURN
           0615                         ;
           0616                         ;#define startDelay_address  0x386a
           0617                         ;#pragma origin startDelay_address
     0000  0618         ORG 0x386A
           0619                         ;void startDelay(uns8 ticks @ W)
           0620                         ;{
           0621 startDelay
           0622                         ;  #asm
           0623                         ;    DW 0x2000
386A 2000  0624         DW    0x2000
           0625                         ;  #endasm
           0626                         ;  #pragma updateBank exit=UserBank_01
           0627                         ;}
386B 0008  0628         RETURN
           0629                         ;
           0630                         ;#define startLongDelay_address  0x386d
           0631                         ;#pragma origin startLongDelay_address
     0000  0632         ORG 0x386D
           0633                         ;void startLongDelay(uns16 ticks @ param3)
           0634                         ;{
           0635 startLongDelay
           0636                         ;  #asm
           0637                         ;    DW 0x2000
386D 2000  0638         DW    0x2000
           0639                         ;  #endasm
           0640                         ;  #pragma updateBank exit=UserBank_01
           0641                         ;}
386E 0008  0642         RETURN
           0643                         ;
           0644                         ;#define isDelay_address 0x3870
           0645                         ;#pragma origin isDelay_address
     0000  0646         ORG 0x3870
           0647                         ;bit isDelay()
           0648                         ;{
           0649 isDelay
           0650                         ;  #asm
           0651                         ;    DW 0x2000
3870 2000  0652         DW    0x2000
           0653                         ;  #endasm
           0654                         ;  #pragma updateBank exit=UserBank_01
           0655                         ;  return Carry;
3871 0008  0656         RETURN
           0657                         ;}
           0658                         ;
           0659                         ;#define waitDelay_address   0x3873
           0660                         ;#pragma origin waitDelay_address
     0000  0661         ORG 0x3873
           0662                         ;void waitDelay(uns8 ticks @ W)
           0663                         ;{
           0664 waitDelay
           0665                         ;  #asm
           0666                         ;    DW 0x2000
3873 2000  0667         DW    0x2000
           0668                         ;  #endasm
           0669                         ;  #pragma updateBank exit=UserBank_01
           0670                         ;}
3874 0008  0671         RETURN
           0672                         ;
           0673                         ;#define waitMS_address  0x3876
           0674                         ;#pragma origin waitMS_address
     0000  0675         ORG 0x3876
           0676                         ;void waitMS(uns8 ms @ W)
           0677                         ;{
           0678 waitMS
           0679                         ;  #asm
           0680                         ;    DW 0x2000
3876 2000  0681         DW    0x2000
           0682                         ;  #endasm
           0683                         ;  #pragma updateBank exit=UserBank_01
           0684                         ;}
3877 0008  0685         RETURN
           0686                         ;
           0687                         ;#define startCapture_address    0x3879
           0688                         ;#pragma origin startCapture_address
     0000  0689         ORG 0x3879
           0690                         ;void startCapture()
           0691                         ;{
           0692 startCapture
           0693                         ;  #asm
           0694                         ;    DW 0x2000
3879 2000  0695         DW    0x2000
           0696                         ;  #endasm
           0697                         ;  #pragma updateBank exit=UserBank_01
           0698                         ;}
387A 0008  0699         RETURN
           0700                         ;
           0701                         ;#define captureTicks_address    0x387c
           0702                         ;#pragma origin captureTicks_address
     0000  0703         ORG 0x387C
           0704                         ;void captureTicks()
           0705                         ;{
           0706 captureTicks
           0707                         ;  #asm
           0708                         ;    DW 0x2000
387C 2000  0709         DW    0x2000
           0710                         ;  #endasm
           0711                         ;  #pragma updateBank exit=UserBank_01
           0712                         ;}
387D 0008  0713         RETURN
           0714                         ;
           0715                         ;#define waitNewTick_address 0x3882
           0716                         ;#pragma origin waitNewTick_address
     0000  0717         ORG 0x3882
           0718                         ;void waitNewTick()
           0719                         ;{
           0720 waitNewTick
           0721                         ;  #asm
           0722                         ;    DW 0x2000
3882 2000  0723         DW    0x2000
           0724                         ;  #endasm
           0725                         ;  #pragma updateBank exit=UserBank_01
           0726                         ;}
3883 0008  0727         RETURN
           0728                         ;
           0729                         ;#define enableSPI_address   0x3885
           0730                         ;#pragma origin enableSPI_address
     0000  0731         ORG 0x3885
           0732                         ;void enableSPI()
           0733                         ;{
           0734 enableSPI
           0735                         ;  #asm
           0736                         ;    DW 0x2000
3885 2000  0737         DW    0x2000
           0738                         ;  #endasm
           0739                         ;  #pragma updateBank exit=UserBank_01
           0740                         ;}
3886 0008  0741         RETURN
           0742                         ;
           0743                         ;#define disableSPI_address  0x3888
           0744                         ;#pragma origin disableSPI_address
     0000  0745         ORG 0x3888
           0746                         ;void disableSPI()
           0747                         ;{
           0748 disableSPI
           0749                         ;  #asm
           0750                         ;    DW 0x2000
3888 2000  0751         DW    0x2000
           0752                         ;  #endasm
           0753                         ;  #pragma updateBank exit=UserBank_01
           0754                         ;}
3889 0008  0755         RETURN
           0756                         ;
           0757                         ;#define startSPI_address    0x388b
           0758                         ;#pragma origin startSPI_address
     0000  0759         ORG 0x388B
           0760                         ;void startSPI(uns8 length @ W)
           0761                         ;{
           0762 startSPI
           0763                         ;  #asm
           0764                         ;    DW 0x2000
388B 2000  0765         DW    0x2000
           0766                         ;  #endasm
           0767                         ;  #pragma updateBank exit=UserBank_01
           0768                         ;}
388C 0008  0769         RETURN
           0770                         ;
           0771                         ;#define stopSPI_address 0x388e
           0772                         ;#pragma origin stopSPI_address
     0000  0773         ORG 0x388E
           0774                         ;void stopSPI()
           0775                         ;{
           0776 stopSPI
           0777                         ;  #asm
           0778                         ;    DW 0x2000
388E 2000  0779         DW    0x2000
           0780                         ;  #endasm
           0781                         ;  #pragma updateBank exit=UserBank_01
           0782                         ;}
388F 0008  0783         RETURN
           0784                         ;
           0785                         ;#define restartSPI_address  0x3891
           0786                         ;#pragma origin restartSPI_address
     0000  0787         ORG 0x3891
           0788                         ;void restartSPI()
           0789                         ;{
           0790 restartSPI
           0791                         ;  #asm
           0792                         ;    DW 0x2000
3891 2000  0793         DW    0x2000
           0794                         ;  #endasm
           0795                         ;  #pragma updateBank exit=UserBank_01
           0796                         ;}
3892 0008  0797         RETURN
           0798                         ;
           0799                         ;#define getStatusSPI_address    0x3894
           0800                         ;#pragma origin getStatusSPI_address
     0000  0801         ORG 0x3894
           0802                         ;bit getStatusSPI()
           0803                         ;{
           0804 getStatusSPI
           0805                         ;  #asm
           0806                         ;    DW 0x2000
3894 2000  0807         DW    0x2000
           0808                         ;  #endasm
           0809                         ;  #pragma updateBank exit=UserBank_01
           0810                         ;  return Carry;
3895 0008  0811         RETURN
           0812                         ;}
           0813                         ;
           0814                         ;#define setRFpower_address  0x3897
           0815                         ;#pragma origin setRFpower_address
     0000  0816         ORG 0x3897
           0817                         ;void setRFpower(uns8 level @ W)
           0818                         ;{
           0819 setRFpower
           0820                         ;  #asm
           0821                         ;    DW 0x2000
3897 2000  0822         DW    0x2000
           0823                         ;  #endasm
           0824                         ;  #pragma updateBank exit=UserBank_01
           0825                         ;}
3898 0008  0826         RETURN
           0827                         ;
           0828                         ;#define setLEDG_address 0x389a
           0829                         ;#pragma origin setLEDG_address
     0000  0830         ORG 0x389A
           0831                         ;void setLEDG()
           0832                         ;{
           0833 setLEDG
           0834                         ;  #asm
           0835                         ;    DW 0x2000
389A 2000  0836         DW    0x2000
           0837                         ;  #endasm
           0838                         ;  #pragma updateBank exit=UserBank_01
           0839                         ;}
389B 0008  0840         RETURN
           0841                         ;
           0842                         ;#define setRFchannel_address    0x389d
           0843                         ;#pragma origin setRFchannel_address
     0000  0844         ORG 0x389D
           0845                         ;void setRFchannel(uns8 channel @ W)
           0846                         ;{
           0847 setRFchannel
           0848                         ;  #asm
           0849                         ;    DW 0x2000
389D 2000  0850         DW    0x2000
           0851                         ;  #endasm
           0852                         ;  #pragma updateBank exit=UserBank_01
           0853                         ;}
389E 0008  0854         RETURN
           0855                         ;
           0856                         ;#define setRFmode_address   0x38a0
           0857                         ;#pragma origin setRFmode_address
     0000  0858         ORG 0x38A0
           0859                         ;void setRFmode(uns8 mode @ W)
           0860                         ;{
           0861 setRFmode
           0862                         ;  #asm
           0863                         ;    DW 0x2000
38A0 2000  0864         DW    0x2000
           0865                         ;  #endasm
           0866                         ;  #pragma updateBank exit=UserBank_01
           0867                         ;}
38A1 0008  0868         RETURN
           0869                         ;
           0870                         ;#define setRFspeed_address  0x38a3
           0871                         ;#pragma origin setRFspeed_address
     0000  0872         ORG 0x38A3
           0873                         ;void setRFspeed(uns8 speed @ W)
           0874                         ;{
           0875 setRFspeed
           0876                         ;  #asm
           0877                         ;    DW 0x2000
38A3 2000  0878         DW    0x2000
           0879                         ;  #endasm
           0880                         ;  #pragma updateBank exit=UserBank_01
           0881                         ;}
38A4 0008  0882         RETURN
           0883                         ;
           0884                         ;#define setRFsleep_address  0x38a6
           0885                         ;#pragma origin setRFsleep_address
     0000  0886         ORG 0x38A6
           0887                         ;void setRFsleep()
           0888                         ;{
           0889 setRFsleep
           0890                         ;  #asm
           0891                         ;    DW 0x2000
38A6 2000  0892         DW    0x2000
           0893                         ;  #endasm
           0894                         ;  #pragma updateBank exit=UserBank_01
           0895                         ;}
38A7 0008  0896         RETURN
           0897                         ;
           0898                         ;#define setRFready_address  0x38a9
           0899                         ;#pragma origin setRFready_address
     0000  0900         ORG 0x38A9
           0901                         ;void setRFready()
           0902                         ;{
           0903 setRFready
           0904                         ;  #asm
           0905                         ;    DW 0x2000
38A9 2000  0906         DW    0x2000
           0907                         ;  #endasm
           0908                         ;  #pragma updateBank exit=UserBank_01
           0909                         ;}
38AA 0008  0910         RETURN
           0911                         ;
           0912                         ;#define RFTXpacket_address  0x38ac
           0913                         ;#pragma origin RFTXpacket_address
     0000  0914         ORG 0x38AC
           0915                         ;void RFTXpacket()
           0916                         ;{
           0917 RFTXpacket
           0918                         ;  #asm
           0919                         ;    DW 0x2000
38AC 2000  0920         DW    0x2000
           0921                         ;  #endasm
           0922                         ;  #pragma updateBank exit=UserBank_01
           0923                         ;}
38AD 0008  0924         RETURN
           0925                         ;
           0926                         ;#define RFRXpacket_address  0x38af
           0927                         ;#pragma origin RFRXpacket_address
     0000  0928         ORG 0x38AF
           0929                         ;bit RFRXpacket()
           0930                         ;{
           0931 RFRXpacket
           0932                         ;  #asm
           0933                         ;    DW 0x2000
38AF 2000  0934         DW    0x2000
           0935                         ;  #endasm
           0936                         ;  #pragma updateBank exit=UserBank_01
           0937                         ;  return Carry;
38B0 0008  0938         RETURN
           0939                         ;}
           0940                         ;
           0941                         ;#define checkRF_address 0x38b2
           0942                         ;#pragma origin checkRF_address
     0000  0943         ORG 0x38B2
           0944                         ;bit checkRF(uns8 level @ W)
           0945                         ;{
           0946 checkRF
           0947                         ;  #asm
           0948                         ;    DW 0x2000
38B2 2000  0949         DW    0x2000
           0950                         ;  #endasm
           0951                         ;  #pragma updateBank exit=UserBank_01
           0952                         ;  return Carry;
38B3 0008  0953         RETURN
           0954                         ;}
           0955                         ;
           0956                         ;#define amIBonded_address   0x38b8
           0957                         ;#pragma origin amIBonded_address
     0000  0958         ORG 0x38B8
           0959                         ;bit amIBonded()
           0960                         ;{
           0961 amIBonded
           0962                         ;  #asm
           0963                         ;    DW 0x2000
38B8 2000  0964         DW    0x2000
           0965                         ;  #endasm
           0966                         ;  #pragma updateBank exit=UserBank_01
           0967                         ;  return Carry;
38B9 0008  0968         RETURN
           0969                         ;}
           0970                         ;
           0971                         ;#define removeBond_address  0x38bb
           0972                         ;#pragma origin removeBond_address
     0000  0973         ORG 0x38BB
           0974                         ;void removeBond()
           0975                         ;{
           0976 removeBond
           0977                         ;  #asm
           0978                         ;    DW 0x2000
38BB 2000  0979         DW    0x2000
           0980                         ;  #endasm
           0981                         ;  #pragma updateBank exit=UserBank_01
           0982                         ;}
38BC 0008  0983         RETURN
           0984                         ;
           0985                         ;#define bondNewNode_address 0x38be
           0986                         ;#pragma origin bondNewNode_address
     0000  0987         ORG 0x38BE
           0988                         ;bit bondNewNode(uns8 address @ W)
           0989                         ;{
           0990 bondNewNode
           0991                         ;  #asm
           0992                         ;    DW 0x2000
38BE 2000  0993         DW    0x2000
           0994                         ;  #endasm
           0995                         ;  #pragma updateBank exit=UserBank_01
           0996                         ;  return Carry;
38BF 0008  0997         RETURN
           0998                         ;}
           0999                         ;
           1000                         ;#define isBondedNode_address    0x38c1
           1001                         ;#pragma origin isBondedNode_address
     0000  1002         ORG 0x38C1
           1003                         ;bit isBondedNode(uns8 address @ W)
           1004                         ;{
           1005 isBondedNode
           1006                         ;  #asm
           1007                         ;    DW 0x2000
38C1 2000  1008         DW    0x2000
           1009                         ;  #endasm
           1010                         ;  #pragma updateBank exit=UserBank_01
           1011                         ;  return Carry;
38C2 0008  1012         RETURN
           1013                         ;}
           1014                         ;
           1015                         ;#define removeBondedNode_address    0x38c4
           1016                         ;#pragma origin removeBondedNode_address
     0000  1017         ORG 0x38C4
           1018                         ;void removeBondedNode(uns8 address @ W)
           1019                         ;{
           1020 removeBondedNode
           1021                         ;  #asm
           1022                         ;    DW 0x2000
38C4 2000  1023         DW    0x2000
           1024                         ;  #endasm
           1025                         ;  #pragma updateBank exit=UserBank_01
           1026                         ;}
38C5 0008  1027         RETURN
           1028                         ;
           1029                         ;#define rebondNode_address  0x38c7
           1030                         ;#pragma origin rebondNode_address
     0000  1031         ORG 0x38C7
           1032                         ;bit rebondNode(uns8 address @ W)
           1033                         ;{
           1034 rebondNode
           1035                         ;  #asm
           1036                         ;    DW 0x2000
38C7 2000  1037         DW    0x2000
           1038                         ;  #endasm
           1039                         ;  #pragma updateBank exit=UserBank_01
           1040                         ;  return Carry;
38C8 0008  1041         RETURN
           1042                         ;}
           1043                         ;
           1044                         ;#define clearAllBonds_address   0x38ca
           1045                         ;#pragma origin clearAllBonds_address
     0000  1046         ORG 0x38CA
           1047                         ;void clearAllBonds()
           1048                         ;{
           1049 clearAllBonds
           1050                         ;  #asm
           1051                         ;    DW 0x2000
38CA 2000  1052         DW    0x2000
           1053                         ;  #endasm
           1054                         ;  #pragma updateBank exit=UserBank_01
           1055                         ;}
38CB 0008  1056         RETURN
           1057                         ;
           1058                         ;#define setNonetMode_address    0x38cd
           1059                         ;#pragma origin setNonetMode_address
     0000  1060         ORG 0x38CD
           1061                         ;void setNonetMode()
           1062                         ;{
           1063 setNonetMode
           1064                         ;  #asm
           1065                         ;    DW 0x2000
38CD 2000  1066         DW    0x2000
           1067                         ;  #endasm
           1068                         ;  #pragma updateBank exit=UserBank_01
           1069                         ;}
38CE 0008  1070         RETURN
           1071                         ;
           1072                         ;#define setCoordinatorMode_address  0x38d0
           1073                         ;#pragma origin setCoordinatorMode_address
     0000  1074         ORG 0x38D0
           1075                         ;void setCoordinatorMode()
           1076                         ;{
           1077 setCoordinatorMode
           1078                         ;  #asm
           1079                         ;    DW 0x2000
38D0 2000  1080         DW    0x2000
           1081                         ;  #endasm
           1082                         ;  #pragma updateBank exit=UserBank_01
           1083                         ;}
38D1 0008  1084         RETURN
           1085                         ;
           1086                         ;#define setNodeMode_address 0x38d3
           1087                         ;#pragma origin setNodeMode_address
     0000  1088         ORG 0x38D3
           1089                         ;void setNodeMode()
           1090                         ;{
           1091 setNodeMode
           1092                         ;  #asm
           1093                         ;    DW 0x2000
38D3 2000  1094         DW    0x2000
           1095                         ;  #endasm
           1096                         ;  #pragma updateBank exit=UserBank_01
           1097                         ;}
38D4 0008  1098         RETURN
           1099                         ;
           1100                         ;#define setNetworkFilteringOn_address   0x38d6
           1101                         ;#pragma origin setNetworkFilteringOn_address
     0000  1102         ORG 0x38D6
           1103                         ;void setNetworkFilteringOn()
           1104                         ;{
           1105 setNetworkFilteringOn
           1106                         ;  #asm
           1107                         ;    DW 0x2000
38D6 2000  1108         DW    0x2000
           1109                         ;  #endasm
           1110                         ;  #pragma updateBank exit=UserBank_01
           1111                         ;}
38D7 0008  1112         RETURN
           1113                         ;
           1114                         ;#define setNetworkFilteringOff_address  0x38d9
           1115                         ;#pragma origin setNetworkFilteringOff_address
     0000  1116         ORG 0x38D9
           1117                         ;void setNetworkFilteringOff()
           1118                         ;{
           1119 setNetworkFilteringOff
           1120                         ;  #asm
           1121                         ;    DW 0x2000
38D9 2000  1122         DW    0x2000
           1123                         ;  #endasm
           1124                         ;  #pragma updateBank exit=UserBank_01
           1125                         ;}
38DA 0008  1126         RETURN
           1127                         ;
           1128                         ;#define getNetworkParams_address    0x38dc
           1129                         ;#pragma origin getNetworkParams_address
     0000  1130         ORG 0x38DC
           1131                         ;uns8 getNetworkParams()
           1132                         ;{
           1133 getNetworkParams
           1134                         ;  #asm
           1135                         ;    DW 0x2000
38DC 2000  1136         DW    0x2000
           1137                         ;  #endasm
           1138                         ;  #pragma updateBank exit=UserBank_01
           1139                         ;  return W;
38DD 0008  1140         RETURN
           1141                         ;}
           1142                         ;
           1143                         ;#define setRoutingOn_address    0x38df
           1144                         ;#pragma origin setRoutingOn_address
     0000  1145         ORG 0x38DF
           1146                         ;void setRoutingOn()
           1147                         ;{
           1148 setRoutingOn
           1149                         ;  #asm
           1150                         ;    DW 0x2000
38DF 2000  1151         DW    0x2000
           1152                         ;  #endasm
           1153                         ;  #pragma updateBank exit=UserBank_01
           1154                         ;}
38E0 0008  1155         RETURN
           1156                         ;
           1157                         ;#define setRoutingOff_address   0x38e2
           1158                         ;#pragma origin setRoutingOff_address
     0000  1159         ORG 0x38E2
           1160                         ;void setRoutingOff()
           1161                         ;{
           1162 setRoutingOff
           1163                         ;  #asm
           1164                         ;    DW 0x2000
38E2 2000  1165         DW    0x2000
           1166                         ;  #endasm
           1167                         ;  #pragma updateBank exit=UserBank_01
           1168                         ;}
38E3 0008  1169         RETURN
           1170                         ;
           1171                         ;#define answerSystemPacket_address  0x38e8
           1172                         ;#pragma origin answerSystemPacket_address
     0000  1173         ORG 0x38E8
           1174                         ;void answerSystemPacket()
           1175                         ;{
           1176 answerSystemPacket
           1177                         ;  #asm
           1178                         ;    DW 0x2000
38E8 2000  1179         DW    0x2000
           1180                         ;  #endasm
           1181                         ;  #pragma updateBank exit=UserBank_01
           1182                         ;}
38E9 0008  1183         RETURN
           1184                         ;
           1185                         ;#define discovery_address   0x38eb
           1186                         ;#pragma origin discovery_address
     0000  1187         ORG 0x38EB
           1188                         ;uns8 discovery(uns8 MaxNodeAddress @ W)
           1189                         ;{
           1190 discovery
           1191                         ;  #asm
           1192                         ;    DW 0x2000
38EB 2000  1193         DW    0x2000
           1194                         ;  #endasm
           1195                         ;  #pragma updateBank exit=UserBank_01
           1196                         ;  return W;
38EC 0008  1197         RETURN
           1198                         ;}
           1199                         ;
           1200                         ;#define wasRouted_address   0x38ee
           1201                         ;#pragma origin wasRouted_address
     0000  1202         ORG 0x38EE
           1203                         ;bit wasRouted()
           1204                         ;{
           1205 wasRouted
           1206                         ;  #asm
           1207                         ;    DW 0x2000
38EE 2000  1208         DW    0x2000
           1209                         ;  #endasm
           1210                         ;  #pragma updateBank exit=UserBank_01
           1211                         ;  return Carry;
38EF 0008  1212         RETURN
           1213                         ;}
           1214                         ;
           1215                         ;#define optimizeHops_address    0x38f1
           1216                         ;#pragma origin optimizeHops_address
     0000  1217         ORG 0x38F1
           1218                         ;bit optimizeHops(uns8 method @ W)
           1219                         ;{
           1220 optimizeHops
           1221                         ;  #asm
           1222                         ;    DW 0x2000
38F1 2000  1223         DW    0x2000
           1224                         ;  #endasm
           1225                         ;  #pragma updateBank exit=UserBank_01
           1226                         ;  return Carry;
38F2 0008  1227         RETURN
           1228                         ;}
           1229                         ;
           1230                         ;#define getSupplyVoltage_address    0x38f4
           1231                         ;#pragma origin getSupplyVoltage_address
     0000  1232         ORG 0x38F4
           1233                         ;uns8 getSupplyVoltage()
           1234                         ;{
           1235 getSupplyVoltage
           1236                         ;  #asm
           1237                         ;    DW 0x2000
38F4 2000  1238         DW    0x2000
           1239                         ;  #endasm
           1240                         ;  #pragma updateBank exit=UserBank_01
           1241                         ;  return W;
38F5 0008  1242         RETURN
           1243                         ;}
           1244                         ;
           1245                         ;#define getTemperature_address  0x38f7
           1246                         ;#pragma origin getTemperature_address
     0000  1247         ORG 0x38F7
           1248                         ;int8 getTemperature()
           1249                         ;{
           1250 getTemperature
           1251                         ;  #asm
           1252                         ;    DW 0x2000
38F7 2000  1253         DW    0x2000
           1254                         ;  #endasm
           1255                         ;  #pragma updateBank exit=UserBank_01
           1256                         ;  return W;
38F8 0008  1257         RETURN
           1258                         ;}
           1259                         ;
           1260                         ;#define clearBufferRF_address   0x38fa
           1261                         ;#pragma origin clearBufferRF_address
     0000  1262         ORG 0x38FA
           1263                         ;void clearBufferRF()
           1264                         ;{
           1265 clearBufferRF
           1266                         ;  #asm
           1267                         ;    DW 0x2000
38FA 2000  1268         DW    0x2000
           1269                         ;  #endasm
           1270                         ;  #pragma updateBank exit=UserBank_01
           1271                         ;}
38FB 0008  1272         RETURN
           1273                         ;
           1274                         ;#define isDiscoveredNode_address    0x3910
           1275                         ;#pragma origin isDiscoveredNode_address
     0000  1276         ORG 0x3910
           1277                         ;bit isDiscoveredNode(uns8 address @ W)
           1278                         ;{
           1279 isDiscoveredNode
           1280                         ;  #asm
           1281                         ;    DW 0x2000
3910 2000  1282         DW    0x2000
           1283                         ;  #endasm
           1284                         ;  #pragma updateBank exit=UserBank_01
           1285                         ;  return Carry;
3911 0008  1286         RETURN
           1287                         ;}
           1288                         ;
           1289                         ;#define enableRFPGM_address 0x3913
           1290                         ;#pragma origin enableRFPGM_address
     0000  1291         ORG 0x3913
           1292                         ;void enableRFPGM()
           1293                         ;{
           1294 enableRFPGM
           1295                         ;  #asm
           1296                         ;    DW 0x2000
3913 2000  1297         DW    0x2000
           1298                         ;  #endasm
           1299                         ;  #pragma updateBank exit=UserBank_01
           1300                         ;}
3914 0008  1301         RETURN
           1302                         ;
           1303                         ;#define disableRFPGM_address    0x3916
           1304                         ;#pragma origin disableRFPGM_address
     0000  1305         ORG 0x3916
           1306                         ;void disableRFPGM()
           1307                         ;{
           1308 disableRFPGM
           1309                         ;  #asm
           1310                         ;    DW 0x2000
3916 2000  1311         DW    0x2000
           1312                         ;  #endasm
           1313                         ;  #pragma updateBank exit=UserBank_01
           1314                         ;}
3917 0008  1315         RETURN
           1316                         ;
           1317                         ;#define setupRFPGM_address  0x3919
           1318                         ;#pragma origin setupRFPGM_address
     0000  1319         ORG 0x3919
           1320                         ;void setupRFPGM(uns8 x @ W)
           1321                         ;{
           1322 setupRFPGM
           1323                         ;  #asm
           1324                         ;    DW 0x2000
3919 2000  1325         DW    0x2000
           1326                         ;  #endasm
           1327                         ;  #pragma updateBank exit=UserBank_01
           1328                         ;}
391A 0008  1329         RETURN
           1330                         ;
           1331                         ;#define runRFPGM_address    0x391c
           1332                         ;#pragma origin runRFPGM_address
     0000  1333         ORG 0x391C
           1334                         ;void runRFPGM()
           1335                         ;{
           1336 runRFPGM
           1337                         ;  #asm
           1338                         ;    DW 0x2000
391C 2000  1339         DW    0x2000
           1340                         ;  #endasm
           1341                         ;  #pragma updateBank exit=UserBank_01
           1342                         ;}
391D 0008  1343         RETURN
           1344                         ;
           1345                         ;#define iqrfDeepSleep_address   0x391f
           1346                         ;#pragma origin iqrfDeepSleep_address
     0000  1347         ORG 0x391F
           1348                         ;void iqrfDeepSleep()
           1349                         ;{
           1350 iqrfDeepSleep
           1351                         ;  #asm
           1352                         ;    DW 0x2000
391F 2000  1353         DW    0x2000
           1354                         ;  #endasm
           1355                         ;  #pragma updateBank exit=UserBank_01
           1356                         ;}
3920 0008  1357         RETURN
           1358                         ;
           1359                         ;#define wasRFICrestarted_address    0x3922
           1360                         ;#pragma origin wasRFICrestarted_address
     0000  1361         ORG 0x3922
           1362                         ;#if !defined( TR7xD )
           1363                         ;    bit wasRFICrestarted()
           1364                         ;    {
           1365 wasRFICrestarted
           1366                         ;      #asm
           1367                         ;        DW 0x2000
3922 2000  1368         DW    0x2000
           1369                         ;      #endasm
           1370                         ;      #pragma updateBank exit=UserBank_01
           1371                         ;      return Carry;
3923 0008  1372         RETURN
           1373                         ;    }
           1374                         ;#else
           1375                         ;    uns8 wasRFICrestarted()
           1376                         ;    {
           1377                         ;      #asm
           1378                         ;        DW 0x2000
           1379                         ;      #endasm
           1380                         ;      #pragma updateBank exit=UserBank_01
           1381                         ;      return W;
           1382                         ;    }
           1383                         ;#endif
           1384                         ;
           1385                         ;#define eeeWriteData_address    0x3925
           1386                         ;#pragma origin eeeWriteData_address
     0000  1387         ORG 0x3925
           1388                         ;bit eeeWriteData(uns16 address @ param3)
           1389                         ;{
           1390 eeeWriteData
           1391                         ;  #asm
           1392                         ;    DW 0x2000
3925 2000  1393         DW    0x2000
           1394                         ;  #endasm
           1395                         ;  #pragma updateBank exit=UserBank_01
           1396                         ;  return Carry;
3926 0008  1397         RETURN
           1398                         ;}
           1399                         ;
           1400                         ;#define eeeReadData_address 0x3928
           1401                         ;#pragma origin eeeReadData_address
     0000  1402         ORG 0x3928
           1403                         ;bit eeeReadData(uns16 address @ param3)
           1404                         ;{
           1405 eeeReadData
           1406                         ;  #asm
           1407                         ;    DW 0x2000
3928 2000  1408         DW    0x2000
           1409                         ;  #endasm
           1410                         ;  #pragma updateBank exit=UserBank_01
           1411                         ;  return Carry;
3929 0008  1412         RETURN
           1413                         ;}
           1414                         ;
           1415                         ;#define setINDF0_address    0x3931
           1416                         ;#pragma origin setINDF0_address
     0000  1417         ORG 0x3931
           1418                         ;void setINDF0(uns8 value @ W)
           1419                         ;{
           1420 setINDF0
           1421                         ;  #asm
           1422                         ;    DW 0x2000
3931 2000  1423         DW    0x2000
           1424                         ;  #endasm
           1425                         ;  #pragma updateBank exit=UserBank_01
           1426                         ;}
3932 0008  1427         RETURN
           1428                         ;
           1429                         ;#define setINDF1_address    0x3934
           1430                         ;#pragma origin setINDF1_address
     0000  1431         ORG 0x3934
           1432                         ;void setINDF1(uns8 value @ W)
           1433                         ;{
           1434 setINDF1
           1435                         ;  #asm
           1436                         ;    DW 0x2000
3934 2000  1437         DW    0x2000
           1438                         ;  #endasm
           1439                         ;  #pragma updateBank exit=UserBank_01
           1440                         ;}
3935 0008  1441         RETURN
           1442                         ;
           1443                         ;#define getRSSI_address 0x3937
           1444                         ;#pragma origin getRSSI_address
     0000  1445         ORG 0x3937
           1446                         ;uns8 getRSSI()
           1447                         ;{
           1448 getRSSI
           1449                         ;  #asm
           1450                         ;    DW 0x2000
3937 2000  1451         DW    0x2000
           1452                         ;  #endasm
           1453                         ;  #pragma updateBank exit=UserBank_01
           1454                         ;  return W;
3938 0008  1455         RETURN
           1456                         ;}
           1457                         ;
           1458                         ;#define removeBondAddress_address   0x393a
           1459                         ;#pragma origin removeBondAddress_address
     0000  1460         ORG 0x393A
           1461                         ;void removeBondAddress()
           1462                         ;{
           1463 removeBondAddress
           1464                         ;  #asm
           1465                         ;    DW 0x2000
393A 2000  1466         DW    0x2000
           1467                         ;  #endasm
           1468                         ;  #pragma updateBank exit=UserBank_01
           1469                         ;}
393B 0008  1470         RETURN
           1471                         ;
           1472                         ;#define sendFRC_address 0x393d
           1473                         ;#pragma origin sendFRC_address
     0000  1474         ORG 0x393D
           1475                         ;uns8 sendFRC(uns8 command @ W)
           1476                         ;{
           1477 sendFRC
           1478                         ;  #asm
           1479                         ;    DW 0x2000
393D 2000  1480         DW    0x2000
           1481                         ;  #endasm
           1482                         ;  #pragma updateBank exit=UserBank_01
           1483                         ;  return W;
393E 0008  1484         RETURN
           1485                         ;}
           1486                         ;
           1487                         ;#define responseFRC_address 0x3940
           1488                         ;#pragma origin responseFRC_address
     0000  1489         ORG 0x3940
           1490                         ;void responseFRC()
           1491                         ;{
           1492 responseFRC
           1493                         ;  #asm
           1494                         ;    DW 0x2000
3940 2000  1495         DW    0x2000
           1496                         ;  #endasm
           1497                         ;  #pragma updateBank exit=UserBank_01
           1498                         ;}
3941 0008  1499         RETURN
           1500                         ;
           1501                         ;#define bondRequestAdvanced_address 0x3943
           1502                         ;#pragma origin bondRequestAdvanced_address
     0000  1503         ORG 0x3943
           1504                         ;bit bondRequestAdvanced()
           1505                         ;{
           1506 bondRequestAdvanced
           1507                         ;  #asm
           1508                         ;    DW 0x2000
3943 2000  1509         DW    0x2000
           1510                         ;  #endasm
           1511                         ;  #pragma updateBank exit=UserBank_01
           1512                         ;  return Carry;
3944 0008  1513         RETURN
           1514                         ;}
           1515                         ;
           1516                         ;#define prebondNodeAtNode_address   0x3946
           1517                         ;#pragma origin prebondNodeAtNode_address
     0000  1518         ORG 0x3946
           1519                         ;bit prebondNodeAtNode()
           1520                         ;{
           1521 prebondNodeAtNode
           1522                         ;  #asm
           1523                         ;    DW 0x2000
3946 2000  1524         DW    0x2000
           1525                         ;  #endasm
           1526                         ;  #pragma updateBank exit=UserBank_01
           1527                         ;  return Carry;
3947 0008  1528         RETURN
           1529                         ;}
           1530                         ;
           1531                         ;#define nodeAuthorization_address   0x3949
           1532                         ;#pragma origin nodeAuthorization_address
     0000  1533         ORG 0x3949
           1534                         ;bit nodeAuthorization(uns8 address @ W)
           1535                         ;{
           1536 nodeAuthorization
           1537                         ;  #asm
           1538                         ;    DW 0x2000
3949 2000  1539         DW    0x2000
           1540                         ;  #endasm
           1541                         ;  #pragma updateBank exit=UserBank_01
           1542                         ;  return Carry;
394A 0008  1543         RETURN
           1544                         ;}
           1545                         ;
           1546                         ;#define dummy01_address 0x394c
           1547                         ;#pragma origin dummy01_address
     0000  1548         ORG 0x394C
           1549                         ;void dummy01()
           1550                         ;{
           1551 dummy01
           1552                         ;  #asm
           1553                         ;  DW 0x2000
394C 2000  1554         DW    0x2000
           1555                         ;  #endasm
           1556                         ;  #pragma updateBank exit=UserBank_01
           1557                         ;}
394D 0008  1558         RETURN
           1559                         ;
           1560                         ;#define setAccessPassword_address   0x3958
           1561                         ;#pragma origin setAccessPassword_address
     0000  1562         ORG 0x3958
           1563                         ;void setAccessPassword()
           1564                         ;{
           1565 setAccessPassword
           1566                         ;  #asm
           1567                         ;    DW 0x2000
3958 2000  1568         DW    0x2000
           1569                         ;  #endasm
           1570                         ;  #pragma updateBank exit=UserBank_01
           1571                         ;}
3959 0008  1572         RETURN
           1573                         ;
           1574                         ;#define setUserKey_address  0x395b
           1575                         ;#pragma origin setUserKey_address
     0000  1576         ORG 0x395B
           1577                         ;void setUserKey()
           1578                         ;{
           1579 setUserKey
           1580                         ;  #asm
           1581                         ;    DW 0x2000
395B 2000  1582         DW    0x2000
           1583                         ;  #endasm
           1584                         ;  #pragma updateBank exit=UserBank_01
           1585                         ;}
395C 0008  1586         RETURN
           1587                         ;
           1588                         ;#define amIRecipientOfFRC_address   0x3961
           1589                         ;#pragma origin amIRecipientOfFRC_address
     0000  1590         ORG 0x3961
           1591                         ;bit amIRecipientOfFRC()
           1592                         ;{
           1593 amIRecipientOfFRC
           1594                         ;  #asm
           1595                         ;    DW 0x2000
3961 2000  1596         DW    0x2000
           1597                         ;  #endasm
           1598                         ;  #pragma updateBank exit=UserBank_01
           1599                         ;  return Carry;
3962 0008  1600         RETURN
           1601                         ;}
           1602                         ;
           1603                         ;#define setLEDR_address 0x3964
           1604                         ;#pragma origin setLEDR_address
     0000  1605         ORG 0x3964
           1606                         ;void setLEDR()
           1607                         ;{
           1608 setLEDR
           1609                         ;  #asm
           1610                         ;    DW 0x2000
3964 2000  1611         DW    0x2000
           1612                         ;  #endasm
           1613                         ;  #pragma updateBank exit=UserBank_01
           1614                         ;}
3965 0008  1615         RETURN
           1616                         ;
           1617                         ;#define encryptBufferRF_address 0x3967
           1618                         ;#pragma origin encryptBufferRF_address
     0000  1619         ORG 0x3967
           1620                         ;void encryptBufferRF(uns8 blocks @ W)
           1621                         ;{
           1622 encryptBufferRF
           1623                         ;  #asm
           1624                         ;    DW 0x2000
3967 2000  1625         DW    0x2000
           1626                         ;  #endasm
           1627                         ;  #pragma updateBank exit=UserBank_01
           1628                         ;}
3968 0008  1629         RETURN
           1630                         ;
           1631                         ;#define decryptBufferRF_address 0x396a
           1632                         ;#pragma origin decryptBufferRF_address
     0000  1633         ORG 0x396A
           1634                         ;void decryptBufferRF(uns8 blocks @ W)
           1635                         ;{
           1636 decryptBufferRF
           1637                         ;  #asm
           1638                         ;    DW 0x2000
396A 2000  1639         DW    0x2000
           1640                         ;  #endasm
           1641                         ;  #pragma updateBank exit=UserBank_01
           1642                         ;}
396B 0008  1643         RETURN
           1644                         ;
           1645                         ;#define prebondNodeAtCoordinator_address    0x396d
           1646                         ;#pragma origin prebondNodeAtCoordinator_address
     0000  1647         ORG 0x396D
           1648                         ;bit prebondNodeAtCoordinator(uns8 address @ W)
           1649                         ;{
           1650 prebondNodeAtCoordinator
           1651                         ;  #asm
           1652                         ;    DW 0x2000
396D 2000  1653         DW    0x2000
           1654                         ;  #endasm
           1655                         ;  #pragma updateBank exit=UserBank_01
           1656                         ;  return Carry;
396E 0008  1657         RETURN
           1658                         ;}
           1659                         ;
           1660                         ;#define setFSRs_address 0x3970
           1661                         ;#pragma origin setFSRs_address
     0000  1662         ORG 0x3970
           1663                         ;uns8 setFSRs(uns8 fsrs @ W)
           1664                         ;{
           1665 setFSRs
           1666                         ;  #asm
           1667                         ;    DW 0x2000
3970 2000  1668         DW    0x2000
           1669                         ;  #endasm
           1670                         ;  #pragma updateBank exit=UserBank_01
           1671                         ;  return W;
3971 0008  1672         RETURN
           1673                         ;}
           1674                         ;
           1675                         ;// For internal usage only
           1676                         ;#define updateCRC16_address 0x3973
           1677                         ;#pragma origin updateCRC16_address
     0000  1678         ORG 0x3973
           1679                         ;void updateCRC16(uns8 value @ W)
           1680                         ;{
           1681 updateCRC16
           1682                         ;  #asm
           1683                         ;    DW 0x2000
3973 2000  1684         DW    0x2000
           1685                         ;  #endasm
           1686                         ;  #pragma updateBank exit=UserBank_01
           1687                         ;}
3974 0008  1688         RETURN
           1689                         ;
           1690                         ;#define smartConnect_address    0x3976
           1691                         ;#pragma origin smartConnect_address
     0000  1692         ORG 0x3976
           1693                         ;bit smartConnect(uns8 address @ W)
           1694                         ;{
           1695 smartConnect
           1696                         ;  #asm
           1697                         ;    DW 0x2000
3976 2000  1698         DW    0x2000
           1699                         ;  #endasm
           1700                         ;  #pragma updateBank exit=UserBank_01
           1701                         ;  return Carry;
3977 0008  1702         RETURN
           1703                         ;}
           1704                         ;
           1705                         ;#define addressBitmap_address   0x3979
           1706                         ;#pragma origin addressBitmap_address
     0000  1707         ORG 0x3979
           1708                         ;uns8 addressBitmap(uns8 bitIndex @ W)
           1709                         ;{
           1710 addressBitmap
           1711                         ;  #asm
           1712                         ;    DW 0x2000
3979 2000  1713         DW    0x2000
           1714                         ;  #endasm
           1715                         ;  #pragma updateBank exit=UserBank_01
           1716                         ;  return W;
397A 0008  1717         RETURN
           1718                         ;}
           1719                         ;
           1720                         ;#define setServiceChannel_address   0x397c
           1721                         ;#pragma origin setServiceChannel_address
     0000  1722         ORG 0x397C
           1723                         ;bit setServiceChannel(uns8 channelNumber @ W)
           1724                         ;{
           1725 setServiceChannel
           1726                         ;  #asm
           1727                         ;    DW 0x2000
397C 2000  1728         DW    0x2000
           1729                         ;  #endasm
           1730                         ;  #pragma updateBank exit=UserBank_01
           1731                         ;  return Carry;
397D 0008  1732         RETURN
           1733                         ;}
           1734                         ;
           1735                         ;#pragma optimize 1
           1736                         ;#pragma update_RP 1
           1737                         ;#pragma update_PAGE 1
           1738                         ;#pragma origin __APPLICATION_ADDRESS
     0000  1739         ORG 0x3A00
           1740 
           1741   ; FILE C:\customdpa\DPA.h
           1742                         ;// *********************************************************************
           1743                         ;//   General public DPA header file                                    *
           1744                         ;// *********************************************************************
           1745                         ;// Copyright (c) MICRORISC s.r.o.
           1746                         ;//
           1747                         ;// File:    $RCSfile: DPA.h,v $
           1748                         ;// Version: $Revision: 1.329 $
           1749                         ;// Date:    $Date: 2024/12/05 09:28:57 $
           1750                         ;//
           1751                         ;// Revision history:
           1752                         ;//   2024/11/05  Release for DPA 4.32
           1753                         ;//   2024/04/17  Release for DPA 4.31
           1754                         ;//   2023/03/07  Release for DPA 4.30
           1755                         ;//   2022/10/05  Release for DPA 4.18
           1756                         ;//   2022/02/24  Release for DPA 4.17
           1757                         ;//   2021/08/20  Release for DPA 4.16
           1758                         ;//   2020/09/03  Release for DPA 4.15
           1759                         ;//   2020/04/03  Release for DPA 4.14
           1760                         ;//   2020/02/27  Release for DPA 4.13
           1761                         ;//   2020/01/09  Release for DPA 4.12
           1762                         ;//   2019/12/11  Release for DPA 4.11
           1763                         ;//   2019/10/09  Release for DPA 4.10
           1764                         ;//   2019/06/12  Release for DPA 4.03
           1765                         ;//   2019/06/03  Release for DPA 4.02
           1766                         ;//   2019/03/07  Release for DPA 4.01
           1767                         ;//   2019/01/10  Release for DPA 4.00
           1768                         ;//   2018/10/25  Release for DPA 3.03
           1769                         ;//   2017/11/16  Release for DPA 3.02
           1770                         ;//   2017/08/14  Release for DPA 3.01
           1771                         ;//   2017/03/13  Release for DPA 3.00
           1772                         ;//   2016/09/12  Release for DPA 2.28
           1773                         ;//   2016/04/14  Release for DPA 2.27
           1774                         ;//   2016/03/03  Release for DPA 2.26
           1775                         ;//   2016/01/21  Release for DPA 2.25
           1776                         ;//   2015/12/01  Release for DPA 2.24
           1777                         ;//   2015/10/23  Release for DPA 2.23
           1778                         ;//   2015/09/25  Release for DPA 2.22
           1779                         ;//   2015/09/03  Release for DPA 2.21
           1780                         ;//   2015/08/05  Release for DPA 2.20
           1781                         ;//   2014/10/31  Release for DPA 2.10
           1782                         ;//   2014/04/30  Release for DPA 2.00
           1783                         ;//   2013/10/03  Release for DPA 1.00
           1784                         ;//
           1785                         ;// *********************************************************************
           1786                         ;
           1787                         ;// Online DPA documentation https://doc.iqrf.org/DpaTechGuide/
           1788                         ;// IQRF Standards documentation https://doc.iqrf.org/
           1789                         ;
           1790                         ;#ifndef _DPA_HEADER_
           1791                         ;#define _DPA_HEADER_
           1792                         ;
           1793                         ;//############################################################################################
           1794                         ;
           1795                         ;// DPA version
           1796                         ;#define DPA_VERSION_MASTER          0x0432
           1797                         ;
           1798                         ;#if defined( __CC5X__ ) && !defined( CC5XnotDPA )
           1799                         ;// Compiled only at CC5X
           1800                         ;#if __CC5X__ < 3800
           1801                         ;#error Insufficient CC5X compiler version, V3.8 is minimum
           1802                         ;#endif
           1803                         ;
           1804                         ;#if IQRFOS < 406
           1805                         ;#error IQRF OS 4.06+ is required
           1806                         ;#endif
           1807                         ;
           1808                         ;// Bank for custom variables
           1809                         ;#pragma rambank = UserBank_01
           1810                         ;
           1811                         ;// Main DPA API entry address (also start of the licensed FLASH)
           1812                         ;#define DPA_API_ADDRESS             __LICENSED_FLASH
           1813                         ;
           1814                         ;// Main DPA entry address
           1815                         ;#define MAIN_DPA_ADDRESS            ( DPA_API_ADDRESS + 4 )
           1816                         ;
           1817                         ;// Main DPA API entry address stub
           1818                         ;#define DPA_API_ADDRESS_ENTRY       0x3A08
           1819                         ;
           1820                         ;// Address of the DPA Custom Handler
           1821                         ;#define CUSTOM_HANDLER_ADDRESS      0x3A20
           1822                         ;
           1823                         ;// Address of the DPA Custom Handler end + 1
           1824                         ;#if defined TR7xD
           1825                         ;#define CUSTOM_HANDLER_ADDRESS_END  0x3D80
           1826                         ;#else
           1827                         ;#define CUSTOM_HANDLER_ADDRESS_END  __USER_INTERRUPT
           1828                         ;#endif
           1829                         ;
           1830                         ;// DPA API entry function
           1831                         ;uns8  DpaApiEntry( uns8 par1, uns8 par2, uns8 apiIndex );
           1832                         ;
           1833                         ;// DPA API codes
           1834                         ;#define DPA_API_RFTX_DPAPACKET              0
           1835                         ;#define DPA_API_READ_CONFIG_BYTE            1
           1836                         ;#define DPA_API_SEND_TO_IFACEMASTER         2
           1837                         ;#define DPA_API_COORDINATOR_RFTX_DPAPACKET  3
           1838                         ;#define DPA_API_LOCAL_REQUEST               4
           1839                         ;#define DPA_API_SET_PERIPHERAL_ERROR        5
           1840                         ;#define DPA_API_SET_RF_DEFAULTS             6
           1841                         ;#define DPA_API_LOCAL_FRC                   7
           1842                         ;#define DPA_API_CRC8                        8
           1843                         ;#define DPA_API_AGGREGATE_FRC               9
           1844                         ;#define DPA_API_SET_OTK                     10
           1845                         ;#define DPA_API_I2C_INIT                    11
           1846                         ;#define DPA_API_I2C_START                   12
           1847                         ;#define DPA_API_I2C_WRITE                   13
           1848                         ;#define DPA_API_I2C_READ                    14
           1849                         ;#define DPA_API_I2C_STOP                    15
           1850                         ;#define DPA_API_I2C_WAIT_FOR_ACK            16
           1851                         ;#define DPA_API_I2C_SHUTDOWN                17
           1852                         ;#define DPA_API_I2C_WAIT_FOR_IDLE           18
           1853                         ;#define DPA_API_SLEEP                       19
           1854                         ;#define DPA_API_AFTER_SLEEP                 20
           1855                         ;#define DPA_API_RANDOM                      21
           1856                         ;#if !defined( TR7xD )
           1857                         ;#define DPA_API_MENU                        22
           1858                         ;#define DPA_API_MENU_INDICATE_RESULT        23
           1859                         ;#define DPA_API_MENU_EXECUTE                24
           1860                         ;#define DPA_API_DEEP_SLEEP                  25
           1861                         ;#endif
           1862                         ;
           1863                         ;// Used buffer size symbols
           1864                         ;#define sizeofBufferRF                      sizeof( bufferRF )
           1865                         ;#define sizeofBufferAUX                     sizeof( bufferAUX )
           1866                         ;#define sizeofBufferCOM                     sizeof( bufferCOM )
           1867                         ;#define sizeofBufferINFO                    sizeof( bufferINFO )
           1868                         ;
           1869                         ;// Converts conventional address to the linear one at PIC16LF1938
           1870                         ;// Note: This is workaround of CC5X preprocessor bug "No '#endif' detected"
           1871                         ;#define error_ #error Address cannot be linearized
           1872                         ;#define LINEARIZE_ADDRESS( a ) \
           1873                         ;#if ( ((uns16)(a)) - ( ((uns16)(a)) / 0x80 ) * 0x80 ) >= 0x20 && ( ((uns16)(a)) - ( ((uns16)(a)) / 0x80 ) * 0x80 ) <= 0x6F && ( ((uns16)(a)) / 0x80 ) <= 12 \
           1874                         ;( ( ( ((uns16)(a)) / 0x80 ) * 0x50 ) + ( ((uns16)(a)) - 0x20 - ( ((uns16)(a)) / 0x80 ) * 0x80 ) + 0x2000 ) \
           1875                         ;#else \
           1876                         ;error_ \
           1877                         ;#endif
           1878                         ;#undef error_
           1879                         ;
           1880                         ;#define STRUCTATTR
           1881                         ;
           1882                         ;#else //__CC5X__
           1883                         ;// Not compiled at CC5X
           1884                         ;
           1885                         ;#if !defined( CC5XnotDPA )
           1886                         ;// Define CC5X types
           1887                         ;typedef int8_t    int8;
           1888                         ;typedef int16_t   int16;
           1889                         ;typedef uint8_t   uns8;
           1890                         ;typedef uint16_t  uns16;
           1891                         ;// Disables alignment of members of structures
           1892                         ;#define STRUCTATTR  __attribute__((packed))
           1893                         ;#else
           1894                         ;#define STRUCTATTR
           1895                         ;#endif
           1896                         ;
           1897                         ;// Fake buffer sizes
           1898                         ;#define sizeofBufferRF    64
           1899                         ;#define sizeofBufferAUX   64
           1900                         ;#define sizeofBufferCOM   64
           1901                         ;#define sizeofBufferINFO  64
           1902                         ;
           1903                         ;#endif  // __CC5X__
           1904                         ;
           1905                         ;// Indexes of configuration bytes used by DpaApiReadConfigByte( index )
           1906                         ;// Checksum
           1907                         ;#define CFGIND_CHECKSUM         0x00
           1908                         ;// Embedded peripherals
           1909                         ;#define CFGIND_DPA_PERIPHERALS  0x01
           1910                         ;// DPA configuration flags #0
           1911                         ;#define CFGIND_DPA_FLAGS0       0x05
           1912                         ;// Main RF channel, used by the subordinate network
           1913                         ;#define CFGIND_CHANNEL_2ND_A    0x06
           1914                         ;// Second RF channel, used by the subordinate network
           1915                         ;#define CFGIND_CHANNEL_2ND_B    0x07
           1916                         ;// TX power
           1917                         ;#define CFGIND_TXPOWER          0x08
           1918                         ;// RX filter used by checkRF()
           1919                         ;#define CFGIND_RXFILTER         0x09
           1920                         ;// toutRF for LP mode
           1921                         ;#define CFGIND_DPA_LP_TOUTRF    0x0A
           1922                         ;// UART interface baud rate
           1923                         ;#define CFGIND_DPA_UART_IFACE_SPEED 0x0B
           1924                         ;// Alternate DSM channel
           1925                         ;#define CFGIND_ALTERNATE_DSM_CHANNEL 0x0C
           1926                         ;// DPA configuration flags #1
           1927                         ;#define CFGIND_DPA_FLAGS1       0x0D
           1928                         ;// Main RF channel
           1929                         ;#define CFGIND_CHANNEL_A        0x11
           1930                         ;// Second RF channel
           1931                         ;#define CFGIND_CHANNEL_B        0x12
           1932                         ;
           1933                         ;// 0: checks only mandatory precondition in order to prevent critical side-effects
           1934                         ;// 1: as above plus checks meaningful parameter conditions
           1935                         ;// 2: full implemented parameter checking (default)
           1936                         ;#ifndef PARAM_CHECK_LEVEL
           1937                         ;#define PARAM_CHECK_LEVEL 2
           1938                         ;#endif
           1939                         ;
           1940                         ;// "foursome" at IFace structure
           1941                         ;typedef struct
           1942                         ;{
           1943                         ;  // Node address low byte
           1944                         ;  uns8  NADRlow;
           1945                         ;  // Node address high byte
           1946                         ;  uns8  NADRhigh;
           1947                         ;  // Peripheral number
           1948                         ;  uns8  PNUM;
           1949                         ;  // Peripheral command
           1950                         ;  uns8  PCMD;
           1951                         ;  // HWPID
           1952                         ;  uns16 HWPID;
           1953                         ;} STRUCTATTR TDpaIFaceHeader;
           1954                         ;
           1955                         ;// Maximum command PCMD value (except reserved 0x3F = CMD_GET_PER_INFO)
           1956                         ;#define PCMD_MAX                    0x7f
           1957                         ;// Bit mask at PCMD that indicates DPA Response message
           1958                         ;#define RESPONSE_FLAG               0x80
           1959                         ;
           1960                         ;// IQMESH coordinator address
           1961                         ;#define COORDINATOR_ADDRESS         0x00
           1962                         ;// IQMESH broadcast address
           1963                         ;#define BROADCAST_ADDRESS           0xff
           1964                         ;// IQMESH temporary address, assigned by pre-bonding before authorization is done
           1965                         ;#define TEMPORARY_ADDRESS           0xfe
           1966                         ;// Address of the local device addressed by IFace
           1967                         ;#define LOCAL_ADDRESS               0xfc
           1968                         ;// Maximum IQMESH network device address
           1969                         ;#define MAX_ADDRESS                 ( 240 - 1 )
           1970                         ;
           1971                         ;// Time slots lengths in 10 ms
           1972                         ;#define MIN_STD_TIMESLOT    4
           1973                         ;#define MAX_STD_TIMESLOT    6
           1974                         ;
           1975                         ;#define MIN_LP_TIMESLOT     8
           1976                         ;#define MAX_LP_TIMESLOT     10
           1977                         ;
           1978                         ;// Maximum number of DPA PData bytes ( minus 8 = 6B foursome + 8b error code + 8b DpaValue )
           1979                         ;#define DPA_MAX_DATA_LENGTH         ( sizeofBufferCOM - sizeof( TDpaIFaceHeader ) - 2 * sizeof( uns8 ) )
           1980                         ;
           1981                         ;// Maximum number of peripherals info that can fit in the message
           1982                         ;#define MAX_PERIPHERALS_PER_BLOCK_INFO  ( DPA_MAX_DATA_LENGTH / sizeof( TPeripheralInfoAnswer ) )
           1983                         ;
           1984                         ;// Embedded peripheral numbers
           1985                         ;#define PNUM_COORDINATOR    0x00
           1986                         ;#define PNUM_NODE           0x01
           1987                         ;#define PNUM_OS             0x02
           1988                         ;#define PNUM_EEPROM         0x03
           1989                         ;#define PNUM_EEEPROM        0x04
           1990                         ;#define PNUM_RAM            0x05
           1991                         ;#define PNUM_LEDR           0x06
           1992                         ;#define PNUM_LEDG           0x07
           1993                         ;#define PNUM_IO             0x09
           1994                         ;#define PNUM_THERMOMETER    0x0A
           1995                         ;#define PNUM_UART           0x0C
           1996                         ;#define PNUM_FRC            0x0D
           1997                         ;
           1998                         ;// Number of the 1st user peripheral
           1999                         ;#define PNUM_USER           0x20
           2000                         ;// Number of the last user peripheral
           2001                         ;#define PNUM_USER_MAX       0x3E
           2002                         ;// Maximum peripheral number
           2003                         ;#define PNUM_MAX            0x7F
           2004                         ;
           2005                         ;// Fake peripheral number used to flag DPA response with error sent by RF
           2006                         ;#define PNUM_ERROR_FLAG     0xFE
           2007                         ;// Special peripheral used for enumeration
           2008                         ;#define PNUM_ENUMERATION    0xFF
           2009                         ;
           2010                         ;// DPA Commands for embedded peripherals
           2011                         ;#define CMD_COORDINATOR_ADDR_INFO  0
           2012                         ;#define CMD_COORDINATOR_DISCOVERED_DEVICES 1
           2013                         ;#define CMD_COORDINATOR_BONDED_DEVICES 2
           2014                         ;#define CMD_COORDINATOR_CLEAR_ALL_BONDS 3
           2015                         ;#define CMD_COORDINATOR_BOND_NODE 4
           2016                         ;#define CMD_COORDINATOR_REMOVE_BOND 5
           2017                         ;#define CMD_COORDINATOR_DISCOVERY 7
           2018                         ;#define CMD_COORDINATOR_SET_DPAPARAMS 8
           2019                         ;#define CMD_COORDINATOR_SET_HOPS 9
           2020                         ;#define CMD_COORDINATOR_BACKUP 11
           2021                         ;#define CMD_COORDINATOR_RESTORE 12
           2022                         ;#define CMD_COORDINATOR_AUTHORIZE_BOND 13
           2023                         ;#define CMD_COORDINATOR_BRIDGE 14
           2024                         ;#define CMD_COORDINATOR_SMART_CONNECT 18
           2025                         ;#define CMD_COORDINATOR_SET_MID 19
           2026                         ;
           2027                         ;#define CMD_NODE_READ 0
           2028                         ;#define CMD_NODE_REMOVE_BOND 1
           2029                         ;#define CMD_NODE_BACKUP 6
           2030                         ;#define CMD_NODE_RESTORE 7
           2031                         ;#define CMD_NODE_VALIDATE_BONDS 8
           2032                         ;
           2033                         ;#define CMD_OS_READ 0
           2034                         ;#define CMD_OS_RESET 1
           2035                         ;#define CMD_OS_READ_CFG 2
           2036                         ;#define CMD_OS_RFPGM 3
           2037                         ;#define CMD_OS_SLEEP 4
           2038                         ;#define CMD_OS_BATCH 5
           2039                         ;#define CMD_OS_SET_SECURITY 6
           2040                         ;#define CMD_OS_INDICATE 7
           2041                         ;#define CMD_OS_RESTART 8
           2042                         ;#define CMD_OS_WRITE_CFG_BYTE 9
           2043                         ;#define CMD_OS_LOAD_CODE 10
           2044                         ;#define CMD_OS_SELECTIVE_BATCH 11
           2045                         ;#define CMD_OS_TEST_RF_SIGNAL 12
           2046                         ;#define CMD_OS_FACTORY_SETTINGS 13
           2047                         ;#define CMD_OS_WRITE_CFG 15
           2048                         ;
           2049                         ;#define CMD_RAM_READ 0
           2050                         ;#define CMD_RAM_WRITE 1
           2051                         ;#define CMD_RAM_READ_ANY    15
           2052                         ;
           2053                         ;#define CMD_EEPROM_READ CMD_RAM_READ
           2054                         ;#define CMD_EEPROM_WRITE CMD_RAM_WRITE
           2055                         ;
           2056                         ;#define CMD_EEEPROM_XREAD ( CMD_RAM_READ + 2 )
           2057                         ;#define CMD_EEEPROM_XWRITE ( CMD_RAM_WRITE + 2 )
           2058                         ;
           2059                         ;#define CMD_LED_SET_OFF 0
           2060                         ;#define CMD_LED_SET_ON 1
           2061                         ;#define CMD_LED_PULSE 3
           2062                         ;#define CMD_LED_FLASHING 4
           2063                         ;
           2064                         ;#define CMD_IO_DIRECTION  0
           2065                         ;#define CMD_IO_SET  1
           2066                         ;#define CMD_IO_GET  2
           2067                         ;
           2068                         ;#define CMD_THERMOMETER_READ 0
           2069                         ;
           2070                         ;#define CMD_UART_OPEN 0
           2071                         ;#define CMD_UART_CLOSE 1
           2072                         ;#define CMD_UART_WRITE_READ 2
           2073                         ;#define CMD_UART_CLEAR_WRITE_READ 3
           2074                         ;
           2075                         ;#define CMD_FRC_SEND 0
           2076                         ;#define CMD_FRC_EXTRARESULT 1
           2077                         ;#define CMD_FRC_SEND_SELECTIVE 2
           2078                         ;#define CMD_FRC_SET_PARAMS 3
           2079                         ;
           2080                         ;#define CMD_GET_PER_INFO  0x3f
           2081                         ;
           2082                         ;// DPA peripheral type
           2083                         ;typedef enum
           2084                         ;{
           2085                         ;  PERIPHERAL_TYPE_DUMMY = 0x00,
           2086                         ;  PERIPHERAL_TYPE_COORDINATOR = 0x01,
           2087                         ;  PERIPHERAL_TYPE_NODE = 0x02,
           2088                         ;  PERIPHERAL_TYPE_OS = 0x03,
           2089                         ;  PERIPHERAL_TYPE_EEPROM = 0x04,
           2090                         ;  PERIPHERAL_TYPE_BLOCK_EEPROM = 0x05,
           2091                         ;  PERIPHERAL_TYPE_RAM = 0x06,
           2092                         ;  PERIPHERAL_TYPE_LED = 0x07,
           2093                         ;  PERIPHERAL_TYPE_SPI = 0x08,
           2094                         ;  PERIPHERAL_TYPE_IO = 0x09,
           2095                         ;  PERIPHERAL_TYPE_UART = 0x0a,
           2096                         ;  PERIPHERAL_TYPE_THERMOMETER = 0x0b,
           2097                         ;  PERIPHERAL_TYPE_ADC = 0x0c,
           2098                         ;  PERIPHERAL_TYPE_PWM = 0x0d,
           2099                         ;  PERIPHERAL_TYPE_FRC = 0x0e,
           2100                         ;  // Starts peripheral type number interval for user peripherals
           2101                         ;  PERIPHERAL_TYPE_USER_AREA = 0x80
           2102                         ;} TDpaPeripheralType;
           2103                         ;
           2104                         ;// Peripheral extended information
           2105                         ;typedef enum
           2106                         ;{
           2107                         ;  PERIPHERAL_TYPE_EXTENDED_DEFAULT = 0x00,
           2108                         ;  PERIPHERAL_TYPE_EXTENDED_READ = 0x01,
           2109                         ;  PERIPHERAL_TYPE_EXTENDED_WRITE = 0x02,
           2110                         ;  PERIPHERAL_TYPE_EXTENDED_READ_WRITE = PERIPHERAL_TYPE_EXTENDED_READ | PERIPHERAL_TYPE_EXTENDED_WRITE
           2111                         ;} TDpaPeripheralTypeExtended;
           2112                         ;
           2113                         ;// Response packet error codes
           2114                         ;typedef enum
           2115                         ;{
           2116                         ;  // No error
           2117                         ;  STATUS_NO_ERROR = 0,
           2118                         ;
           2119                         ;  // General fail
           2120                         ;  ERROR_FAIL = 1,
           2121                         ;  // Incorrect PCMD
           2122                         ;  ERROR_PCMD = 2,
           2123                         ;  // Incorrect PNUM or PCMD
           2124                         ;  ERROR_PNUM = 3,
           2125                         ;  // Incorrect Address value when addressing memory type peripherals
           2126                         ;  ERROR_ADDR = 4,
           2127                         ;  // Incorrect Data length
           2128                         ;  ERROR_DATA_LEN = 5,
           2129                         ;  // Incorrect Data
           2130                         ;  ERROR_DATA = 6,
           2131                         ;  // Incorrect HWPID used
           2132                         ;  ERROR_HWPID = 7,
           2133                         ;  // Incorrect NADR
           2134                         ;  ERROR_NADR = 8,
           2135                         ;  // IFACE data consumed by Custom DPA Handler
           2136                         ;  ERROR_IFACE_CUSTOM_HANDLER = 9,
           2137                         ;  // Custom DPA Handler is missing
           2138                         ;  ERROR_MISSING_CUSTOM_DPA_HANDLER = 10,
           2139                         ;
           2140                         ;  // Beginning of the user code error interval
           2141                         ;  ERROR_USER_FROM = 0x20,
           2142                         ;  // End of the user code error interval
           2143                         ;  ERROR_USER_TO = 0x3f,
           2144                         ;
           2145                         ;  // Bit/flag reserved for a future use
           2146                         ;  STATUS_RESERVED_FLAG = 0x40,
           2147                         ;  // Bit to flag asynchronous DPA Response from [N]
           2148                         ;  STATUS_ASYNC_RESPONSE = 0x80,
           2149                         ;  // Error code used to mark DPA Confirmation
           2150                         ;  STATUS_CONFIRMATION = 0xff
           2151                         ;} TErrorCodes;
           2152                         ;
           2153                         ;// Embedded FRC commands
           2154                         ;typedef enum
           2155                         ;{
           2156                         ;  // 2 bits
           2157                         ;  FRC_Ping = 0x00,
           2158                         ;  FRC_AcknowledgedBroadcastBits = 0x02,
           2159                         ;  FRC_PrebondedAlive = 0x03,
           2160                         ;  FRC_SupplyVoltage = 0x04,
           2161                         ;  FRC_PrebondedMemoryCompare2B = 0x05,
           2162                         ;  // 1 byte
           2163                         ;  FRC_Temperature = 0x80,
           2164                         ;  FRC_AcknowledgedBroadcastBytes = 0x81,
           2165                         ;  FRC_MemoryRead = 0x82,
           2166                         ;  FRC_MemoryReadPlus1 = 0x83,
           2167                         ;  FRC_FrcResponseTime = 0x84,
           2168                         ;  FRC_TestRFsignal = 0x85,
           2169                         ;  // 4 bytes
           2170                         ;  FRC_PrebondedMemoryRead4BPlus1 = 0xF8,
           2171                         ;  FRC_MemoryRead4B = 0xFA
           2172                         ;} TFRCommands;
           2173                         ;
           2174                         ;// Intervals of user FRC codes
           2175                         ;#define FRC_USER_BIT_FROM     0x40
           2176                         ;#define FRC_USER_BIT_TO       0x7F
           2177                         ;#define FRC_USER_BYTE_FROM    0xC0
           2178                         ;#define FRC_USER_BYTE_TO      0xDF
           2179                         ;#define FRC_USER_2BYTE_FROM   0xF0
           2180                         ;#define FRC_USER_2BYTE_TO     0xF7
           2181                         ;#define FRC_USER_4BYTE_FROM   0xFC
           2182                         ;#define FRC_USER_4BYTE_TO     0xFF
           2183                         ;
           2184                         ;// No HWPID specified
           2185                         ;#define HWPID_Default         0x0000
           2186                         ;// Use this type to override HWPID check
           2187                         ;#define HWPID_DoNotCheck      0xFfFf
           2188                         ;
           2189                         ;// RAM peripheral block definitions
           2190                         ;#ifdef TR7xD
           2191                         ;#define PERIPHERAL_RAM_LENGTH 48
           2192                         ;#else
           2193                         ;#define PERIPHERAL_RAM_LENGTH 80
           2194                         ;#endif
           2195                         ;
           2196                         ;// Start address of EEPROM peripheral in the real EEPROM
           2197                         ;#ifndef COORDINATOR_CUSTOM_HANDLER // Node
           2198                         ;#define PERIPHERAL_EEPROM_START     ( (uns8)0x00 )
           2199                         ;#else // Coordinator
           2200                         ;#define PERIPHERAL_EEPROM_START     ( (uns8)0x80 )
           2201                         ;#endif
           2202                         ;
           2203                         ;// Length of the internal EEPROM peripheral array
           2204                         ;#define PERIPHERAL_EEPROM_LENGTH            ( (uns8)( 0xC0 - PERIPHERAL_EEPROM_START ) )
           2205                         ;
           2206                         ;// Length of the readable area of serial EEEPROM from the EEEPROM DPA peripheral write point of view.
           2207                         ;#define EEEPROM_READ_LENGTH                 0x8000
           2208                         ;// Length of the writable area of serial EEEPROM from the EEEPROM DPA peripheral write point of view.
           2209                         ;#define EEEPROM_WRITE_LENGTH                0x4000
           2210                         ;
           2211                         ;// Starting address of the IO Setup DPA storage at external EEPROM
           2212                         ;#define IOSETUP_EEEPROM_ADDR                ( 0x0000 + sizeofBufferAUX )
           2213                         ;// Length of the IO setup memory block
           2214                         ;#define IOSETUP_LENGTH                      sizeofBufferAUX
           2215                         ;
           2216                         ;#if !defined( TR7xD )
           2217                         ;// Parameter at [_]DpaApi[Deep]Sleep() for not using Watchdog timer wakeup
           2218                         ;#define DpaApiSleep_WdtOff                  0b00000.0
           2219                         ;#endif
           2220                         ;
           2221                         ;// ---------------------------------------------------------
           2222                         ;
           2223                         ;// Enumerate peripherals structure
           2224                         ;typedef struct
           2225                         ;{
           2226                         ;  uns16 DpaVersion;
           2227                         ;  uns8  UserPerNr;
           2228                         ;  uns8  EmbeddedPers[PNUM_USER / 8];
           2229                         ;  uns16 HWPID;
           2230                         ;  uns16 HWPIDver;
           2231                         ;  uns8  Flags;
           2232                         ;  uns8  UserPer[( PNUM_MAX - PNUM_USER + 1 + 7 ) / 8];
           2233                         ;} STRUCTATTR TEnumPeripheralsAnswer;
           2234                         ;
           2235                         ;#define FlagUserPer(UserPersArray,UserPerNumber)    UserPersArray[((UserPerNumber)-PNUM_USER) / 8] |= (uns8)0x01 << (((UserPerNumber)-PNUM_USER) % 8);
           2236                         ;
           2237                         ;// Get peripheral info structure (CMD_GET_PER_INFO)
           2238                         ;typedef struct
           2239                         ;{
           2240                         ;  uns8  PerTE;
           2241                         ;  uns8  PerT;
           2242                         ;  uns8  Par1;
           2243                         ;  uns8  Par2;
           2244                         ;} STRUCTATTR TPeripheralInfoAnswer;
           2245                         ;
           2246                         ;// Error DPA response (PNUM_ERROR_FLAG)
           2247                         ;typedef struct
           2248                         ;{
           2249                         ;  uns8  ErrN;
           2250                         ;  uns8  PNUMoriginal;
           2251                         ;} STRUCTATTR TErrorAnswer;
           2252                         ;
           2253                         ;// Structure returned by CMD_COORDINATOR_ADDR_INFO
           2254                         ;typedef struct
           2255                         ;{
           2256                         ;  uns8  DevNr;
           2257                         ;  uns8  DID;
           2258                         ;} STRUCTATTR TPerCoordinatorAddrInfo_Response;
           2259                         ;
           2260                         ;// Structure for CMD_COORDINATOR_BOND_NODE
           2261                         ;typedef struct
           2262                         ;{
           2263                         ;  uns8  ReqAddr;
           2264                         ;  uns8  BondingTestRetries;
           2265                         ;} STRUCTATTR TPerCoordinatorBondNode_Request;
           2266                         ;
           2267                         ;// Structure returned by CMD_COORDINATOR_BOND_NODE or CMD_COORDINATOR_SMART_CONNECT
           2268                         ;typedef struct
           2269                         ;{
           2270                         ;  uns8  BondAddr;
           2271                         ;  uns8  DevNr;
           2272                         ;} STRUCTATTR TPerCoordinatorBondNodeSmartConnect_Response;
           2273                         ;
           2274                         ;// Structure for CMD_COORDINATOR_REMOVE_BOND
           2275                         ;typedef struct
           2276                         ;{
           2277                         ;  uns8  BondAddr;
           2278                         ;} STRUCTATTR TPerCoordinatorRemoveBond_Request;
           2279                         ;
           2280                         ;// Structure returned by CMD_COORDINATOR_REMOVE_BOND
           2281                         ;typedef struct
           2282                         ;{
           2283                         ;  uns8  DevNr;
           2284                         ;} STRUCTATTR TPerCoordinatorRemoveBond_Response;
           2285                         ;
           2286                         ;// Structure for CMD_COORDINATOR_DISCOVERY
           2287                         ;typedef struct
           2288                         ;{
           2289                         ;  uns8  TxPower;
           2290                         ;  uns8  MaxAddr;
           2291                         ;} STRUCTATTR TPerCoordinatorDiscovery_Request;
           2292                         ;
           2293                         ;// Structure returned by CMD_COORDINATOR_DISCOVERY
           2294                         ;typedef struct
           2295                         ;{
           2296                         ;  uns8  DiscNr;
           2297                         ;} STRUCTATTR TPerCoordinatorDiscovery_Response;
           2298                         ;
           2299                         ;// Structure for and also returned by CMD_COORDINATOR_SET_DPAPARAMS
           2300                         ;typedef struct
           2301                         ;{
           2302                         ;  uns8  DpaParam;
           2303                         ;} STRUCTATTR TPerCoordinatorSetDpaParams_Request_Response;
           2304                         ;
           2305                         ;// Structure for and also returned by CMD_COORDINATOR_SET_HOPS
           2306                         ;typedef struct
           2307                         ;{
           2308                         ;  uns8  RequestHops;
           2309                         ;  uns8  ResponseHops;
           2310                         ;} STRUCTATTR TPerCoordinatorSetHops_Request_Response;
           2311                         ;
           2312                         ;// Structure for CMD_COORDINATOR_BACKUP and CMD_NODE_BACKUP
           2313                         ;typedef struct
           2314                         ;{
           2315                         ;  uns8  Index;
           2316                         ;} STRUCTATTR TPerCoordinatorNodeBackup_Request;
           2317                         ;
           2318                         ;// Structure returned by CMD_COORDINATOR_BACKUP and CMD_NODE_BACKUP
           2319                         ;typedef struct
           2320                         ;{
           2321                         ;  uns8  NetworkData[49];
           2322                         ;} STRUCTATTR TPerCoordinatorNodeBackup_Response;
           2323                         ;
           2324                         ;// Structure for CMD_COORDINATOR_RESTORE and CMD_NODE_RESTORE
           2325                         ;typedef struct
           2326                         ;{
           2327                         ;  uns8  NetworkData[49];
           2328                         ;} STRUCTATTR TPerCoordinatorNodeRestore_Request;
           2329                         ;
           2330                         ;// Structure for CMD_COORDINATOR_AUTHORIZE_BOND
           2331                         ;typedef struct
           2332                         ;{
           2333                         ;  uns8  ReqAddr;
           2334                         ;  uns8  MID[4];
           2335                         ;} STRUCTATTR TPerCoordinatorAuthorizeBond_Request;
           2336                         ;
           2337                         ;// Structure returned by CMD_COORDINATOR_AUTHORIZE_BOND
           2338                         ;typedef struct
           2339                         ;{
           2340                         ;  uns8  BondAddr;
           2341                         ;  uns8  DevNr;
           2342                         ;} STRUCTATTR TPerCoordinatorAuthorizeBond_Response;
           2343                         ;
           2344                         ;// Structure for CMD_COORDINATOR_BRIDGE
           2345                         ;typedef struct
           2346                         ;{
           2347                         ;  TDpaIFaceHeader subHeader;
           2348                         ;  uns8  subPData[DPA_MAX_DATA_LENGTH - sizeof( TDpaIFaceHeader )];
           2349                         ;} STRUCTATTR TPerCoordinatorBridge_Request;
           2350                         ;
           2351                         ;// Structure returned by CMD_COORDINATOR_BRIDGE
           2352                         ;typedef struct
           2353                         ;{
           2354                         ;  TDpaIFaceHeader subHeader;
           2355                         ;  uns8  subRespCode;
           2356                         ;  uns8  subDpaValue;
           2357                         ;  uns8  subPData[DPA_MAX_DATA_LENGTH - sizeof( TDpaIFaceHeader ) - 2 * sizeof( uns8 )];
           2358                         ;} STRUCTATTR TPerCoordinatorBridge_Response;
           2359                         ;
           2360                         ;// Structure for CMD_COORDINATOR_SMART_CONNECT
           2361                         ;typedef struct
           2362                         ;{
           2363                         ;  uns8  ReqAddr;
           2364                         ;  uns8  BondingTestRetries;
           2365                         ;  uns8  IBK[16];
           2366                         ;  uns8  MID[4];
           2367                         ;  uns8  reserved0;
           2368                         ;  uns8  VirtualDeviceAddress;
           2369                         ;  uns8  UserData[4];
           2370                         ;  uns8  reserved1[10];
           2371                         ;} STRUCTATTR TPerCoordinatorSmartConnect_Request;
           2372                         ;
           2373                         ;// Structure for CMD_COORDINATOR_SET_MID
           2374                         ;typedef struct
           2375                         ;{
           2376                         ;  uns8  MID[4];
           2377                         ;  uns8  BondAddr;
           2378                         ;} STRUCTATTR TPerCoordinatorSetMID_Request;
           2379                         ;
           2380                         ;// Structure returned by CMD_NODE_READ
           2381                         ;typedef struct
           2382                         ;{
           2383                         ;  uns8  ntwADDR;
           2384                         ;  uns8  ntwVRN;
           2385                         ;  uns8  ntwZIN;
           2386                         ;  uns8  ntwDID;
           2387                         ;  uns8  ntwPVRN;
           2388                         ;  uns16 ntwUSERADDRESS;
           2389                         ;  uns16 ntwID;
           2390                         ;  uns8  ntwVRNFNZ;
           2391                         ;  uns8  ntwCFG;
           2392                         ;  uns8  Flags;
           2393                         ;} STRUCTATTR TPerNodeRead_Response;
           2394                         ;
           2395                         ;// Structures for CMD_NODE_VALIDATE_BONDS
           2396                         ;typedef struct
           2397                         ;{
           2398                         ;  uns8  Address;
           2399                         ;  uns8  MID[4];
           2400                         ;} STRUCTATTR TPerNodeValidateBondsItem;
           2401                         ;
           2402                         ;// Structure for CMD_NODE_VALIDATE_BONDS
           2403                         ;typedef struct
           2404                         ;{
           2405                         ;  TPerNodeValidateBondsItem Bonds[DPA_MAX_DATA_LENGTH / sizeof( TPerNodeValidateBondsItem )];
           2406                         ;} STRUCTATTR TPerNodeValidateBonds_Request;
           2407                         ;
           2408                         ;// Structure returned by CMD_OS_READ
           2409                         ;typedef struct
           2410                         ;{
           2411                         ;  uns8  MID[4];
           2412                         ;  uns8  OsVersion;
           2413                         ;  uns8  TrType;
           2414                         ;  uns16 OsBuild;
           2415                         ;  uns8  Rssi;
           2416                         ;  uns8  SupplyVoltage;
           2417                         ;  uns8  Flags;
           2418                         ;  uns8  SlotLimits;
           2419                         ;  uns8  IBK[16];
           2420                         ;  // Enumerate peripherals part, variable length because of UserPer field
           2421                         ;  uns16 DpaVersion;
           2422                         ;  uns8  UserPerNr;
           2423                         ;  uns8  EmbeddedPers[PNUM_USER / 8];
           2424                         ;  uns16 HWPID;
           2425                         ;  uns16 HWPIDver;
           2426                         ;  uns8  FlagsEnum;
           2427                         ;  uns8  UserPer[( PNUM_MAX - PNUM_USER + 1 + 7 ) / 8];
           2428                         ;} STRUCTATTR TPerOSRead_Response;
           2429                         ;
           2430                         ;// Structure returned by CMD_OS_READ_CFG
           2431                         ;typedef struct
           2432                         ;{
           2433                         ;  uns8  Checksum;
           2434                         ;  uns8  Configuration[31];
           2435                         ;  uns8  RFPGM;
           2436                         ;  uns8  Undocumented[1];
           2437                         ;} STRUCTATTR TPerOSReadCfg_Response;
           2438                         ;
           2439                         ;// Structure for CMD_OS_WRITE_CFG
           2440                         ;typedef struct
           2441                         ;{
           2442                         ;  uns8  Undefined;
           2443                         ;  uns8  Configuration[31];
           2444                         ;  uns8  RFPGM;
           2445                         ;} STRUCTATTR TPerOSWriteCfg_Request;
           2446                         ;
           2447                         ;// Structures for CMD_OS_WRITE_CFG_BYTE
           2448                         ;typedef struct
           2449                         ;{
           2450                         ;  uns8  Address;
           2451                         ;  uns8  Value;
           2452                         ;  uns8  Mask;
           2453                         ;} STRUCTATTR TPerOSWriteCfgByteTriplet;
           2454                         ;
           2455                         ;// Structure for CMD_OS_WRITE_CFG_BYTE
           2456                         ;typedef struct
           2457                         ;{
           2458                         ;  TPerOSWriteCfgByteTriplet Triplets[DPA_MAX_DATA_LENGTH / sizeof( TPerOSWriteCfgByteTriplet )];
           2459                         ;} STRUCTATTR TPerOSWriteCfgByte_Request;
           2460                         ;
           2461                         ;// Structure for CMD_OS_SET_SECURITY
           2462                         ;typedef struct
           2463                         ;{
           2464                         ;  uns8  Type;
           2465                         ;  uns8  Data[16];
           2466                         ;} STRUCTATTR TPerOSSetSecurity_Request;
           2467                         ;
           2468                         ;// Structure for CMD_OS_LOAD_CODE
           2469                         ;typedef struct
           2470                         ;{
           2471                         ;  uns8  Flags;
           2472                         ;  uns16 Address;
           2473                         ;  uns16 Length;
           2474                         ;  uns16 CheckSum;
           2475                         ;} STRUCTATTR TPerOSLoadCode_Request;
           2476                         ;
           2477                         ;// Structure for CMD_OS_SLEEP
           2478                         ;typedef struct
           2479                         ;{
           2480                         ;  uns16 Time;
           2481                         ;  uns8  Control;
           2482                         ;} STRUCTATTR TPerOSSleep_Request;
           2483                         ;
           2484                         ;// Structure for CMD_OS_SELECTIVE_BATCH
           2485                         ;typedef struct
           2486                         ;{
           2487                         ;  uns8  SelectedNodes[30];
           2488                         ;  uns8  Requests[DPA_MAX_DATA_LENGTH - 30];
           2489                         ;} STRUCTATTR TPerOSSelectiveBatch_Request;
           2490                         ;
           2491                         ;// Structure for CMD_OS_TEST_RF_SIGNAL request
           2492                         ;typedef struct
           2493                         ;{
           2494                         ;  uns8  Channel;
           2495                         ;  uns8  RXfilter;
           2496                         ;  uns16 Time;
           2497                         ;} STRUCTATTR TPerOSTestRfSignal_Request;
           2498                         ;
           2499                         ;// Structure for CMD_OS_TEST_RF_SIGNAL response
           2500                         ;typedef struct
           2501                         ;{
           2502                         ;  uns8  Counter;
           2503                         ;} STRUCTATTR TPerOSTestRfSignal_Response;
           2504                         ;
           2505                         ;// Structure for CMD_OS_INDICATE request
           2506                         ;typedef struct
           2507                         ;{
           2508                         ;  uns8  Control;
           2509                         ;} STRUCTATTR TPerOSIndicate_Request;
           2510                         ;
           2511                         ;// Structure for general memory request
           2512                         ;typedef struct
           2513                         ;{
           2514                         ;  // Address of data to write or read
           2515                         ;  uns8  Address;
           2516                         ;
           2517                         ;  union
           2518                         ;  {
           2519                         ;    // Memory read request
           2520                         ;    struct
           2521                         ;    {
           2522                         ;      // Length of data to read
           2523                         ;      uns8  Length;
           2524                         ;    } Read;
           2525                         ;
           2526                         ;    // Size of Address field
           2527                         ;#define MEMORY_WRITE_REQUEST_OVERHEAD   ( sizeof( uns8 ) )
           2528                         ;
           2529                         ;    // Memory write request
           2530                         ;    struct
           2531                         ;    {
           2532                         ;      uns8  PData[DPA_MAX_DATA_LENGTH - MEMORY_WRITE_REQUEST_OVERHEAD];
           2533                         ;    } Write;
           2534                         ;
           2535                         ;  } ReadWrite;
           2536                         ;} STRUCTATTR TPerMemoryRequest;
           2537                         ;
           2538                         ;// Structure for general extended memory request
           2539                         ;typedef struct
           2540                         ;{
           2541                         ;  // Address of data to write or read
           2542                         ;  uns16 Address;
           2543                         ;
           2544                         ;  union
           2545                         ;  {
           2546                         ;    // Memory read request
           2547                         ;    struct
           2548                         ;    {
           2549                         ;      // Length of data to read
           2550                         ;      uns8  Length;
           2551                         ;    } Read;
           2552                         ;
           2553                         ;    // Size of Address field
           2554                         ;#define XMEMORY_WRITE_REQUEST_OVERHEAD  ( sizeof( uns16 ) )
           2555                         ;
           2556                         ;    // Memory write request
           2557                         ;    struct
           2558                         ;    {
           2559                         ;      uns8  PData[DPA_MAX_DATA_LENGTH - XMEMORY_WRITE_REQUEST_OVERHEAD];
           2560                         ;    } Write;
           2561                         ;
           2562                         ;  } ReadWrite;
           2563                         ;} STRUCTATTR TPerXMemoryRequest;
           2564                         ;
           2565                         ;// Structure for CMD_IO requests
           2566                         ;typedef struct
           2567                         ;{
           2568                         ;  uns8  Port;
           2569                         ;  uns8  Mask;
           2570                         ;  uns8  Value;
           2571                         ;} STRUCTATTR TPerIOTriplet;
           2572                         ;
           2573                         ;typedef struct
           2574                         ;{
           2575                         ;  uns8  Header; // == PNUM_IO_DELAY
           2576                         ;  uns16 Delay;
           2577                         ;} STRUCTATTR TPerIODelay;
           2578                         ;
           2579                         ;// Union for CMD_IO_SET and CMD_IO_DIRECTION requests
           2580                         ;typedef union
           2581                         ;{
           2582                         ;  TPerIOTriplet Triplets[DPA_MAX_DATA_LENGTH / sizeof( TPerIOTriplet )];
           2583                         ;  TPerIODelay   Delays[DPA_MAX_DATA_LENGTH / sizeof( TPerIODelay )];
           2584                         ;} STRUCTATTR TPerIoDirectionAndSet_Request;
           2585                         ;
           2586                         ;// Structure returned by CMD_THERMOMETER_READ
           2587                         ;typedef struct
           2588                         ;{
           2589                         ;  int8  IntegerValue;
           2590                         ;  int16 SixteenthValue;
           2591                         ;} STRUCTATTR TPerThermometerRead_Response;
           2592                         ;
           2593                         ;// Structure for CMD_UART_OPEN
           2594                         ;typedef struct
           2595                         ;{
           2596                         ;  uns8  BaudRate;
           2597                         ;} STRUCTATTR TPerUartOpen_Request;
           2598                         ;
           2599                         ;// Structure for CMD_UART_[CLEAR_]WRITE_READ
           2600                         ;typedef struct
           2601                         ;{
           2602                         ;  uns8  ReadTimeout;
           2603                         ;  uns8  WrittenData[DPA_MAX_DATA_LENGTH - sizeof( uns8 )];
           2604                         ;} STRUCTATTR TPerUartWriteRead_Request;
           2605                         ;
           2606                         ;// Structure for CMD_FRC_SEND
           2607                         ;typedef struct
           2608                         ;{
           2609                         ;  uns8  FrcCommand;
           2610                         ;  uns8  UserData[30];
           2611                         ;} STRUCTATTR TPerFrcSend_Request;
           2612                         ;
           2613                         ;// Structure for CMD_FRC_SEND_SELECTIVE
           2614                         ;typedef struct
           2615                         ;{
           2616                         ;  uns8  FrcCommand;
           2617                         ;  uns8  SelectedNodes[30];
           2618                         ;  uns8  UserData[25];
           2619                         ;} STRUCTATTR TPerFrcSendSelective_Request;
           2620                         ;
           2621                         ;// Structure returned by CMD_FRC_SEND and CMD_FRC_SEND_SELECTIVE
           2622                         ;typedef struct
           2623                         ;{
           2624                         ;  uns8  Status;
           2625                         ;  uns8  FrcData[DPA_MAX_DATA_LENGTH - sizeof( uns8 )];
           2626                         ;} STRUCTATTR TPerFrcSend_Response;
           2627                         ;
           2628                         ;// Structure for request and response of CMD_FRC_SET_PARAMS
           2629                         ;typedef struct
           2630                         ;{
           2631                         ;  uns8  FrcParams;
           2632                         ;} STRUCTATTR TPerFrcSetParams_RequestResponse;
           2633                         ;
           2634                         ;// Interface and CMD_COORDINATOR_BRIDGE confirmation structure
           2635                         ;typedef struct
           2636                         ;{
           2637                         ;  // Number of hops
           2638                         ;  uns8  Hops;
           2639                         ;  // Time slot length in 10ms
           2640                         ;  uns8  TimeSlotLength;
           2641                         ;  // Number of hops for response
           2642                         ;  uns8  HopsResponse;
           2643                         ;} STRUCTATTR TIFaceConfirmation;
           2644                         ;
           2645                         ;// ---------------------------------------------------------
           2646                         ;
           2647                         ;// DPA Message data structure (packet w/o NADR, PNUM, PCMD, HWPID)
           2648                         ;typedef union
           2649                         ;{
           2650                         ;  // General DPA request
           2651                         ;  struct
           2652                         ;  {
           2653                         ;    uns8    PData[DPA_MAX_DATA_LENGTH];
           2654                         ;  } Request;
           2655                         ;
           2656                         ;  // General DPA response
           2657                         ;  struct
           2658                         ;  {
           2659                         ;    uns8    PData[DPA_MAX_DATA_LENGTH];
           2660                         ;  } Response;
           2661                         ;
           2662                         ;  // Enumerate peripherals structure
           2663                         ;  TEnumPeripheralsAnswer EnumPeripheralsAnswer;
           2664                         ;
           2665                         ;  // Get peripheral info structure (CMD_GET_PER_INFO)
           2666                         ;  TPeripheralInfoAnswer PeripheralInfoAnswer;
           2667                         ;
           2668                         ;  // Get peripheral info structure (CMD_GET_PER_INFO) for more peripherals
           2669                         ;  TPeripheralInfoAnswer PeripheralInfoAnswers[MAX_PERIPHERALS_PER_BLOCK_INFO];
           2670                         ;
           2671                         ;  // Error DPA response (PNUM_ERROR_FLAG)
           2672                         ;  TErrorAnswer ErrorAnswer;
           2673                         ;
           2674                         ;  // Structure returned by CMD_COORDINATOR_ADDR_INFO
           2675                         ;  TPerCoordinatorAddrInfo_Response PerCoordinatorAddrInfo_Response;
           2676                         ;
           2677                         ;  // Structure for CMD_COORDINATOR_BOND_NODE
           2678                         ;  TPerCoordinatorBondNode_Request PerCoordinatorBondNode_Request;
           2679                         ;
           2680                         ;  // Structure returned by CMD_COORDINATOR_BOND_NODE or CMD_COORDINATOR_SMART_CONNECT
           2681                         ;  TPerCoordinatorBondNodeSmartConnect_Response PerCoordinatorBondNodeSmartConnect_Response;
           2682                         ;
           2683                         ;  // Structure for CMD_COORDINATOR_REMOVE_BOND
           2684                         ;  TPerCoordinatorRemoveBond_Request PerCoordinatorRemoveBond_Request;
           2685                         ;
           2686                         ;  // Structure returned by CMD_COORDINATOR_REMOVE_BOND
           2687                         ;  TPerCoordinatorRemoveBond_Response PerCoordinatorRemoveBond_Response;
           2688                         ;
           2689                         ;  // Structure for CMD_COORDINATOR_DISCOVERY
           2690                         ;  TPerCoordinatorDiscovery_Request PerCoordinatorDiscovery_Request;
           2691                         ;
           2692                         ;  // Structure returned by CMD_COORDINATOR_DISCOVERY
           2693                         ;  TPerCoordinatorDiscovery_Response PerCoordinatorDiscovery_Response;
           2694                         ;
           2695                         ;  // Structure for and also returned by CMD_COORDINATOR_SET_DPAPARAMS
           2696                         ;  TPerCoordinatorSetDpaParams_Request_Response PerCoordinatorSetDpaParams_Request_Response;
           2697                         ;
           2698                         ;  // Structure for and also returned by CMD_COORDINATOR_SET_HOPS
           2699                         ;  TPerCoordinatorSetHops_Request_Response PerCoordinatorSetHops_Request_Response;
           2700                         ;
           2701                         ;  // Structure for CMD_COORDINATOR_BACKUP and CMD_NODE_BACKUP
           2702                         ;  TPerCoordinatorNodeBackup_Request PerCoordinatorNodeBackup_Request;
           2703                         ;
           2704                         ;  // Structure returned by CMD_COORDINATOR_BACKUP and CMD_NODE_BACKUP
           2705                         ;  TPerCoordinatorNodeBackup_Response PerCoordinatorNodeBackup_Response;
           2706                         ;
           2707                         ;  // Structure for CMD_COORDINATOR_RESTORE and CMD_NODE_RESTORE
           2708                         ;  TPerCoordinatorNodeRestore_Request PerCoordinatorNodeRestore_Request;
           2709                         ;
           2710                         ;  // Structure for CMD_COORDINATOR_AUTHORIZE_BOND
           2711                         ;  TPerCoordinatorAuthorizeBond_Request PerCoordinatorAuthorizeBond_Request;
           2712                         ;
           2713                         ;  // Structure returned by CMD_COORDINATOR_AUTHORIZE_BOND
           2714                         ;  TPerCoordinatorAuthorizeBond_Response PerCoordinatorAuthorizeBond_Response;
           2715                         ;
           2716                         ;  // Structure for CMD_COORDINATOR_BRIDGE
           2717                         ;  TPerCoordinatorBridge_Request PerCoordinatorBridge_Request;
           2718                         ;
           2719                         ;  // Structure returned by CMD_COORDINATOR_BRIDGE
           2720                         ;  TPerCoordinatorBridge_Response PerCoordinatorBridge_Response;
           2721                         ;
           2722                         ;  // Structure for CMD_COORDINATOR_SMART_CONNECT
           2723                         ;  TPerCoordinatorSmartConnect_Request PerCoordinatorSmartConnect_Request;
           2724                         ;
           2725                         ;  // Structure for CMD_COORDINATOR_SET_MID
           2726                         ;  TPerCoordinatorSetMID_Request PerCoordinatorSetMID_Request;
           2727                         ;
           2728                         ;  // Structure returned by CMD_NODE_READ
           2729                         ;  TPerNodeRead_Response PerNodeRead_Response;
           2730                         ;
           2731                         ;  // Structure for CMD_NODE_VALIDATE_BONDS
           2732                         ;  TPerNodeValidateBonds_Request PerNodeValidateBonds_Request;
           2733                         ;
           2734                         ;  // Structure returned by CMD_OS_READ
           2735                         ;  TPerOSRead_Response PerOSRead_Response;
           2736                         ;
           2737                         ;  // Structure returned by CMD_OS_READ_CFG
           2738                         ;  TPerOSReadCfg_Response PerOSReadCfg_Response;
           2739                         ;
           2740                         ;  // Structure for CMD_OS_WRITE_CFG
           2741                         ;  TPerOSWriteCfg_Request PerOSWriteCfg_Request;
           2742                         ;
           2743                         ;  // Structure for CMD_OS_WRITE_CFG_BYTE
           2744                         ;  TPerOSWriteCfgByte_Request PerOSWriteCfgByte_Request;
           2745                         ;
           2746                         ;  // Structure for CMD_OS_SET_SECURITY
           2747                         ;  TPerOSSetSecurity_Request PerOSSetSecurity_Request;
           2748                         ;
           2749                         ;  // Structure for CMD_OS_LOAD_CODE
           2750                         ;  TPerOSLoadCode_Request PerOSLoadCode_Request;
           2751                         ;
           2752                         ;  // Structure for CMD_OS_SLEEP
           2753                         ;  TPerOSSleep_Request PerOSSleep_Request;
           2754                         ;
           2755                         ;  // Structure for CMD_OS_SELECTIVE_BATCH
           2756                         ;  TPerOSSelectiveBatch_Request PerOSSelectiveBatch_Request;
           2757                         ;
           2758                         ;  // Structure for CMD_OS_TEST_RF_SIGNAL request
           2759                         ;  TPerOSTestRfSignal_Request PerOSTestRfSignal_Request;
           2760                         ;
           2761                         ;  // Structure for CMD_OS_INDICATE request
           2762                         ;  TPerOSIndicate_Request PerOSIndicate_Request;
           2763                         ;
           2764                         ;  // Structure for CMD_OS_TEST_RF_SIGNAL response
           2765                         ;  TPerOSTestRfSignal_Response PerOSTestRfSignal_Response;
           2766                         ;
           2767                         ;  // Structure for general memory request
           2768                         ;  TPerMemoryRequest MemoryRequest;
           2769                         ;
           2770                         ;  // Structure for general extended memory request
           2771                         ;  TPerXMemoryRequest XMemoryRequest;
           2772                         ;
           2773                         ;  // Structure for CMD_IO requests
           2774                         ;  TPerIoDirectionAndSet_Request PerIoDirectionAndSet_Request;
           2775                         ;
           2776                         ;  // Structure returned by CMD_THERMOMETER_READ
           2777                         ;  TPerThermometerRead_Response PerThermometerRead_Response;
           2778                         ;
           2779                         ;  // Structure for CMD_UART_OPEN
           2780                         ;  TPerUartOpen_Request PerUartOpen_Request;
           2781                         ;
           2782                         ;  // Structure for CMD_UART_[CLEAR_]WRITE_READ
           2783                         ;  TPerUartWriteRead_Request PerUartWriteRead_Request;
           2784                         ;
           2785                         ;  // Structure for CMD_FRC_SEND
           2786                         ;  TPerFrcSend_Request PerFrcSend_Request;
           2787                         ;
           2788                         ;  // Structure returned by CMD_FRC_SEND and CMD_FRC_SEND_SELECTIVE
           2789                         ;  TPerFrcSend_Response PerFrcSend_Response;
           2790                         ;
           2791                         ;  // Structure for CMD_FRC_SEND_SELECTIVE
           2792                         ;  TPerFrcSendSelective_Request PerFrcSendSelective_Request;
           2793                         ;
           2794                         ;  // Structure for request and response of CMD_FRC_SET_PARAMS
           2795                         ;  TPerFrcSetParams_RequestResponse PerFrcSetParams_RequestResponse;
           2796                         ;
           2797                         ;  // Interface and CMD_COORDINATOR_BRIDGE confirmation structure
           2798                         ;  TIFaceConfirmation IFaceConfirmation;
           2799                         ;} TDpaMessage;
           2800                         ;
           2801                         ;// Custom DPA Handler events
           2802                         ;#define DpaEvent_DpaRequest               0
           2803                         ;#define DpaEvent_Interrupt                1
           2804                         ;#define DpaEvent_Idle                     2
           2805                         ;#define DpaEvent_Init                     3
           2806                         ;#define DpaEvent_Notification             4
           2807                         ;#define DpaEvent_AfterRouting             5
           2808                         ;#define DpaEvent_BeforeSleep              6
           2809                         ;#define DpaEvent_AfterSleep               7
           2810                         ;#define DpaEvent_Reset                    8
           2811                         ;#define DpaEvent_DisableInterrupts        9
           2812                         ;#define DpaEvent_FrcValue                 10
           2813                         ;#define DpaEvent_ReceiveDpaResponse       11
           2814                         ;#define DpaEvent_IFaceReceive             12
           2815                         ;#define DpaEvent_ReceiveDpaRequest        13
           2816                         ;#define DpaEvent_BeforeSendingDpaResponse 14
           2817                         ;#define DpaEvent_PeerToPeer               15
           2818                         ;#define DpaEvent_UserDpaValue             17
           2819                         ;#define DpaEvent_FrcResponseTime          18
           2820                         ;#if defined( TR7xD )
           2821                         ;#define DpaEvent_BondingButton            19
           2822                         ;#endif
           2823                         ;#define DpaEvent_Indicate                 20
           2824                         ;#define DpaEvent_VerifyLocalFrc           21
           2825                         ;#if !defined( TR7xD )
           2826                         ;#define DpaEvent_MenuActivated            22
           2827                         ;#define DpaEvent_MenuItemSelected         23
           2828                         ;#define DpaEvent_MenuItemFinalize         24
           2829                         ;#define DpaEvent_InStandby                25
           2830                         ;#endif
           2831                         ;
           2832                         ;#if defined( TR7xD )
           2833                         ;#define DpaEvent_LAST                     DpaEvent_VerifyLocalFrc
           2834                         ;#else
           2835                         ;#define DpaEvent_LAST                     DpaEvent_InStandby
           2836                         ;#endif
           2837                         ;
           2838                         ;// Types of the diagnostic DPA Value that is returned inside DPA response
           2839                         ;typedef enum
           2840                         ;{
           2841                         ;  DpaValueType_RSSI = 0,
           2842                         ;  DpaValueType_SupplyVoltage = 1,
           2843                         ;  DpaValueType_System = 2,
           2844                         ;  DpaValueType_User = 3
           2845                         ;} TDpaValueType;
           2846                         ;
           2847                         ;// Type (color) of LED peripheral
           2848                         ;typedef enum
           2849                         ;{
           2850                         ;  LED_COLOR_RED = 0,
           2851                         ;  LED_COLOR_GREEN = 1,
           2852                         ;  LED_COLOR_BLUE = 2,
           2853                         ;  LED_COLOR_YELLOW = 3,
           2854                         ;  LED_COLOR_WHITE = 4,
           2855                         ;  LED_COLOR_UNKNOWN = 0xff
           2856                         ;} TLedColor;
           2857                         ;
           2858                         ;// Baud rates
           2859                         ;typedef enum
           2860                         ;{
           2861                         ;  DpaBaud_1200 = 0x00,
           2862                         ;  DpaBaud_2400 = 0x01,
           2863                         ;  DpaBaud_4800 = 0x02,
           2864                         ;  DpaBaud_9600 = 0x03,
           2865                         ;  DpaBaud_19200 = 0x04,
           2866                         ;  DpaBaud_38400 = 0x05,
           2867                         ;  DpaBaud_57600 = 0x06,
           2868                         ;  DpaBaud_115200 = 0x07,
           2869                         ;  DpaBaud_230400 = 0x08
           2870                         ;} TBaudRates;
           2871                         ;
           2872                         ;// Useful PNUM_IO definitions
           2873                         ;typedef enum
           2874                         ;{
           2875                         ;  PNUM_IO_PORTA = 0x00,
           2876                         ;  PNUM_IO_TRISA = 0x00,
           2877                         ;
           2878                         ;  PNUM_IO_PORTB = 0x01,
           2879                         ;  PNUM_IO_TRISB = 0x01,
           2880                         ;
           2881                         ;  PNUM_IO_PORTC = 0x02,
           2882                         ;  PNUM_IO_TRISC = 0x02,
           2883                         ;
           2884                         ;  PNUM_IO_PORTE = 0x04,
           2885                         ;  PNUM_IO_TRISE = 0x04,
           2886                         ;
           2887                         ;  PNUM_IO_WPUB = 0x11,
           2888                         ;#if !defined( TR7xD )
           2889                         ;  PNUM_IO_WPUA = 0x10,
           2890                         ;  PNUM_IO_WPUC = 0x12,
           2891                         ;  PNUM_IO_WPUE = 0x14,
           2892                         ;#endif
           2893                         ;  PNUM_IO_DELAY = 0xff,
           2894                         ;} PNUM_IO_Definitions;
           2895                         ;
           2896                         ;// To test for enumeration peripherals request
           2897                         ;#define IsDpaEnumPeripheralsRequestNoSize() ( _PNUM == PNUM_ENUMERATION && _PCMD == CMD_GET_PER_INFO )
           2898                         ;
           2899                         ;#if PARAM_CHECK_LEVEL >= 2
           2900                         ;#define IsDpaEnumPeripheralsRequest() ( IsDpaEnumPeripheralsRequestNoSize() && _DpaDataLength == 0 )
           2901                         ;#else
           2902                         ;#define IsDpaEnumPeripheralsRequest() IsDpaEnumPeripheralsRequestNoSize()
           2903                         ;#endif
           2904                         ;
           2905                         ;// To test for peripherals information request
           2906                         ;#define IsDpaPeripheralInfoRequestNoSize()  ( _PNUM != PNUM_ENUMERATION && _PCMD == CMD_GET_PER_INFO )
           2907                         ;
           2908                         ;#if PARAM_CHECK_LEVEL >= 2
           2909                         ;#define IsDpaPeripheralInfoRequest()  ( IsDpaPeripheralInfoRequestNoSize() && _DpaDataLength == 0 )
           2910                         ;#else
           2911                         ;#define IsDpaPeripheralInfoRequest()  IsDpaPeripheralInfoRequestNoSize()
           2912                         ;#endif
           2913                         ;
           2914                         ;// Optimized macro for both testing enumeration peripherals ELSE peripherals information. See examples
           2915                         ;#define IfDpaEnumPeripherals_Else_PeripheralInfo_Else_PeripheralRequestNoSize() if ( _PCMD == CMD_GET_PER_INFO ) if ( _PNUM == PNUM_ENUMERATION )
           2916                         ;
           2917                         ;#if PARAM_CHECK_LEVEL >= 2
           2918                         ;#define IfDpaEnumPeripherals_Else_PeripheralInfo_Else_PeripheralRequest() if ( _DpaDataLength == 0 && _PCMD == CMD_GET_PER_INFO ) if ( _PNUM == PNUM_ENUMERATION )
           2919                         ;#else
           2920                         ;#define IfDpaEnumPeripherals_Else_PeripheralInfo_Else_PeripheralRequest() IfDpaEnumPeripherals_Else_PeripheralInfo_Else_PeripheralRequestNoSize()
           2921                         ;#endif
           2922                         ;
           2923                         ;#if defined( __CC5X__ ) && !defined( CC5XnotDPA )
           2924                         ;
           2925                         ;// DPA message at bufferRF
           2926                         ;TDpaMessage DpaRfMessage @bufferRF;
           2927                         ;
           2928                         ;// Note: Works only, because _DpaMessage.Request.PData is at the same location as bufferRF!
           2929                         ;#define _FSR_DPA    _FSR_RF
           2930                         ;
           2931                         ;// Actual allocation of the RAM Peripheral memory block @ UserBank_02
           2932                         ;bank12 uns8  PeripheralRam[PERIPHERAL_RAM_LENGTH] @ 0x620;
           2933                         ;
           2934                         ;// Actual DPA message parameters at memory
           2935                         ;#define _NADR           RX
           2936                         ;#define _NADRhigh       RTAUX
           2937                         ;#define _PNUM           PNUM
           2938                         ;#define _PCMD           PCMD
           2939                         ;#define _DpaDataLength  DLEN
           2940                         ;#define _DpaMessage     DpaRfMessage
           2941                         ;
           2942                         ;// Return actual DPA user routine event
           2943                         ;#define GetDpaEvent()   userReg0
           2944                         ;
           2945                         ;// Stores DPA Params inside DPA request/response
           2946                         ;#define _DpaParams      PPAR
           2947                         ;// Get DPA Value type out of the DPA Params
           2948                         ;#define DpaValueType()  ( _DpaParams & 0b11 )
           2949                         ;
           2950                         ;// When TRUE then encryptBufferRF/decryptBufferRF is done by AccessPassord
           2951                         ;bit encryptByAccessPassword @ usedBank0[0x23].7;
           2952                         ;
           2953                         ;// DP2P response time-slot time in 10 ms
           2954                         ;#define DP2P_TIMESLOT   11
           2955                         ;
           2956                         ;// DP2P request packet. Fills out the whole bufferRF.
           2957                         ;typedef struct
           2958                         ;{
           2959                         ;  uns8  Header[3];  // 0x000000
           2960                         ;  uns8  SelectedNodes[30];
           2961                         ;  uns8  SlotLength;
           2962                         ;  uns8  ResponseTxPower;
           2963                         ;  uns8  Reserved;
           2964                         ;  uns16 HWPID;
           2965                         ;  uns8  PDATA[sizeofBufferRF - ( 3 + 30 + 1 + 1 + 1 ) * sizeof( uns8 ) - ( 1 ) * sizeof( uns16 )]; // size is 26 bytes
           2966                         ;} STRUCTATTR TDP2Prequest;
           2967                         ;
           2968                         ;// DP2P invite packet.
           2969                         ;typedef struct
           2970                         ;{
           2971                         ;  uns8  Header[3];  // 0x000001
           2972                         ;  uns8  NADR;
           2973                         ;  uns8  Rand[12];
           2974                         ;} STRUCTATTR TDP2Invite;
           2975                         ;
           2976                         ;// DP2P confirm packet.
           2977                         ;typedef struct
           2978                         ;{
           2979                         ;  uns8  Header[3];  // 0x000003
           2980                         ;  uns8  NADR;
           2981                         ;  uns8  Rand[12];
           2982                         ;} STRUCTATTR TDP2Confirm;
           2983                         ;
           2984                         ;// DP2P response packet.
           2985                         ;typedef struct
           2986                         ;{
           2987                         ;  uns8  Header[3];  // 0xFfFfFf
           2988                         ;  uns8  NADR;
           2989                         ;  uns8  PDATA[DPA_MAX_DATA_LENGTH];
           2990                         ;} STRUCTATTR TDP2Presponse;
           2991                         ;
           2992                         ;#ifndef TR7xD
           2993                         ;
           2994                         ;// Menus
           2995                         ;#define DMENU_Online                                  0x0
           2996                         ;#define DMENU_ReadyToBond                             0x1
           2997                         ;#define DMENU_Beaming                                 0x2
           2998                         ;#define DMENU_Standby                                 0x3
           2999                         ;
           3000                         ;// Menu items
           3001                         ;#define DMENU_Item_None                               0x0
           3002                         ;#define DMENU_Item_Beaming                            ( DMENU_Online + 1 )
           3003                         ;#define DMENU_Item_BondRequest                        ( DMENU_ReadyToBond + 1 )
           3004                         ;#define DMENU_Item_ConnectivityCheck                  ( DMENU_Beaming + 1 )
           3005                         ;#define DMENU_Item_ExitStandby                        ( DMENU_Standby + 1 )
           3006                         ;#define DMENU_Item_StateIndication                    ( DMENU_Item_ExitStandby + 1 )
           3007                         ;#define DMENU_Item_User1                              ( DMENU_Item_StateIndication + 1 )
           3008                         ;#define DMENU_Item_User2                              ( DMENU_Item_User1 + 1 )
           3009                         ;#define DMENU_Item_Standby                            ( DMENU_Item_User2 + 1 )
           3010                         ;#define DMENU_Item_Reset                              ( DMENU_Item_Standby + 1 )
           3011                         ;#define DMENU_Item_UnbondAndRestart                   ( DMENU_Item_Reset + 2 )
           3012                         ;#define DMENU_Item_UnbondFactorySettingsAndRestart    ( DMENU_Item_UnbondAndRestart + 1 )
           3013                         ;
           3014                         ;// Flags for enabling/disabling menu items at event DpaEvent_MenuActivated (when TRUE is returned) and at DpaApiMenu call
           3015                         ;#define DMENU_Item_Implemented_Beaming                            0b0000.0001
           3016                         ;#define DMENU_Item_Implemented_User1                              0b0000.0100
           3017                         ;#define DMENU_Item_Implemented_User1Confirmed                     ( DMENU_Item_Implemented_User1 | DMENU_Item_Confirm_User1 )
           3018                         ;#define DMENU_Item_Implemented_User2                              0b0000.1000
           3019                         ;#define DMENU_Item_Implemented_User2Confirmed                     ( DMENU_Item_Implemented_User2 | DMENU_Item_Confirm_User2 )
           3020                         ;
           3021                         ;#define DMENU_Item_Unimplemented_Standby                          0b0001.0000
           3022                         ;#define DMENU_Item_Unimplemented_UnbondAndRestart                 0b0100.0000
           3023                         ;#define DMENU_Item_Unimplemented_UnbondFactorySettingsAndRestart  0b1000.0000
           3024                         ;
           3025                         ;#define DMENU_Item_Confirm_User1                                  0b0000.0010
           3026                         ;#define DMENU_Item_Confirm_User2                                  0b0010.0000
           3027                         ;
           3028                         ;// Flags for DpaEvent_MenuActivated when FALSE is returned
           3029                         ;#define DMENU_MenuActivated_DoNotOpen                             0b1000.0000
           3030                         ;
           3031                         ;// Macro to construct value containing both menu and item values
           3032                         ;#define MakeDMenuAndItem( menu, menuItem )            ( ((menu) << 4 ) | (menuItem) )
           3033                         ;// Macro to get menu from menu&item value
           3034                         ;#define GetDMenu( menuAndItem )                       ( (menuAndItem) >> 4 )
           3035                         ;// Macro to get menu item from menu&item value
           3036                         ;#define GetDMenuItem( menuAndItem )                   ( (menuAndItem) & 0x0F )
           3037                         ;
           3038                         ;#endif
           3039                         ;// Include assembler definitions
           3040                         ;#include "HexCodes.h"
           3041                         ;// CC5X fix
           3042                         ;#if __CC5X__ <= 3800 && _16LF18877 == 1
           3043                         ;#undef  __MOVLB
           3044                         ;#define __MOVLB(k)    (0x0140+((k)&0x3F))
           3045                         ;#endif
           3046                         ;
           3047                         ;// Next code must start at the IQRF APPLICATION routine entry point
           3048                         ;#pragma origin __APPLICATION_ADDRESS
     0000  3049         ORG 0x3A00
           3050 
           3051   ; FILE C:\customdpa\DPAcustomHandler.h
           3052                         ;// *********************************************************************
           3053                         ;//   Main Custom DPA Handler header                                    *
           3054                         ;// *********************************************************************
           3055                         ;// Copyright (c) MICRORISC s.r.o.
           3056                         ;//
           3057                         ;// File:    $RCSfile: DPAcustomHandler.h,v $
           3058                         ;// Version: $Revision: 1.167 $
           3059                         ;// Date:    $Date: 2024/12/05 09:28:58 $
           3060                         ;//
           3061                         ;// Revision history:
           3062                         ;//   2024/11/05  Release for DPA 4.32
           3063                         ;//   2024/04/17  Release for DPA 4.31
           3064                         ;//   2023/03/07  Release for DPA 4.30
           3065                         ;//   2022/10/05  Release for DPA 4.18
           3066                         ;//   2022/02/24  Release for DPA 4.17
           3067                         ;//   2021/08/20  Release for DPA 4.16
           3068                         ;//   2020/09/03  Release for DPA 4.15
           3069                         ;//   2020/04/03  Release for DPA 4.14
           3070                         ;//   2020/02/27  Release for DPA 4.13
           3071                         ;//   2020/01/09  Release for DPA 4.12
           3072                         ;//   2019/12/11  Release for DPA 4.11
           3073                         ;//   2019/10/09  Release for DPA 4.10
           3074                         ;//   2019/06/12  Release for DPA 4.03
           3075                         ;//   2019/06/03  Release for DPA 4.02
           3076                         ;//   2019/03/07  Release for DPA 4.01
           3077                         ;//   2019/01/10  Release for DPA 4.00
           3078                         ;//   2018/10/25  Release for DPA 3.03
           3079                         ;//   2017/11/16  Release for DPA 3.02
           3080                         ;//   2017/08/14  Release for DPA 3.01
           3081                         ;//   2017/03/13  Release for DPA 3.00
           3082                         ;//   2016/09/12  Release for DPA 2.28
           3083                         ;//   2016/04/14  Release for DPA 2.27
           3084                         ;//   2016/03/03  Release for DPA 2.26
           3085                         ;//   2016/01/21  Release for DPA 2.25
           3086                         ;//   2015/12/01  Release for DPA 2.24
           3087                         ;//   2015/10/23  Release for DPA 2.23
           3088                         ;//   2015/09/25  Release for DPA 2.22
           3089                         ;//   2015/09/03  Release for DPA 2.21
           3090                         ;//   2015/08/05  Release for DPA 2.20
           3091                         ;//   2014/10/31  Release for DPA 2.10
           3092                         ;//   2014/04/30  Release for DPA 2.00
           3093                         ;//   2013/10/03  Release for DPA 1.00
           3094                         ;//
           3095                         ;// *********************************************************************
           3096                         ;
           3097                         ;// Online DPA documentation https://doc.iqrf.org/DpaTechGuide/
           3098                         ;// IQRF Standards documentation https://doc.iqrf.org/
           3099                         ;
           3100                         ;#ifndef _CUSTOM_DPA_HANDLER_
           3101                         ;#define _CUSTOM_DPA_HANDLER_
           3102                         ;
           3103                         ;//############################################################################################
           3104                         ;// 1st include
           3105                         ;
           3106                         ;// Custom DPA Handler routine declaration
           3107                         ;bit CustomDpaHandler();
           3108                         ;
           3109                         ;// Various DPA flags shared between DPA and Custom DPA Handler
           3110                         ;uns8 DpaFlags @ usedBank4[0];
           3111                         ;
           3112                         ;// [C][N] TRUE if I2C timeout occurred at the last DpaApiI2C?() call
           3113                         ;bit I2CwasTimeout @ DpaFlags.0;
           3114                         ;// [N] Flag for the 1st DpaApiSleep
           3115                         ;bit FirstDpaApiSleep @ DpaFlags.1;
           3116                         ;
           3117                         ;#ifdef COORDINATOR_CUSTOM_HANDLER
           3118                         ;// [C] TRUE if interface master is not connected (detected)
           3119                         ;bit IFaceMasterNotConnected @ DpaFlags.2;
           3120                         ;#endif
           3121                         ;// [N] DPA by interface notification is sent also when there was a "reading" like DPA request
           3122                         ;bit EnableIFaceNotificationOnRead @ DpaFlags.3;
           3123                         ;// [N] TRUE when node was just bonded using default bonding procedure
           3124                         ;bit NodeWasBonded @ DpaFlags.4;
           3125                         ;// [N] When TRUE, then next call of DpaApiRfTxDpaPacket sends non-routed packet
           3126                         ;bit NonroutedRfTxDpaPacket @ DpaFlags.7;
           3127                         ;
           3128                         ;// [C] Ticks (decrementing) counter usable for timing in the coordinator's Customer DPA Handler
           3129                         ;uns16 DpaTicks @ usedBank4[1];
           3130                         ;// [N] toutRF for LP mode, read from configuration memory after reset
           3131                         ;uns8 LPtoutRF @ usedBank4[3];
           3132                         ;// DPA Request/Response HWPID
           3133                         ;uns16 _HWPID @ usedBank4[4];
           3134                         ;// Identifies type of reset (stored at UserReg0 upon module reset). See Reset chapter at IQRF User's Guide for more information
           3135                         ;uns8 ResetType @ usedBank4[6];
           3136                         ;// User DPA Values to return
           3137                         ;uns8 UserDpaValue @ usedBank4[7];
           3138                         ;// Network depth of the DPA request/response, increases on bridging, decreases on back-bridging
           3139                         ;uns8 NetDepth @ usedBank4[8];
           3140                         ;// TRUE when node was at DPA Service Mode after last boot
           3141                         ;bit DSMactivated @ usedBank4[9].0;
           3142                         ;// If set to TRUE, then LP RX mode in the main loop can be terminated by pin, see _RLPMAT
           3143                         ;bit LpRxPinTerminate @ usedBank4[9].1;
           3144                         ;// If set to TRUE, then [C] executes asynchronous DPA requests received from [N]
           3145                         ;bit AsyncReqAtCoordinator @ usedBank4[9].2;
           3146                         ;// RX filter used at the DPA main loop checkRF call
           3147                         ;uns8 RxFilter @ usedBank4[11];
           3148                         ;// Countdown variable for button bonding before going to deep sleep
           3149                         ;uns16 BondingSleepCountdown @ usedBank4[12];
           3150                         ;#define BONDING_SLEEP_COUNTDOWN_UNIT  290
           3151                         ;// Non-zero pseudo-random value, read-only, updated on every Reset and Idle event, at [N] only.
           3152                         ;uns16 Random @ usedBank4[14];
           3153                         ;// DPA value from the received packet or just to be sent to the interface.
           3154                         ;uns8 DpaValue @ usedBank4[16];
           3155                         ;// If non-zero then timeout value for DpaApiI2C?() calls
           3156                         ;uns8 I2Ctimeout @ usedBank4[17];
           3157                         ;
           3158                         ;// Macro to return an error from the peripheral handler. If the code size is not an issue this macro is the right choice.
           3159                         ;#define DpaApiReturnPeripheralError(error) do { \
           3160                         ;    DpaApiSetPeripheralError( error ); \
           3161                         ;    return Carry; \
           3162                         ;  } while( 0 )
           3163                         ;
           3164                         ;// DPA API functions, see documentation for details
           3165                         ;#define DpaApiRfTxDpaPacket( dpaValue, netDepthAndFlags ) DpaApiEntry( dpaValue, netDepthAndFlags, DPA_API_RFTX_DPAPACKET )
           3166                         ;#define DpaApiReadConfigByte( index )                     DpaApiEntry( index, param3.low8, DPA_API_READ_CONFIG_BYTE )
           3167                         ;#define DpaApiLocalRequest()                              DpaApiEntry( param2, param3.low8, DPA_API_LOCAL_REQUEST )
           3168                         ;#define DpaApiSetPeripheralError( error )                 DpaApiEntry( error, param3.low8, DPA_API_SET_PERIPHERAL_ERROR )
           3169                         ;#define DpaApiSendToIFaceMaster( dpaValue, flags )        DpaApiEntry( dpaValue, flags, DPA_API_SEND_TO_IFACEMASTER )
           3170                         ;#define DpaApiSetRfDefaults()                             DpaApiEntry( param2, param3.low8, DPA_API_SET_RF_DEFAULTS )
           3171                         ;#define DpaApiLocalFrc( frcCommand, replyTxPower )        DpaApiEntry( frcCommand, replyTxPower, DPA_API_LOCAL_FRC )
           3172                         ;#define DpaApiCrc8( crc8, data )                          DpaApiEntry( crc8, data, DPA_API_CRC8 )
           3173                         ;#define DpaApiAggregateFrc()                              DpaApiEntry( param2, param3.low8, DPA_API_AGGREGATE_FRC )
           3174                         ;#define DpaApiSetOTK()                                    DpaApiEntry( param2, param3.low8, DPA_API_SET_OTK )
           3175                         ;#define DpaApiI2Cinit( frequency )                        DpaApiEntry( frequency, param3.low8, DPA_API_I2C_INIT )
           3176                         ;#define DpaApiI2Cstart( address )                         DpaApiEntry( address, param3.low8, DPA_API_I2C_START )
           3177                         ;#define DpaApiI2Cwrite( data )                            DpaApiEntry( data, param3.low8, DPA_API_I2C_WRITE )
           3178                         ;#define DpaApiI2Cread( ack )                              DpaApiEntry( ack, param3.low8, DPA_API_I2C_READ )
           3179                         ;#define DpaApiI2Cstop()                                   DpaApiEntry( param2, param3.low8, DPA_API_I2C_STOP )
           3180                         ;#define DpaApiI2CwaitForACK( address )                    DpaApiEntry( address, param3.low8, DPA_API_I2C_WAIT_FOR_ACK )
           3181                         ;#define DpaApiI2Cshutdown()                               DpaApiEntry( param2, param3.low8, DPA_API_I2C_SHUTDOWN )
           3182                         ;#define DpaApiI2CwaitForIdle()                            DpaApiEntry( param2, param3.low8, DPA_API_I2C_WAIT_FOR_IDLE )
           3183                         ;#define DpaApiSleep( wdtcon )                             DpaApiEntry( wdtcon, param3.low8, DPA_API_SLEEP )
           3184                         ;#define DpaApiAfterSleep()                                DpaApiEntry( param2, param3.low8, DPA_API_AFTER_SLEEP )
           3185                         ;#define DpaApiRandom()                                    DpaApiEntry( param2, param3.low8, DPA_API_RANDOM )
           3186                         ;
           3187                         ;#ifdef COORDINATOR_CUSTOM_HANDLER
           3188                         ;#define DpaApiRfTxDpaPacketCoordinator()                  DpaApiEntry( param2, param3.low8, DPA_API_COORDINATOR_RFTX_DPAPACKET )
           3189                         ;#endif
           3190                         ;
           3191                         ;#if !defined( TR7xD )
           3192                         ;#define DpaApiMenu( menu, flags )                         DpaApiEntry( menu, flags, DPA_API_MENU )
           3193                         ;#define DpaApiMenuIndicateResult( ok )                    DpaApiEntry( ok, param3.low8, DPA_API_MENU_INDICATE_RESULT )
           3194                         ;#define DpaApiMenuExecute( menuAndItem )                  DpaApiEntry( menuAndItem, param3.low8, DPA_API_MENU_EXECUTE )
           3195                         ;#define DpaApiDeepSleep( wdtcon )                         DpaApiEntry( wdtcon, param3.low8, DPA_API_DEEP_SLEEP )
           3196                         ;#endif
           3197                         ;
           3198                         ;#define DpaApiLocalFrc_StackSaver( frcCommand, replyTxPower ) \
           3199                         ;  param2 = frcCommand; \
           3200                         ;  param3.low8 = replyTxPower; \
           3201                         ;  W = DPA_API_LOCAL_FRC; \
           3202                         ;  #asm \
           3203                         ;    DW  __MOVLP( DPA_API_ADDRESS >> 8 ); \
           3204                         ;    DW  __CALL( DPA_API_ADDRESS ); \
           3205                         ;    DW  __MOVLP( CUSTOM_HANDLER_ADDRESS >> 8 ); \
           3206                         ;  #endasm \
           3207                         ;
           3208                         ;#define I2CcomputeFrequency( I2Cfrequency)                ( ( ( F_OSC ) / ( ( I2Cfrequency ) * 4 ) ) - 1 )
           3209                         ;
           3210                         ;// Wrapper routines to be called instead of DpaApi??? macros to decrease code size if more than ~2 calls are needed
           3211                         ;void _DpaApiI2Cinit( uns8 frequency );
           3212                         ;void _DpaApiI2Cstart( uns8 address );
           3213                         ;void _DpaApiI2Cwrite( uns8 data );
           3214                         ;uns8 _DpaApiI2Cread( uns8 ack );
           3215                         ;void _DpaApiI2Cstop();
           3216                         ;void _DpaApiI2CwaitForACK( uns8 address );
           3217                         ;void _DpaApiI2Cshutdown();
           3218                         ;void _DpaApiI2CwaitForIdle();
           3219                         ;void _DpaApiSleep( uns8 wdtcon );
           3220                         ;#if !defined( TR7xD )
           3221                         ;void _DpaApiDeepSleep( uns8 wdtcon );
           3222                         ;#endif
           3223                         ;void _DpaApiSleepFirst( uns8 wdtcon );
           3224                         ;void _DpaApiAfterSleep();
           3225                         ;uns8 _DpaApiRandom();
           3226                         ;void _DpaApiSetRfDefaults();
           3227                         ;
           3228                         ;// Helper "multi" function to decrease code size if used more times
           3229                         ;void _DpaApiI2Cwrite0();
           3230                         ;void _DpaApiI2CwriteAndStop( uns8 data );
           3231                         ;uns8 _DpaApiI2CreadACK();
           3232                         ;uns8 _DpaApiI2CreadNACK();
           3233                         ;uns8 _DpaApiI2CreadNACKandStop();
           3234                         ;
           3235                         ;#ifdef COORDINATOR_CUSTOM_HANDLER
           3236                         ;#undef  DpaEvent_Interrupt
           3237                         ;#undef  DpaEvent_BeforeSleep
           3238                         ;#undef  DpaEvent_AfterSleep
           3239                         ;#undef  DpaEvent_FrcValue
           3240                         ;#undef  DpaEvent_FrcResponseTime
           3241                         ;#else
           3242                         ;#undef  DpaEvent_ReceiveDpaResponse
           3243                         ;#undef  DpaEvent_IFaceReceive
           3244                         ;#endif
           3245                         ;
           3246                         ;// To detect overlapping code in case someone would put some code before this header by mistake
           3247                         ;#pragma origin __APPLICATION_ADDRESS
     0000  3248         ORG 0x3A00
           3249                         ;#pragma updateBank 0
           3250                         ;
           3251                         ;//############################################################################################
           3252                         ;// Main IQRF entry point jumps to the main DPA entry point
           3253                         ;void APPLICATION()
           3254                         ;//############################################################################################
           3255                         ;{
           3256 APPLICATION
           3257                         ;  #asm
           3258                         ;    DW  __MOVLP( MAIN_DPA_ADDRESS >> 8 );
3A00 31AC  3259         DW    0x31AC
           3260                         ;  DW  __GOTO( MAIN_DPA_ADDRESS );
3A01 2C04  3261         DW    0x2C04
           3262                         ;  #endasm
           3263                         ;
           3264                         ;#ifndef NO_CUSTOM_DPA_HANDLER
           3265                         ;    // Fake call to force CustomDpaHandler() compilation
           3266                         ;    CustomDpaHandler();
           3267                         ;#endif
           3268                         ;
           3269                         ;  // Fake call to force DpaApiEntry() compilation
           3270                         ;  DpaApiEntry( param2, param3.low8, W );
3A02 2A08  3271         GOTO  DpaApiEntry
           3272                         ;}
           3273                         ;
           3274                         ;//############################################################################################
           3275                         ;// Entry stub to the real DPA API entry
           3276                         ;#pragma origin DPA_API_ADDRESS_ENTRY
     0000  3277         ORG 0x3A08
           3278                         ;uns8  DpaApiEntry( uns8 par1 @ param2, uns8 par2 @ param3.low8, uns8 apiIndex @ W )
           3279                         ;//############################################################################################
           3280                         ;{
           3281 DpaApiEntry
           3282                         ;  #asm
           3283                         ;    DW  __MOVLP( DPA_API_ADDRESS >> 8 );
3A08 31AC  3284         DW    0x31AC
           3285                         ;  DW  __CALL( DPA_API_ADDRESS );
3A09 2400  3286         DW    0x2400
           3287                         ;  DW  __MOVLP( DPA_API_ADDRESS_ENTRY >> 8 );
3A0A 31BA  3288         DW    0x31BA
           3289                         ;  #endasm
           3290                         ;
           3291                         ;    return W;
3A0B 0008  3292         RETURN
           3293                         ;}
           3294                         ;
           3295                         ;//############################################################################################
           3296                         ;#pragma origin DPA_API_ADDRESS_ENTRY + 0x08
     0000  3297         ORG 0x3A10
           3298                         ;
           3299                         ;//############################################################################################
           3300                         ;
           3301                         ;#ifndef NO_CUSTOM_DPA_HANDLER
           3302                         ;// Next comes Custom DPA handler routine
           3303                         ;#pragma origin CUSTOM_HANDLER_ADDRESS
           3304                         ;#endif
           3305                         ;
           3306                         ;#pragma updateBank 1
           3307 
     0000  3308         ORG 0x3800
3800 0046  3309         DATA 0046H
3801 0005  3310         DATA 0005H
3802 0082  3311         DATA 0082H
     0000  3312         ORG 0x0240
0240 0008  3313         DATA 0008H
0241 0009  3314         DATA 0009H
0242 0000  3315         DATA 0000H
0243 00FF  3316         DATA 00FFH
0244 00FF  3317         DATA 00FFH
0245 0001  3318         DATA 0001H
0246 0080  3319         DATA 0080H
0247 0000  3320         DATA 0000H
0248 0011  3321         DATA 0011H
0249 0009  3322         DATA 0009H
024A 0001  3323         DATA 0001H
024B 00FF  3324         DATA 00FFH
024C 00FF  3325         DATA 00FFH
024D 0001  3326         DATA 0001H
024E 0080  3327         DATA 0080H
024F 0080  3328         DATA 0080H
0250 00FF  3329         DATA 00FFH
0251 00E8  3330         DATA 00E8H
0252 0003  3331         DATA 0003H
0253 0001  3332         DATA 0001H
0254 0080  3333         DATA 0080H
0255 0000  3334         DATA 0000H
0256 00FF  3335         DATA 00FFH
0257 00E8  3336         DATA 00E8H
0258 0003  3337         DATA 0003H
0259 0000  3338         DATA 0000H
           3339         END
           3340 
           3341 
           3342 ; *** KEY INFO ***
           3343 
           3344 ; 0x0100 P0    5 word(s)  0 % : main
           3345 
           3346 ; 0x3A00 P7    3 word(s)  0 % : APPLICATION
           3347 ; 0x3810 P7    2 word(s)  0 % : dummy
           3348 ; 0x3816 P7    2 word(s)  0 % : iqrfSleep
           3349 ; 0x3819 P7    2 word(s)  0 % : _debug
           3350 ; 0x381C P7    2 word(s)  0 % : moduleInfo
           3351 ; 0x3822 P7    2 word(s)  0 % : pulsingLEDR
           3352 ; 0x3825 P7    2 word(s)  0 % : pulseLEDR
           3353 ; 0x3828 P7    2 word(s)  0 % : stopLEDR
           3354 ; 0x382B P7    2 word(s)  0 % : pulsingLEDG
           3355 ; 0x382E P7    2 word(s)  0 % : pulseLEDG
           3356 ; 0x3831 P7    2 word(s)  0 % : stopLEDG
           3357 ; 0x3834 P7    2 word(s)  0 % : setOnPulsingLED
           3358 ; 0x3837 P7    2 word(s)  0 % : setOffPulsingLED
           3359 ; 0x383A P7    2 word(s)  0 % : eeReadByte
           3360 ; 0x383D P7    2 word(s)  0 % : eeReadData
           3361 ; 0x3840 P7    2 word(s)  0 % : eeWriteByte
           3362 ; 0x3843 P7    2 word(s)  0 % : eeWriteData
           3363 ; 0x3846 P7    2 word(s)  0 % : readFromRAM
           3364 ; 0x384C P7    2 word(s)  0 % : clearBufferINFO
           3365 ; 0x384F P7    2 word(s)  0 % : swapBufferINFO
           3366 ; 0x3852 P7    2 word(s)  0 % : compareBufferINFO2RF
           3367 ; 0x3855 P7    2 word(s)  0 % : copyBufferINFO2COM
           3368 ; 0x3858 P7    2 word(s)  0 % : copyBufferINFO2RF
           3369 ; 0x385B P7    2 word(s)  0 % : copyBufferRF2COM
           3370 ; 0x385E P7    2 word(s)  0 % : copyBufferRF2INFO
           3371 ; 0x3861 P7    2 word(s)  0 % : copyBufferCOM2RF
           3372 ; 0x3864 P7    2 word(s)  0 % : copyBufferCOM2INFO
           3373 ; 0x3867 P7    2 word(s)  0 % : copyMemoryBlock
           3374 ; 0x386A P7    2 word(s)  0 % : startDelay
           3375 ; 0x386D P7    2 word(s)  0 % : startLongDelay
           3376 ; 0x3870 P7    2 word(s)  0 % : isDelay
           3377 ; 0x3873 P7    2 word(s)  0 % : waitDelay
           3378 ; 0x3876 P7    2 word(s)  0 % : waitMS
           3379 ; 0x3879 P7    2 word(s)  0 % : startCapture
           3380 ; 0x387C P7    2 word(s)  0 % : captureTicks
           3381 ; 0x3882 P7    2 word(s)  0 % : waitNewTick
           3382 ; 0x3885 P7    2 word(s)  0 % : enableSPI
           3383 ; 0x3888 P7    2 word(s)  0 % : disableSPI
           3384 ; 0x388B P7    2 word(s)  0 % : startSPI
           3385 ; 0x388E P7    2 word(s)  0 % : stopSPI
           3386 ; 0x3891 P7    2 word(s)  0 % : restartSPI
           3387 ; 0x3894 P7    2 word(s)  0 % : getStatusSPI
           3388 ; 0x3897 P7    2 word(s)  0 % : setRFpower
           3389 ; 0x389A P7    2 word(s)  0 % : setLEDG
           3390 ; 0x389D P7    2 word(s)  0 % : setRFchannel
           3391 ; 0x38A0 P7    2 word(s)  0 % : setRFmode
           3392 ; 0x38A3 P7    2 word(s)  0 % : setRFspeed
           3393 ; 0x38A6 P7    2 word(s)  0 % : setRFsleep
           3394 ; 0x38A9 P7    2 word(s)  0 % : setRFready
           3395 ; 0x38AC P7    2 word(s)  0 % : RFTXpacket
           3396 ; 0x38AF P7    2 word(s)  0 % : RFRXpacket
           3397 ; 0x38B2 P7    2 word(s)  0 % : checkRF
           3398 ; 0x38B8 P7    2 word(s)  0 % : amIBonded
           3399 ; 0x38BB P7    2 word(s)  0 % : removeBond
           3400 ; 0x38BE P7    2 word(s)  0 % : bondNewNode
           3401 ; 0x38C1 P7    2 word(s)  0 % : isBondedNode
           3402 ; 0x38C4 P7    2 word(s)  0 % : removeBondedNode
           3403 ; 0x38C7 P7    2 word(s)  0 % : rebondNode
           3404 ; 0x38CA P7    2 word(s)  0 % : clearAllBonds
           3405 ; 0x38CD P7    2 word(s)  0 % : setNonetMode
           3406 ; 0x38D0 P7    2 word(s)  0 % : setCoordinatorMode
           3407 ; 0x38D3 P7    2 word(s)  0 % : setNodeMode
           3408 ; 0x38D6 P7    2 word(s)  0 % : setNetworkFilteringOn
           3409 ; 0x38D9 P7    2 word(s)  0 % : setNetworkFilteringOff
           3410 ; 0x38DC P7    2 word(s)  0 % : getNetworkParams
           3411 ; 0x38DF P7    2 word(s)  0 % : setRoutingOn
           3412 ; 0x38E2 P7    2 word(s)  0 % : setRoutingOff
           3413 ; 0x38E8 P7    2 word(s)  0 % : answerSystemPacket
           3414 ; 0x38EB P7    2 word(s)  0 % : discovery
           3415 ; 0x38EE P7    2 word(s)  0 % : wasRouted
           3416 ; 0x38F1 P7    2 word(s)  0 % : optimizeHops
           3417 ; 0x38F4 P7    2 word(s)  0 % : getSupplyVoltage
           3418 ; 0x38F7 P7    2 word(s)  0 % : getTemperature
           3419 ; 0x38FA P7    2 word(s)  0 % : clearBufferRF
           3420 ; 0x3910 P7    2 word(s)  0 % : isDiscoveredNode
           3421 ; 0x3913 P7    2 word(s)  0 % : enableRFPGM
           3422 ; 0x3916 P7    2 word(s)  0 % : disableRFPGM
           3423 ; 0x3919 P7    2 word(s)  0 % : setupRFPGM
           3424 ; 0x391C P7    2 word(s)  0 % : runRFPGM
           3425 ; 0x391F P7    2 word(s)  0 % : iqrfDeepSleep
           3426 ; 0x3922 P7    2 word(s)  0 % : wasRFICrestarted
           3427 ; 0x3925 P7    2 word(s)  0 % : eeeWriteData
           3428 ; 0x3928 P7    2 word(s)  0 % : eeeReadData
           3429 ; 0x3931 P7    2 word(s)  0 % : setINDF0
           3430 ; 0x3934 P7    2 word(s)  0 % : setINDF1
           3431 ; 0x3937 P7    2 word(s)  0 % : getRSSI
           3432 ; 0x393A P7    2 word(s)  0 % : removeBondAddress
           3433 ; 0x393D P7    2 word(s)  0 % : sendFRC
           3434 ; 0x3940 P7    2 word(s)  0 % : responseFRC
           3435 ; 0x3943 P7    2 word(s)  0 % : bondRequestAdvanced
           3436 ; 0x3946 P7    2 word(s)  0 % : prebondNodeAtNode
           3437 ; 0x3949 P7    2 word(s)  0 % : nodeAuthorization
           3438 ; 0x394C P7    2 word(s)  0 % : dummy01
           3439 ; 0x3958 P7    2 word(s)  0 % : setAccessPassword
           3440 ; 0x395B P7    2 word(s)  0 % : setUserKey
           3441 ; 0x3961 P7    2 word(s)  0 % : amIRecipientOfFRC
           3442 ; 0x3964 P7    2 word(s)  0 % : setLEDR
           3443 ; 0x3967 P7    2 word(s)  0 % : encryptBufferRF
           3444 ; 0x396A P7    2 word(s)  0 % : decryptBufferRF
           3445 ; 0x396D P7    2 word(s)  0 % : prebondNodeAtCoordinator
           3446 ; 0x3970 P7    2 word(s)  0 % : setFSRs
           3447 ; 0x3973 P7    2 word(s)  0 % : updateCRC16
           3448 ; 0x3976 P7    2 word(s)  0 % : smartConnect
           3449 ; 0x3979 P7    2 word(s)  0 % : addressBitmap
           3450 ; 0x397C P7    2 word(s)  0 % : setServiceChannel
           3451 ; 0x3A08 P7    4 word(s)  0 % : DpaApiEntry
           3452 
           3453 ; RAM usage: 1088 bytes (0 local), 3008 bytes free
           3454 ; Maximum call level: 1
           3455 ;  Codepage 0 has   32 word(s) :   1 %
           3456 ;  Codepage 1 has    0 word(s) :   0 %
           3457 ;  Codepage 2 has    0 word(s) :   0 %
           3458 ;  Codepage 3 has    0 word(s) :   0 %
           3459 ;  Codepage 4 has    0 word(s) :   0 %
           3460 ;  Codepage 5 has    0 word(s) :   0 %
           3461 ;  Codepage 6 has    0 word(s) :   0 %
           3462 ;  Codepage 7 has  218 word(s) :  10 %
           3463 ;  Codepage 8 has    0 word(s) :   0 %
           3464 ;  Codepage 9 has    0 word(s) :   0 %
           3465 ;  Codepage 10 has    0 word(s) :   0 %
           3466 ;  Codepage 11 has    0 word(s) :   0 %
           3467 ;  Codepage 12 has    0 word(s) :   0 %
           3468 ;  Codepage 13 has    0 word(s) :   0 %
           3469 ;  Codepage 14 has    0 word(s) :   0 %
           3470 ;  Codepage 15 has    0 word(s) :   0 %
           3471 ; Total of 250 code words (0 %)
