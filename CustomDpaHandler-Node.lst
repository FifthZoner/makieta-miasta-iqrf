CC5X Version 3.8A,   File: C:\customdpa\CustomDpaHandler-Node.c 22. Jan 2025  17:39   Page 1

ADDR CODE  LINE SOURCE

           0001 
           0002 ; CC5X Version 3.8A, Copyright (c) B Knudsen Data
           0003 ; C compiler for the PICmicro family
           0004 ; ************  22. Jan 2025  17:39  *************
           0005 
           0006         processor  16LF18877
           0007         radix  DEC
           0008 
     0000  0009 Carry       EQU   0
     0002  0010 Zero_       EQU   2
     0013  0011 TRISC       EQU   0x13
     0018  0012 LATC        EQU   0x18
     0070  0013 userReg0    EQU   0x70
     02A1  0014 DLEN        EQU   0x2A1
     02AE  0015 PNUM        EQU   0x2AE
     02AF  0016 PCMD        EQU   0x2AF
     04A0  0017 DpaRfMessage EQU   0x4A0
     0620  0018 PeripheralRam EQU   0x620
           0019 
0000 2900  0020         GOTO main
           0021 
           0022   ; FILE C:\customdpa\IQRF.h
           0023                         ;// *********************************************************************
           0024                         ;//                     IQRF OS basic include file                      *
           0025                         ;// *********************************************************************
           0026                         ;//
           0027                         ;// Online IQRF OS Reference Guide: http://www.iqrf.org/IQRF-OS-Reference-guide/
           0028                         ;//
           0029                         ;// Copyright (c) MICRORISC s.r.o.
           0030                         ;//
           0031                         ;// Intended for:
           0032                         ;//   HW: TR-72D, TR-76D, TR-77D, TR-78D, TR-75D, TR-72G, TR-76G, TR-75G, TR-82G
           0033                         ;//   OS: 4.06D, 4.06G
           0034                         ;//
           0035                         ;// File:    IQRF.h
           0036                         ;// Version: v1.00                                   Revision: 03/06/2022
           0037                         ;//
           0038                         ;// Revision history:
           0039                         ;//   v1.00: 03/06/2022  First release for OS 4.06D and 4.06G.
           0040                         ;//
           0041                         ;// *********************************************************************
           0042                         ;
           0043                         ;#if IQRFOS != 406
           0044                         ;    #error Invalid IQRF OS version, v4.06D or v4.06G is expected. Make sure matching header files and project IQRF OS version setting are used.
           0045                         ;#endif
           0046                         ;
           0047                         ;#if __CC5X__ < 3701
           0048                         ;    #warning Insufficient CC5X compiler version, V3.7A or higher is recommended.
           0049                         ;#endif
           0050                         ;
           0051                         ;#define OS_VERSION 0x46
           0052                         ;
           0053                         ;#if defined TR72D
           0054                         ;    #message Compilation for TR-72D modules (PIC16LF1938) and IQRF OS 4.06D.
           0055                         ;    #define TR7xD
           0056                         ;#elif defined TR76D
           0057                         ;    #message Compilation for TR-76D modules (PIC16LF1938) and IQRF OS 4.06D.
           0058                         ;    #define TR7xD
           0059                         ;#elif defined TR77D
           0060                         ;    #message Compilation for TR-77D modules (PIC16LF1938) and IQRF OS 4.06D.
           0061                         ;    #define TR7xD
           0062                         ;#elif defined TR78D
           0063                         ;    #message Compilation for TR-78D modules (PIC16LF1938) and IQRF OS 4.06D.
           0064                         ;    #define TR7xD
           0065                         ;#elif defined TR75D
           0066                         ;    #message Compilation for TR-75D modules (PIC16LF1938) and IQRF OS 4.06D.
           0067                         ;    #define TR7xD
           0068                         ;#elif defined TR72G
           0069                         ;    #message Compilation for TR-72G modules (PIC16LF18877) and IQRF OS 4.06G.
           0070                         ;    #define TR7xG
           0071                         ;#elif defined TR76G
           0072                         ;    #message Compilation for TR-76G modules (PIC16LF18877) and IQRF OS 4.06G.
           0073                         ;    #define TR7xG
           0074                         ;#elif defined TR75G
           0075                         ;    #message Compilation for TR-75G modules (PIC16LF18877) and IQRF OS 4.06G.
           0076                         ;    #define TR7xG
           0077                         ;#elif defined TR82G
           0078                         ;    #message Compilation for TR-82G modules (PIC16LF18877) and IQRF OS 4.06G.
           0079                         ;    #define TR8xG
           0080                         ;#else
           0081                         ;    #error Unsupported TR module type.
           0082                         ;#endif
           0083                         ;
           0084                         ;// TR-7xD
           0085                         ;#if defined TR7xD
           0086                         ;    #if _16LF1938 != 1
           0087                         ;        #pragma chip      PIC16LF1938
           0088                         ;    #endif
           0089                         ;    
           0090                         ;    #define MCU_ID    4
           0091                         ;    #define TR_FAMILY 1 // TR-7xD
           0092                         ;
           0093                         ;    #define _ACKDT    ACKDT
           0094                         ;    #define _ACKEN    ACKEN
           0095                         ;    #define _ACKSTAT  ACKSTAT
           0096                         ;    #define _BAUDCON  BAUDCON
           0097                         ;    #define _BF       BF
           0098                         ;    #define _CKE      CKE
           0099                         ;    #define _DACCON0  DACCON0
           0100                         ;    #define _DACCON1  DACCON1
           0101                         ;    #define _EEADRH   EEADRH
           0102                         ;    #define _EEADRL   EEADRL
           0103                         ;    #define _EECON1   EECON1
           0104                         ;    #define _EECON2   EECON2
           0105                         ;    #define _EEDATH   EEDATH
           0106                         ;    #define _EEDATL   EEDATL
           0107                         ;    #define _GO       GO
           0108                         ;    #define _PEN      PEN
           0109                         ;    #define _PR6      PR6
           0110                         ;    #define _RCEN     RCEN
           0111                         ;    #define _RCREG    RCREG
           0112                         ;    #define _RCSTA    RCSTA
           0113                         ;    #define _RW_      RW_
           0114                         ;    #define _SEN      SEN
           0115                         ;    #define _SMP      SMP
           0116                         ;    #define _SPBRGH   SPBRGH
           0117                         ;    #define _SPBRGL   SPBRGL
           0118                         ;    #define _SSPADD   SSPADD
           0119                         ;    #define _SSPBUF   SSPBUF
           0120                         ;    #define _SSPCON1  SSPCON1
           0121                         ;    #define _SSPCON2  SSPCON2
           0122                         ;    #define _SSPIF    SSPIF
           0123                         ;    #define _SSPEN    SSPEN
           0124                         ;    #define _SSPSTAT  SSPSTAT
           0125                         ;    #define _SWDTEN   SWDTEN
           0126                         ;    #define _T1SYNC_  T1SYNC_
           0127                         ;    #define _TMR1ON   TMR1ON
           0128                         ;    #define _TMR6     TMR6
           0129                         ;    #define _TMR6ON   TMR6ON
           0130                         ;    #define _TXREG    TXREG
           0131                         ;    #define _TXSTA    TXSTA
           0132                         ;    #define _WDTCON   WDTCON
           0133                         ;
           0134                         ;// TR-7xG, TR-8xG
           0135                         ;#elif defined TR7xG || defined TR8xG
           0136                         ;    #if _16LF18877 != 1
           0137                         ;        #pragma chip      PIC16LF18877
           0138                         ;    #endif
           0139                         ;    
           0140                         ;    #define MCU_ID    5
           0141                         ;    
           0142                         ;    #if defined TR7xG
           0143                         ;        #define TR_FAMILY 2 // TR-7xG
           0144                         ;    #else
           0145                         ;        #define TR_FAMILY 3 // TR-8xG
           0146                         ;    #endif
           0147                         ;
           0148                         ;    #define _ACKDT    SSP1CON2.5
           0149                         ;    #define _ACKEN    SSP1CON2.4
           0150                         ;    #define _ACKSTAT  SSP1CON2.6
           0151                         ;    #define _BAUDCON  BAUD1CON
           0152                         ;    #define _BF       SSP1STAT.0
           0153                         ;    #define _CKE      SSP1STAT.6
           0154                         ;    #define _DACCON0  DAC1CON0
           0155                         ;    #define _DACCON1  DAC1CON1
           0156                         ;    #define _EEADRH   NVMADRH
           0157                         ;    #define _EEADRL   NVMADRL
           0158                         ;    #define _EECON1   NVMCON1
           0159                         ;    #define _EECON2   NVMCON2
           0160                         ;    #define _EEDATH   NVMDATH
           0161                         ;    #define _EEDATL   NVMDATL
           0162                         ;    #define _GO       ADGO
           0163                         ;    #define _PEN      SSP1CON2.2
           0164                         ;    #define _PR6      T6PR
           0165                         ;    #define _RCEN     SSP1CON2.3
           0166                         ;    #define _RCREG    RC1REG
           0167                         ;    #define _RCSTA    RC1STA
           0168                         ;    #define _RW_      SSP1STAT.2
           0169                         ;    #define _SEN      SSP1CON2.0
           0170                         ;    #define _SMP      SSP1STAT.7
           0171                         ;    #define _SPBRGH   SP1BRGH
           0172                         ;    #define _SPBRGL   SP1BRGL
           0173                         ;    #define _SSPADD   SSP1ADD
           0174                         ;    #define _SSPBUF   SSP1BUF
           0175                         ;    #define _SSPCON1  SSP1CON1
           0176                         ;    #define _SSPCON2  SSP1CON2
           0177                         ;    #define _SSPIF    SSP1IF
           0178                         ;    #define _SSPEN    SSP1CON1.5
           0179                         ;    #define _SSPSTAT  SSP1STAT
           0180                         ;    #define _SWDTEN   WDTCON0.0
           0181                         ;    #define _T1SYNC_  T1CON.2
           0182                         ;    #define _TMR1ON   T1CON.0
           0183                         ;    #define _TMR6     T6TMR
           0184                         ;    #define _TMR6ON   T6CON.7
           0185                         ;    #define _TXREG    TX1REG
           0186                         ;    #define _TXSTA    TX1STA
           0187                         ;    #define _WDTCON   WDTCON0
           0188                         ;#else
           0189                         ;    #error Unsupported TR module family.
           0190                         ;#endif
           0191                         ;
           0192                         ;#pragma origin 0x100
     0000  0193         ORG 0x0100
           0194                         ;#pragma update_RP 0
           0195                         ;
           0196                         ;void APPLICATION();
           0197                         ;
           0198                         ;void main()                                 // Skipped during Upload
           0199                         ;{
           0200 main
           0201                         ;    APPLICATION();
0100 31B8  0202         MOVLP 0x38
0101 2200  0203         CALL  APPLICATION
0102 3180  0204         MOVLP 0x00
           0205                         ;}
0103 0063  0206         SLEEP
0104 2900  0207         GOTO main
           0208 
           0209   ; FILE C:\customdpa\IQRF-functions.h
           0210                         ;// *********************************************************************
           0211                         ;//                         IQRF OS functions                           *
           0212                         ;// *********************************************************************
           0213                         ;//
           0214                         ;// Online IQRF OS Reference Guide: http://www.iqrf.org/IQRF-OS-Reference-guide/
           0215                         ;//
           0216                         ;// Copyright (c) MICRORISC s.r.o.
           0217                         ;//
           0218                         ;// Intended for:
           0219                         ;//   HW: TR-72D, TR-76D, TR-77D, TR-78D, TR-75D, TR-72G, TR-76G, TR-75G, TR-82G
           0220                         ;//   OS: 4.06D, 4.06G
           0221                         ;//
           0222                         ;// File:    IQRF-functions.h
           0223                         ;// Version: v1.01                                   Revision: 05/12/2024
           0224                         ;//
           0225                         ;// Revision history:
           0226                         ;//   v1.01: 05/12/2024  The return value of the wasRFICrestarted function is different for TR-7xD and TR-7xG module lines.
           0227                         ;//   v1.00: 03/06/2022  First release for OS 4.06D and 4.06G.
           0228                         ;//
           0229                         ;// *********************************************************************
           0230                         ;
           0231                         ;#pragma optimize 0
           0232                         ;#pragma update_PAGE 0
           0233                         ;#pragma update_RP 0
           0234                         ;
           0235                         ;// Identification header for internal use only
           0236                         ;#pragma cdata[0x3800] = OS_VERSION /* OS Version */, MCU_ID /* MCU ID */, TR_FAMILY | 0x80 /*TR Family*/
           0237                         ;
           0238                         ;#define dummy_address   0x3810
           0239                         ;#pragma origin dummy_address
     0000  0240         ORG 0x3810
           0241                         ;void dummy()
           0242                         ;{
           0243 dummy
           0244                         ;  #asm
           0245                         ;    DW 0x2000
3810 2000  0246         DW    0x2000
           0247                         ;  #endasm
           0248                         ;  #pragma updateBank exit=UserBank_01
           0249                         ;}
3811 0008  0250         RETURN
           0251                         ;
           0252                         ;#define iqrfSleep_address   0x3816
           0253                         ;#pragma origin iqrfSleep_address
     0000  0254         ORG 0x3816
           0255                         ;void iqrfSleep()
           0256                         ;{
           0257 iqrfSleep
           0258                         ;  #asm
           0259                         ;    DW 0x2000
3816 2000  0260         DW    0x2000
           0261                         ;  #endasm
           0262                         ;  #pragma updateBank exit=UserBank_01
           0263                         ;}
3817 0008  0264         RETURN
           0265                         ;
           0266                         ;#define _debug_address  0x3819
           0267                         ;#pragma origin _debug_address
     0000  0268         ORG 0x3819
           0269                         ;void _debug()
           0270                         ;{
           0271 _debug
           0272                         ;  #asm
           0273                         ;    DW 0x2000
3819 2000  0274         DW    0x2000
           0275                         ;  #endasm
           0276                         ;  #pragma updateBank exit=UserBank_01
           0277                         ;}
381A 0008  0278         RETURN
           0279                         ;
           0280                         ;#define debug()     \
           0281                         ;    do {            \
           0282                         ;        _debug();   \
           0283                         ;        nop();      \
           0284                         ;    } while (0)
           0285                         ;
           0286                         ;#define moduleInfo_address  0x381c
           0287                         ;#pragma origin moduleInfo_address
     0000  0288         ORG 0x381C
           0289                         ;void moduleInfo()
           0290                         ;{
           0291 moduleInfo
           0292                         ;  #asm
           0293                         ;    DW 0x2000
381C 2000  0294         DW    0x2000
           0295                         ;  #endasm
           0296                         ;  #pragma updateBank exit=UserBank_01
           0297                         ;}
381D 0008  0298         RETURN
           0299                         ;
           0300                         ;#define pulsingLEDR_address 0x3822
           0301                         ;#pragma origin pulsingLEDR_address
     0000  0302         ORG 0x3822
           0303                         ;void pulsingLEDR()
           0304                         ;{
           0305 pulsingLEDR
           0306                         ;  #asm
           0307                         ;    DW 0x2000
3822 2000  0308         DW    0x2000
           0309                         ;  #endasm
           0310                         ;  #pragma updateBank exit=UserBank_01
           0311                         ;}
3823 0008  0312         RETURN
           0313                         ;
           0314                         ;#define pulseLEDR_address   0x3825
           0315                         ;#pragma origin pulseLEDR_address
     0000  0316         ORG 0x3825
           0317                         ;void pulseLEDR()
           0318                         ;{
           0319 pulseLEDR
           0320                         ;  #asm
           0321                         ;    DW 0x2000
3825 2000  0322         DW    0x2000
           0323                         ;  #endasm
           0324                         ;  #pragma updateBank exit=UserBank_01
           0325                         ;}
3826 0008  0326         RETURN
           0327                         ;
           0328                         ;#define stopLEDR_address    0x3828
           0329                         ;#pragma origin stopLEDR_address
     0000  0330         ORG 0x3828
           0331                         ;void stopLEDR()
           0332                         ;{
           0333 stopLEDR
           0334                         ;  #asm
           0335                         ;    DW 0x2000
3828 2000  0336         DW    0x2000
           0337                         ;  #endasm
           0338                         ;  #pragma updateBank exit=UserBank_01
           0339                         ;}
3829 0008  0340         RETURN
           0341                         ;
           0342                         ;#define pulsingLEDG_address 0x382b
           0343                         ;#pragma origin pulsingLEDG_address
     0000  0344         ORG 0x382B
           0345                         ;void pulsingLEDG()
           0346                         ;{
           0347 pulsingLEDG
           0348                         ;  #asm
           0349                         ;    DW 0x2000
382B 2000  0350         DW    0x2000
           0351                         ;  #endasm
           0352                         ;  #pragma updateBank exit=UserBank_01
           0353                         ;}
382C 0008  0354         RETURN
           0355                         ;
           0356                         ;#define pulseLEDG_address   0x382e
           0357                         ;#pragma origin pulseLEDG_address
     0000  0358         ORG 0x382E
           0359                         ;void pulseLEDG()
           0360                         ;{
           0361 pulseLEDG
           0362                         ;  #asm
           0363                         ;    DW 0x2000
382E 2000  0364         DW    0x2000
           0365                         ;  #endasm
           0366                         ;  #pragma updateBank exit=UserBank_01
           0367                         ;}
382F 0008  0368         RETURN
           0369                         ;
           0370                         ;#define stopLEDG_address    0x3831
           0371                         ;#pragma origin stopLEDG_address
     0000  0372         ORG 0x3831
           0373                         ;void stopLEDG()
           0374                         ;{
           0375 stopLEDG
           0376                         ;  #asm
           0377                         ;    DW 0x2000
3831 2000  0378         DW    0x2000
           0379                         ;  #endasm
           0380                         ;  #pragma updateBank exit=UserBank_01
           0381                         ;}
3832 0008  0382         RETURN
           0383                         ;
           0384                         ;#define setOnPulsingLED_address 0x3834
           0385                         ;#pragma origin setOnPulsingLED_address
     0000  0386         ORG 0x3834
           0387                         ;void setOnPulsingLED(uns8 ticks @ W)
           0388                         ;{
           0389 setOnPulsingLED
           0390                         ;  #asm
           0391                         ;    DW 0x2000
3834 2000  0392         DW    0x2000
           0393                         ;  #endasm
           0394                         ;  #pragma updateBank exit=UserBank_01
           0395                         ;}
3835 0008  0396         RETURN
           0397                         ;
           0398                         ;#define setOffPulsingLED_address    0x3837
           0399                         ;#pragma origin setOffPulsingLED_address
     0000  0400         ORG 0x3837
           0401                         ;void setOffPulsingLED(uns8 ticks @ W)
           0402                         ;{
           0403 setOffPulsingLED
           0404                         ;  #asm
           0405                         ;    DW 0x2000
3837 2000  0406         DW    0x2000
           0407                         ;  #endasm
           0408                         ;  #pragma updateBank exit=UserBank_01
           0409                         ;}
3838 0008  0410         RETURN
           0411                         ;
           0412                         ;#define eeReadByte_address  0x383a
           0413                         ;#pragma origin eeReadByte_address
     0000  0414         ORG 0x383A
           0415                         ;uns8 eeReadByte(uns8 address @ W)
           0416                         ;{
           0417 eeReadByte
           0418                         ;  #asm
           0419                         ;    DW 0x2000
383A 2000  0420         DW    0x2000
           0421                         ;  #endasm
           0422                         ;  #pragma updateBank exit=UserBank_01
           0423                         ;  return W;
383B 0008  0424         RETURN
           0425                         ;}
           0426                         ;
           0427                         ;#define eeReadData_address  0x383d
           0428                         ;#pragma origin eeReadData_address
     0000  0429         ORG 0x383D
           0430                         ;bit eeReadData(uns8 address @ param2, uns8 length @ W)
           0431                         ;{
           0432 eeReadData
           0433                         ;  #asm
           0434                         ;    DW 0x2000
383D 2000  0435         DW    0x2000
           0436                         ;  #endasm
           0437                         ;  #pragma updateBank exit=UserBank_01
           0438                         ;  return Carry;
383E 0008  0439         RETURN
           0440                         ;}
           0441                         ;
           0442                         ;#define eeWriteByte_address 0x3840
           0443                         ;#pragma origin eeWriteByte_address
     0000  0444         ORG 0x3840
           0445                         ;void eeWriteByte(uns8 address @ param2, uns8 data @ W)
           0446                         ;{
           0447 eeWriteByte
           0448                         ;  #asm
           0449                         ;    DW 0x2000
3840 2000  0450         DW    0x2000
           0451                         ;  #endasm
           0452                         ;  #pragma updateBank exit=UserBank_01
           0453                         ;}
3841 0008  0454         RETURN
           0455                         ;
           0456                         ;#define eeWriteData_address 0x3843
           0457                         ;#pragma origin eeWriteData_address
     0000  0458         ORG 0x3843
           0459                         ;void eeWriteData(uns8 address @ param2, uns8 length @ W)
           0460                         ;{
           0461 eeWriteData
           0462                         ;  #asm
           0463                         ;    DW 0x2000
3843 2000  0464         DW    0x2000
           0465                         ;  #endasm
           0466                         ;  #pragma updateBank exit=UserBank_01
           0467                         ;}
3844 0008  0468         RETURN
           0469                         ;
           0470                         ;#define readFromRAM_address 0x3846
           0471                         ;#pragma origin readFromRAM_address
     0000  0472         ORG 0x3846
           0473                         ;uns8 readFromRAM(uns16 address @ FSR0)
           0474                         ;{
           0475 readFromRAM
           0476                         ;  #asm
           0477                         ;    DW 0x2000
3846 2000  0478         DW    0x2000
           0479                         ;  #endasm
           0480                         ;  #pragma updateBank exit=UserBank_01
           0481                         ;  return W;
3847 0008  0482         RETURN
           0483                         ;}
           0484                         ;
           0485                         ;#define clearBufferINFO_address 0x384c
           0486                         ;#pragma origin clearBufferINFO_address
     0000  0487         ORG 0x384C
           0488                         ;void clearBufferINFO()
           0489                         ;{
           0490 clearBufferINFO
           0491                         ;  #asm
           0492                         ;    DW 0x2000
384C 2000  0493         DW    0x2000
           0494                         ;  #endasm
           0495                         ;  #pragma updateBank exit=UserBank_01
           0496                         ;}
384D 0008  0497         RETURN
           0498                         ;
           0499                         ;#define swapBufferINFO_address  0x384f
           0500                         ;#pragma origin swapBufferINFO_address
     0000  0501         ORG 0x384F
           0502                         ;void swapBufferINFO()
           0503                         ;{
           0504 swapBufferINFO
           0505                         ;  #asm
           0506                         ;    DW 0x2000
384F 2000  0507         DW    0x2000
           0508                         ;  #endasm
           0509                         ;  #pragma updateBank exit=UserBank_01
           0510                         ;}
3850 0008  0511         RETURN
           0512                         ;
           0513                         ;#define compareBufferINFO2RF_address    0x3852
           0514                         ;#pragma origin compareBufferINFO2RF_address
     0000  0515         ORG 0x3852
           0516                         ;bit compareBufferINFO2RF(uns8 length @ W)
           0517                         ;{
           0518 compareBufferINFO2RF
           0519                         ;  #asm
           0520                         ;    DW 0x2000
3852 2000  0521         DW    0x2000
           0522                         ;  #endasm
           0523                         ;  #pragma updateBank exit=UserBank_01
           0524                         ;  return Carry;
3853 0008  0525         RETURN
           0526                         ;}
           0527                         ;
           0528                         ;#define copyBufferINFO2COM_address  0x3855
           0529                         ;#pragma origin copyBufferINFO2COM_address
     0000  0530         ORG 0x3855
           0531                         ;void copyBufferINFO2COM()
           0532                         ;{
           0533 copyBufferINFO2COM
           0534                         ;  #asm
           0535                         ;    DW 0x2000
3855 2000  0536         DW    0x2000
           0537                         ;  #endasm
           0538                         ;  #pragma updateBank exit=UserBank_01
           0539                         ;}
3856 0008  0540         RETURN
           0541                         ;
           0542                         ;#define copyBufferINFO2RF_address   0x3858
           0543                         ;#pragma origin copyBufferINFO2RF_address
     0000  0544         ORG 0x3858
           0545                         ;void copyBufferINFO2RF()
           0546                         ;{
           0547 copyBufferINFO2RF
           0548                         ;  #asm
           0549                         ;    DW 0x2000
3858 2000  0550         DW    0x2000
           0551                         ;  #endasm
           0552                         ;  #pragma updateBank exit=UserBank_01
           0553                         ;}
3859 0008  0554         RETURN
           0555                         ;
           0556                         ;#define copyBufferRF2COM_address    0x385b
           0557                         ;#pragma origin copyBufferRF2COM_address
     0000  0558         ORG 0x385B
           0559                         ;void copyBufferRF2COM()
           0560                         ;{
           0561 copyBufferRF2COM
           0562                         ;  #asm
           0563                         ;    DW 0x2000
385B 2000  0564         DW    0x2000
           0565                         ;  #endasm
           0566                         ;  #pragma updateBank exit=UserBank_01
           0567                         ;}
385C 0008  0568         RETURN
           0569                         ;
           0570                         ;#define copyBufferRF2INFO_address   0x385e
           0571                         ;#pragma origin copyBufferRF2INFO_address
     0000  0572         ORG 0x385E
           0573                         ;void copyBufferRF2INFO()
           0574                         ;{
           0575 copyBufferRF2INFO
           0576                         ;  #asm
           0577                         ;    DW 0x2000
385E 2000  0578         DW    0x2000
           0579                         ;  #endasm
           0580                         ;  #pragma updateBank exit=UserBank_01
           0581                         ;}
385F 0008  0582         RETURN
           0583                         ;
           0584                         ;#define copyBufferCOM2RF_address    0x3861
           0585                         ;#pragma origin copyBufferCOM2RF_address
     0000  0586         ORG 0x3861
           0587                         ;void copyBufferCOM2RF()
           0588                         ;{
           0589 copyBufferCOM2RF
           0590                         ;  #asm
           0591                         ;    DW 0x2000
3861 2000  0592         DW    0x2000
           0593                         ;  #endasm
           0594                         ;  #pragma updateBank exit=UserBank_01
           0595                         ;}
3862 0008  0596         RETURN
           0597                         ;
           0598                         ;#define copyBufferCOM2INFO_address  0x3864
           0599                         ;#pragma origin copyBufferCOM2INFO_address
     0000  0600         ORG 0x3864
           0601                         ;void copyBufferCOM2INFO()
           0602                         ;{
           0603 copyBufferCOM2INFO
           0604                         ;  #asm
           0605                         ;    DW 0x2000
3864 2000  0606         DW    0x2000
           0607                         ;  #endasm
           0608                         ;  #pragma updateBank exit=UserBank_01
           0609                         ;}
3865 0008  0610         RETURN
           0611                         ;
           0612                         ;#define copyMemoryBlock_address 0x3867
           0613                         ;#pragma origin copyMemoryBlock_address
     0000  0614         ORG 0x3867
           0615                         ;void copyMemoryBlock(uns16 from @ FSR0, uns16 to @ FSR1, uns8 length @ W)
           0616                         ;{
           0617 copyMemoryBlock
           0618                         ;  #asm
           0619                         ;    DW 0x2000
3867 2000  0620         DW    0x2000
           0621                         ;  #endasm
           0622                         ; #pragma updateBank exit=UserBank_01
           0623                         ;}
3868 0008  0624         RETURN
           0625                         ;
           0626                         ;#define startDelay_address  0x386a
           0627                         ;#pragma origin startDelay_address
     0000  0628         ORG 0x386A
           0629                         ;void startDelay(uns8 ticks @ W)
           0630                         ;{
           0631 startDelay
           0632                         ;  #asm
           0633                         ;    DW 0x2000
386A 2000  0634         DW    0x2000
           0635                         ;  #endasm
           0636                         ;  #pragma updateBank exit=UserBank_01
           0637                         ;}
386B 0008  0638         RETURN
           0639                         ;
           0640                         ;#define startLongDelay_address  0x386d
           0641                         ;#pragma origin startLongDelay_address
     0000  0642         ORG 0x386D
           0643                         ;void startLongDelay(uns16 ticks @ param3)
           0644                         ;{
           0645 startLongDelay
           0646                         ;  #asm
           0647                         ;    DW 0x2000
386D 2000  0648         DW    0x2000
           0649                         ;  #endasm
           0650                         ;  #pragma updateBank exit=UserBank_01
           0651                         ;}
386E 0008  0652         RETURN
           0653                         ;
           0654                         ;#define isDelay_address 0x3870
           0655                         ;#pragma origin isDelay_address
     0000  0656         ORG 0x3870
           0657                         ;bit isDelay()
           0658                         ;{
           0659 isDelay
           0660                         ;  #asm
           0661                         ;    DW 0x2000
3870 2000  0662         DW    0x2000
           0663                         ;  #endasm
           0664                         ;  #pragma updateBank exit=UserBank_01
           0665                         ;  return Carry;
3871 0008  0666         RETURN
           0667                         ;}
           0668                         ;
           0669                         ;#define waitDelay_address   0x3873
           0670                         ;#pragma origin waitDelay_address
     0000  0671         ORG 0x3873
           0672                         ;void waitDelay(uns8 ticks @ W)
           0673                         ;{
           0674 waitDelay
           0675                         ;  #asm
           0676                         ;    DW 0x2000
3873 2000  0677         DW    0x2000
           0678                         ;  #endasm
           0679                         ;  #pragma updateBank exit=UserBank_01
           0680                         ;}
3874 0008  0681         RETURN
           0682                         ;
           0683                         ;#define waitMS_address  0x3876
           0684                         ;#pragma origin waitMS_address
     0000  0685         ORG 0x3876
           0686                         ;void waitMS(uns8 ms @ W)
           0687                         ;{
           0688 waitMS
           0689                         ;  #asm
           0690                         ;    DW 0x2000
3876 2000  0691         DW    0x2000
           0692                         ;  #endasm
           0693                         ;  #pragma updateBank exit=UserBank_01
           0694                         ;}
3877 0008  0695         RETURN
           0696                         ;
           0697                         ;#define startCapture_address    0x3879
           0698                         ;#pragma origin startCapture_address
     0000  0699         ORG 0x3879
           0700                         ;void startCapture()
           0701                         ;{
           0702 startCapture
           0703                         ;  #asm
           0704                         ;    DW 0x2000
3879 2000  0705         DW    0x2000
           0706                         ;  #endasm
           0707                         ;  #pragma updateBank exit=UserBank_01
           0708                         ;}
387A 0008  0709         RETURN
           0710                         ;
           0711                         ;#define captureTicks_address    0x387c
           0712                         ;#pragma origin captureTicks_address
     0000  0713         ORG 0x387C
           0714                         ;void captureTicks()
           0715                         ;{
           0716 captureTicks
           0717                         ;  #asm
           0718                         ;    DW 0x2000
387C 2000  0719         DW    0x2000
           0720                         ;  #endasm
           0721                         ;  #pragma updateBank exit=UserBank_01
           0722                         ;}
387D 0008  0723         RETURN
           0724                         ;
           0725                         ;#define waitNewTick_address 0x3882
           0726                         ;#pragma origin waitNewTick_address
     0000  0727         ORG 0x3882
           0728                         ;void waitNewTick()
           0729                         ;{
           0730 waitNewTick
           0731                         ;  #asm
           0732                         ;    DW 0x2000
3882 2000  0733         DW    0x2000
           0734                         ;  #endasm
           0735                         ;  #pragma updateBank exit=UserBank_01
           0736                         ;}
3883 0008  0737         RETURN
           0738                         ;
           0739                         ;#define enableSPI_address   0x3885
           0740                         ;#pragma origin enableSPI_address
     0000  0741         ORG 0x3885
           0742                         ;void enableSPI()
           0743                         ;{
           0744 enableSPI
           0745                         ;  #asm
           0746                         ;    DW 0x2000
3885 2000  0747         DW    0x2000
           0748                         ;  #endasm
           0749                         ;  #pragma updateBank exit=UserBank_01
           0750                         ;}
3886 0008  0751         RETURN
           0752                         ;
           0753                         ;#define disableSPI_address  0x3888
           0754                         ;#pragma origin disableSPI_address
     0000  0755         ORG 0x3888
           0756                         ;void disableSPI()
           0757                         ;{
           0758 disableSPI
           0759                         ;  #asm
           0760                         ;    DW 0x2000
3888 2000  0761         DW    0x2000
           0762                         ;  #endasm
           0763                         ;  #pragma updateBank exit=UserBank_01
           0764                         ;}
3889 0008  0765         RETURN
           0766                         ;
           0767                         ;#define startSPI_address    0x388b
           0768                         ;#pragma origin startSPI_address
     0000  0769         ORG 0x388B
           0770                         ;void startSPI(uns8 length @ W)
           0771                         ;{
           0772 startSPI
           0773                         ;  #asm
           0774                         ;    DW 0x2000
388B 2000  0775         DW    0x2000
           0776                         ;  #endasm
           0777                         ;  #pragma updateBank exit=UserBank_01
           0778                         ;}
388C 0008  0779         RETURN
           0780                         ;
           0781                         ;#define stopSPI_address 0x388e
           0782                         ;#pragma origin stopSPI_address
     0000  0783         ORG 0x388E
           0784                         ;void stopSPI()
           0785                         ;{
           0786 stopSPI
           0787                         ;  #asm
           0788                         ;    DW 0x2000
388E 2000  0789         DW    0x2000
           0790                         ;  #endasm
           0791                         ;  #pragma updateBank exit=UserBank_01
           0792                         ;}
388F 0008  0793         RETURN
           0794                         ;
           0795                         ;#define restartSPI_address  0x3891
           0796                         ;#pragma origin restartSPI_address
     0000  0797         ORG 0x3891
           0798                         ;void restartSPI()
           0799                         ;{
           0800 restartSPI
           0801                         ;  #asm
           0802                         ;    DW 0x2000
3891 2000  0803         DW    0x2000
           0804                         ;  #endasm
           0805                         ;  #pragma updateBank exit=UserBank_01
           0806                         ;}
3892 0008  0807         RETURN
           0808                         ;
           0809                         ;#define getStatusSPI_address    0x3894
           0810                         ;#pragma origin getStatusSPI_address
     0000  0811         ORG 0x3894
           0812                         ;bit getStatusSPI()
           0813                         ;{
           0814 getStatusSPI
           0815                         ;  #asm
           0816                         ;    DW 0x2000
3894 2000  0817         DW    0x2000
           0818                         ;  #endasm
           0819                         ;  #pragma updateBank exit=UserBank_01
           0820                         ;  return Carry;
3895 0008  0821         RETURN
           0822                         ;}
           0823                         ;
           0824                         ;#define setRFpower_address  0x3897
           0825                         ;#pragma origin setRFpower_address
     0000  0826         ORG 0x3897
           0827                         ;void setRFpower(uns8 level @ W)
           0828                         ;{
           0829 setRFpower
           0830                         ;  #asm
           0831                         ;    DW 0x2000
3897 2000  0832         DW    0x2000
           0833                         ;  #endasm
           0834                         ;  #pragma updateBank exit=UserBank_01
           0835                         ;}
3898 0008  0836         RETURN
           0837                         ;
           0838                         ;#define setLEDG_address 0x389a
           0839                         ;#pragma origin setLEDG_address
     0000  0840         ORG 0x389A
           0841                         ;void setLEDG()
           0842                         ;{
           0843 setLEDG
           0844                         ;  #asm
           0845                         ;    DW 0x2000
389A 2000  0846         DW    0x2000
           0847                         ;  #endasm
           0848                         ;  #pragma updateBank exit=UserBank_01
           0849                         ;}
389B 0008  0850         RETURN
           0851                         ;
           0852                         ;#define setRFchannel_address    0x389d
           0853                         ;#pragma origin setRFchannel_address
     0000  0854         ORG 0x389D
           0855                         ;void setRFchannel(uns8 channel @ W)
           0856                         ;{
           0857 setRFchannel
           0858                         ;  #asm
           0859                         ;    DW 0x2000
389D 2000  0860         DW    0x2000
           0861                         ;  #endasm
           0862                         ;  #pragma updateBank exit=UserBank_01
           0863                         ;}
389E 0008  0864         RETURN
           0865                         ;
           0866                         ;#define setRFmode_address   0x38a0
           0867                         ;#pragma origin setRFmode_address
     0000  0868         ORG 0x38A0
           0869                         ;void setRFmode(uns8 mode @ W)
           0870                         ;{
           0871 setRFmode
           0872                         ;  #asm
           0873                         ;    DW 0x2000
38A0 2000  0874         DW    0x2000
           0875                         ;  #endasm
           0876                         ;  #pragma updateBank exit=UserBank_01
           0877                         ;}
38A1 0008  0878         RETURN
           0879                         ;
           0880                         ;#define setRFspeed_address  0x38a3
           0881                         ;#pragma origin setRFspeed_address
     0000  0882         ORG 0x38A3
           0883                         ;void setRFspeed(uns8 speed @ W)
           0884                         ;{
           0885 setRFspeed
           0886                         ;  #asm
           0887                         ;    DW 0x2000
38A3 2000  0888         DW    0x2000
           0889                         ;  #endasm
           0890                         ;  #pragma updateBank exit=UserBank_01
           0891                         ;}
38A4 0008  0892         RETURN
           0893                         ;
           0894                         ;#define setRFsleep_address  0x38a6
           0895                         ;#pragma origin setRFsleep_address
     0000  0896         ORG 0x38A6
           0897                         ;void setRFsleep()
           0898                         ;{
           0899 setRFsleep
           0900                         ;  #asm
           0901                         ;    DW 0x2000
38A6 2000  0902         DW    0x2000
           0903                         ;  #endasm
           0904                         ;  #pragma updateBank exit=UserBank_01
           0905                         ;}
38A7 0008  0906         RETURN
           0907                         ;
           0908                         ;#define setRFready_address  0x38a9
           0909                         ;#pragma origin setRFready_address
     0000  0910         ORG 0x38A9
           0911                         ;void setRFready()
           0912                         ;{
           0913 setRFready
           0914                         ;  #asm
           0915                         ;    DW 0x2000
38A9 2000  0916         DW    0x2000
           0917                         ;  #endasm
           0918                         ;  #pragma updateBank exit=UserBank_01
           0919                         ;}
38AA 0008  0920         RETURN
           0921                         ;
           0922                         ;#define RFTXpacket_address  0x38ac
           0923                         ;#pragma origin RFTXpacket_address
     0000  0924         ORG 0x38AC
           0925                         ;void RFTXpacket()
           0926                         ;{
           0927 RFTXpacket
           0928                         ;  #asm
           0929                         ;    DW 0x2000
38AC 2000  0930         DW    0x2000
           0931                         ;  #endasm
           0932                         ;  #pragma updateBank exit=UserBank_01
           0933                         ;}
38AD 0008  0934         RETURN
           0935                         ;
           0936                         ;#define RFRXpacket_address  0x38af
           0937                         ;#pragma origin RFRXpacket_address
     0000  0938         ORG 0x38AF
           0939                         ;bit RFRXpacket()
           0940                         ;{
           0941 RFRXpacket
           0942                         ;  #asm
           0943                         ;    DW 0x2000
38AF 2000  0944         DW    0x2000
           0945                         ;  #endasm
           0946                         ;  #pragma updateBank exit=UserBank_01
           0947                         ;  return Carry;
38B0 0008  0948         RETURN
           0949                         ;}
           0950                         ;
           0951                         ;#define checkRF_address 0x38b2
           0952                         ;#pragma origin checkRF_address
     0000  0953         ORG 0x38B2
           0954                         ;bit checkRF(uns8 level @ W)
           0955                         ;{
           0956 checkRF
           0957                         ;  #asm
           0958                         ;    DW 0x2000
38B2 2000  0959         DW    0x2000
           0960                         ;  #endasm
           0961                         ;  #pragma updateBank exit=UserBank_01
           0962                         ;  return Carry;
38B3 0008  0963         RETURN
           0964                         ;}
           0965                         ;
           0966                         ;#define amIBonded_address   0x38b8
           0967                         ;#pragma origin amIBonded_address
     0000  0968         ORG 0x38B8
           0969                         ;bit amIBonded()
           0970                         ;{
           0971 amIBonded
           0972                         ;  #asm
           0973                         ;    DW 0x2000
38B8 2000  0974         DW    0x2000
           0975                         ;  #endasm
           0976                         ;  #pragma updateBank exit=UserBank_01
           0977                         ;  return Carry;
38B9 0008  0978         RETURN
           0979                         ;}
           0980                         ;
           0981                         ;#define removeBond_address  0x38bb
           0982                         ;#pragma origin removeBond_address
     0000  0983         ORG 0x38BB
           0984                         ;void removeBond()
           0985                         ;{
           0986 removeBond
           0987                         ;  #asm
           0988                         ;    DW 0x2000
38BB 2000  0989         DW    0x2000
           0990                         ;  #endasm
           0991                         ;  #pragma updateBank exit=UserBank_01
           0992                         ;}
38BC 0008  0993         RETURN
           0994                         ;
           0995                         ;#define bondNewNode_address 0x38be
           0996                         ;#pragma origin bondNewNode_address
     0000  0997         ORG 0x38BE
           0998                         ;bit bondNewNode(uns8 address @ W)
           0999                         ;{
           1000 bondNewNode
           1001                         ;  #asm
           1002                         ;    DW 0x2000
38BE 2000  1003         DW    0x2000
           1004                         ;  #endasm
           1005                         ;  #pragma updateBank exit=UserBank_01
           1006                         ;  return Carry;
38BF 0008  1007         RETURN
           1008                         ;}
           1009                         ;
           1010                         ;#define isBondedNode_address    0x38c1
           1011                         ;#pragma origin isBondedNode_address
     0000  1012         ORG 0x38C1
           1013                         ;bit isBondedNode(uns8 address @ W)
           1014                         ;{
           1015 isBondedNode
           1016                         ;  #asm
           1017                         ;    DW 0x2000
38C1 2000  1018         DW    0x2000
           1019                         ;  #endasm
           1020                         ;  #pragma updateBank exit=UserBank_01
           1021                         ;  return Carry;
38C2 0008  1022         RETURN
           1023                         ;}
           1024                         ;
           1025                         ;#define removeBondedNode_address    0x38c4
           1026                         ;#pragma origin removeBondedNode_address
     0000  1027         ORG 0x38C4
           1028                         ;void removeBondedNode(uns8 address @ W)
           1029                         ;{
           1030 removeBondedNode
           1031                         ;  #asm
           1032                         ;    DW 0x2000
38C4 2000  1033         DW    0x2000
           1034                         ;  #endasm
           1035                         ;  #pragma updateBank exit=UserBank_01
           1036                         ;}
38C5 0008  1037         RETURN
           1038                         ;
           1039                         ;#define rebondNode_address  0x38c7
           1040                         ;#pragma origin rebondNode_address
     0000  1041         ORG 0x38C7
           1042                         ;bit rebondNode(uns8 address @ W)
           1043                         ;{
           1044 rebondNode
           1045                         ;  #asm
           1046                         ;    DW 0x2000
38C7 2000  1047         DW    0x2000
           1048                         ;  #endasm
           1049                         ;  #pragma updateBank exit=UserBank_01
           1050                         ;  return Carry;
38C8 0008  1051         RETURN
           1052                         ;}
           1053                         ;
           1054                         ;#define clearAllBonds_address   0x38ca
           1055                         ;#pragma origin clearAllBonds_address
     0000  1056         ORG 0x38CA
           1057                         ;void clearAllBonds()
           1058                         ;{
           1059 clearAllBonds
           1060                         ;  #asm
           1061                         ;    DW 0x2000
38CA 2000  1062         DW    0x2000
           1063                         ;  #endasm
           1064                         ;  #pragma updateBank exit=UserBank_01
           1065                         ;}
38CB 0008  1066         RETURN
           1067                         ;
           1068                         ;#define setNonetMode_address    0x38cd
           1069                         ;#pragma origin setNonetMode_address
     0000  1070         ORG 0x38CD
           1071                         ;void setNonetMode()
           1072                         ;{
           1073 setNonetMode
           1074                         ;  #asm
           1075                         ;    DW 0x2000
38CD 2000  1076         DW    0x2000
           1077                         ;  #endasm
           1078                         ;  #pragma updateBank exit=UserBank_01
           1079                         ;}
38CE 0008  1080         RETURN
           1081                         ;
           1082                         ;#define setCoordinatorMode_address  0x38d0
           1083                         ;#pragma origin setCoordinatorMode_address
     0000  1084         ORG 0x38D0
           1085                         ;void setCoordinatorMode()
           1086                         ;{
           1087 setCoordinatorMode
           1088                         ;  #asm
           1089                         ;    DW 0x2000
38D0 2000  1090         DW    0x2000
           1091                         ;  #endasm
           1092                         ;  #pragma updateBank exit=UserBank_01
           1093                         ;}
38D1 0008  1094         RETURN
           1095                         ;
           1096                         ;#define setNodeMode_address 0x38d3
           1097                         ;#pragma origin setNodeMode_address
     0000  1098         ORG 0x38D3
           1099                         ;void setNodeMode()
           1100                         ;{
           1101 setNodeMode
           1102                         ;  #asm
           1103                         ;    DW 0x2000
38D3 2000  1104         DW    0x2000
           1105                         ;  #endasm
           1106                         ;  #pragma updateBank exit=UserBank_01
           1107                         ;}
38D4 0008  1108         RETURN
           1109                         ;
           1110                         ;#define setNetworkFilteringOn_address   0x38d6
           1111                         ;#pragma origin setNetworkFilteringOn_address
     0000  1112         ORG 0x38D6
           1113                         ;void setNetworkFilteringOn()
           1114                         ;{
           1115 setNetworkFilteringOn
           1116                         ;  #asm
           1117                         ;    DW 0x2000
38D6 2000  1118         DW    0x2000
           1119                         ;  #endasm
           1120                         ;  #pragma updateBank exit=UserBank_01
           1121                         ;}
38D7 0008  1122         RETURN
           1123                         ;
           1124                         ;#define setNetworkFilteringOff_address  0x38d9
           1125                         ;#pragma origin setNetworkFilteringOff_address
     0000  1126         ORG 0x38D9
           1127                         ;void setNetworkFilteringOff()
           1128                         ;{
           1129 setNetworkFilteringOff
           1130                         ;  #asm
           1131                         ;    DW 0x2000
38D9 2000  1132         DW    0x2000
           1133                         ;  #endasm
           1134                         ;  #pragma updateBank exit=UserBank_01
           1135                         ;}
38DA 0008  1136         RETURN
           1137                         ;
           1138                         ;#define getNetworkParams_address    0x38dc
           1139                         ;#pragma origin getNetworkParams_address
     0000  1140         ORG 0x38DC
           1141                         ;uns8 getNetworkParams()
           1142                         ;{
           1143 getNetworkParams
           1144                         ;  #asm
           1145                         ;    DW 0x2000
38DC 2000  1146         DW    0x2000
           1147                         ;  #endasm
           1148                         ;  #pragma updateBank exit=UserBank_01
           1149                         ;  return W;
38DD 0008  1150         RETURN
           1151                         ;}
           1152                         ;
           1153                         ;#define setRoutingOn_address    0x38df
           1154                         ;#pragma origin setRoutingOn_address
     0000  1155         ORG 0x38DF
           1156                         ;void setRoutingOn()
           1157                         ;{
           1158 setRoutingOn
           1159                         ;  #asm
           1160                         ;    DW 0x2000
38DF 2000  1161         DW    0x2000
           1162                         ;  #endasm
           1163                         ;  #pragma updateBank exit=UserBank_01
           1164                         ;}
38E0 0008  1165         RETURN
           1166                         ;
           1167                         ;#define setRoutingOff_address   0x38e2
           1168                         ;#pragma origin setRoutingOff_address
     0000  1169         ORG 0x38E2
           1170                         ;void setRoutingOff()
           1171                         ;{
           1172 setRoutingOff
           1173                         ;  #asm
           1174                         ;    DW 0x2000
38E2 2000  1175         DW    0x2000
           1176                         ;  #endasm
           1177                         ;  #pragma updateBank exit=UserBank_01
           1178                         ;}
38E3 0008  1179         RETURN
           1180                         ;
           1181                         ;#define answerSystemPacket_address  0x38e8
           1182                         ;#pragma origin answerSystemPacket_address
     0000  1183         ORG 0x38E8
           1184                         ;void answerSystemPacket()
           1185                         ;{
           1186 answerSystemPacket
           1187                         ;  #asm
           1188                         ;    DW 0x2000
38E8 2000  1189         DW    0x2000
           1190                         ;  #endasm
           1191                         ;  #pragma updateBank exit=UserBank_01
           1192                         ;}
38E9 0008  1193         RETURN
           1194                         ;
           1195                         ;#define discovery_address   0x38eb
           1196                         ;#pragma origin discovery_address
     0000  1197         ORG 0x38EB
           1198                         ;uns8 discovery(uns8 MaxNodeAddress @ W)
           1199                         ;{
           1200 discovery
           1201                         ;  #asm
           1202                         ;    DW 0x2000
38EB 2000  1203         DW    0x2000
           1204                         ;  #endasm
           1205                         ;  #pragma updateBank exit=UserBank_01
           1206                         ;  return W;
38EC 0008  1207         RETURN
           1208                         ;}
           1209                         ;
           1210                         ;#define wasRouted_address   0x38ee
           1211                         ;#pragma origin wasRouted_address
     0000  1212         ORG 0x38EE
           1213                         ;bit wasRouted()
           1214                         ;{
           1215 wasRouted
           1216                         ;  #asm
           1217                         ;    DW 0x2000
38EE 2000  1218         DW    0x2000
           1219                         ;  #endasm
           1220                         ;  #pragma updateBank exit=UserBank_01
           1221                         ;  return Carry;
38EF 0008  1222         RETURN
           1223                         ;}
           1224                         ;
           1225                         ;#define optimizeHops_address    0x38f1
           1226                         ;#pragma origin optimizeHops_address
     0000  1227         ORG 0x38F1
           1228                         ;bit optimizeHops(uns8 method @ W)
           1229                         ;{
           1230 optimizeHops
           1231                         ;  #asm
           1232                         ;    DW 0x2000
38F1 2000  1233         DW    0x2000
           1234                         ;  #endasm
           1235                         ;  #pragma updateBank exit=UserBank_01
           1236                         ;  return Carry;
38F2 0008  1237         RETURN
           1238                         ;}
           1239                         ;
           1240                         ;#define getSupplyVoltage_address    0x38f4
           1241                         ;#pragma origin getSupplyVoltage_address
     0000  1242         ORG 0x38F4
           1243                         ;uns8 getSupplyVoltage()
           1244                         ;{
           1245 getSupplyVoltage
           1246                         ;  #asm
           1247                         ;    DW 0x2000
38F4 2000  1248         DW    0x2000
           1249                         ;  #endasm
           1250                         ;  #pragma updateBank exit=UserBank_01
           1251                         ;  return W;
38F5 0008  1252         RETURN
           1253                         ;}
           1254                         ;
           1255                         ;#define getTemperature_address  0x38f7
           1256                         ;#pragma origin getTemperature_address
     0000  1257         ORG 0x38F7
           1258                         ;int8 getTemperature()
           1259                         ;{
           1260 getTemperature
           1261                         ;  #asm
           1262                         ;    DW 0x2000
38F7 2000  1263         DW    0x2000
           1264                         ;  #endasm
           1265                         ;  #pragma updateBank exit=UserBank_01
           1266                         ;  return W;
38F8 0008  1267         RETURN
           1268                         ;}
           1269                         ;
           1270                         ;#define clearBufferRF_address   0x38fa
           1271                         ;#pragma origin clearBufferRF_address
     0000  1272         ORG 0x38FA
           1273                         ;void clearBufferRF()
           1274                         ;{
           1275 clearBufferRF
           1276                         ;  #asm
           1277                         ;    DW 0x2000
38FA 2000  1278         DW    0x2000
           1279                         ;  #endasm
           1280                         ;  #pragma updateBank exit=UserBank_01
           1281                         ;}
38FB 0008  1282         RETURN
           1283                         ;
           1284                         ;#define isDiscoveredNode_address    0x3910
           1285                         ;#pragma origin isDiscoveredNode_address
     0000  1286         ORG 0x3910
           1287                         ;bit isDiscoveredNode(uns8 address @ W)
           1288                         ;{
           1289 isDiscoveredNode
           1290                         ;  #asm
           1291                         ;    DW 0x2000
3910 2000  1292         DW    0x2000
           1293                         ;  #endasm
           1294                         ;  #pragma updateBank exit=UserBank_01
           1295                         ;  return Carry;
3911 0008  1296         RETURN
           1297                         ;}
           1298                         ;
           1299                         ;#define enableRFPGM_address 0x3913
           1300                         ;#pragma origin enableRFPGM_address
     0000  1301         ORG 0x3913
           1302                         ;void enableRFPGM()
           1303                         ;{
           1304 enableRFPGM
           1305                         ;  #asm
           1306                         ;    DW 0x2000
3913 2000  1307         DW    0x2000
           1308                         ;  #endasm
           1309                         ;  #pragma updateBank exit=UserBank_01
           1310                         ;}
3914 0008  1311         RETURN
           1312                         ;
           1313                         ;#define disableRFPGM_address    0x3916
           1314                         ;#pragma origin disableRFPGM_address
     0000  1315         ORG 0x3916
           1316                         ;void disableRFPGM()
           1317                         ;{
           1318 disableRFPGM
           1319                         ;  #asm
           1320                         ;    DW 0x2000
3916 2000  1321         DW    0x2000
           1322                         ;  #endasm
           1323                         ;  #pragma updateBank exit=UserBank_01
           1324                         ;}
3917 0008  1325         RETURN
           1326                         ;
           1327                         ;#define setupRFPGM_address  0x3919
           1328                         ;#pragma origin setupRFPGM_address
     0000  1329         ORG 0x3919
           1330                         ;void setupRFPGM(uns8 x @ W)
           1331                         ;{
           1332 setupRFPGM
           1333                         ;  #asm
           1334                         ;    DW 0x2000
3919 2000  1335         DW    0x2000
           1336                         ;  #endasm
           1337                         ;  #pragma updateBank exit=UserBank_01
           1338                         ;}
391A 0008  1339         RETURN
           1340                         ;
           1341                         ;#define runRFPGM_address    0x391c
           1342                         ;#pragma origin runRFPGM_address
     0000  1343         ORG 0x391C
           1344                         ;void runRFPGM()
           1345                         ;{
           1346 runRFPGM
           1347                         ;  #asm
           1348                         ;    DW 0x2000
391C 2000  1349         DW    0x2000
           1350                         ;  #endasm
           1351                         ;  #pragma updateBank exit=UserBank_01
           1352                         ;}
391D 0008  1353         RETURN
           1354                         ;
           1355                         ;#define iqrfDeepSleep_address   0x391f
           1356                         ;#pragma origin iqrfDeepSleep_address
     0000  1357         ORG 0x391F
           1358                         ;void iqrfDeepSleep()
           1359                         ;{
           1360 iqrfDeepSleep
           1361                         ;  #asm
           1362                         ;    DW 0x2000
391F 2000  1363         DW    0x2000
           1364                         ;  #endasm
           1365                         ;  #pragma updateBank exit=UserBank_01
           1366                         ;}
3920 0008  1367         RETURN
           1368                         ;
           1369                         ;#define wasRFICrestarted_address    0x3922
           1370                         ;#pragma origin wasRFICrestarted_address
     0000  1371         ORG 0x3922
           1372                         ;#if !defined( TR7xD )
           1373                         ;    bit wasRFICrestarted()
           1374                         ;    {
           1375 wasRFICrestarted
           1376                         ;      #asm
           1377                         ;        DW 0x2000
3922 2000  1378         DW    0x2000
           1379                         ;      #endasm
           1380                         ;      #pragma updateBank exit=UserBank_01
           1381                         ;      return Carry;
3923 0008  1382         RETURN
           1383                         ;    }
           1384                         ;#else
           1385                         ;    uns8 wasRFICrestarted()
           1386                         ;    {
           1387                         ;      #asm
           1388                         ;        DW 0x2000
           1389                         ;      #endasm
           1390                         ;      #pragma updateBank exit=UserBank_01
           1391                         ;      return W;
           1392                         ;    }
           1393                         ;#endif
           1394                         ;
           1395                         ;#define eeeWriteData_address    0x3925
           1396                         ;#pragma origin eeeWriteData_address
     0000  1397         ORG 0x3925
           1398                         ;bit eeeWriteData(uns16 address @ param3)
           1399                         ;{
           1400 eeeWriteData
           1401                         ;  #asm
           1402                         ;    DW 0x2000
3925 2000  1403         DW    0x2000
           1404                         ;  #endasm
           1405                         ;  #pragma updateBank exit=UserBank_01
           1406                         ;  return Carry;
3926 0008  1407         RETURN
           1408                         ;}
           1409                         ;
           1410                         ;#define eeeReadData_address 0x3928
           1411                         ;#pragma origin eeeReadData_address
     0000  1412         ORG 0x3928
           1413                         ;bit eeeReadData(uns16 address @ param3)
           1414                         ;{
           1415 eeeReadData
           1416                         ;  #asm
           1417                         ;    DW 0x2000
3928 2000  1418         DW    0x2000
           1419                         ;  #endasm
           1420                         ;  #pragma updateBank exit=UserBank_01
           1421                         ;  return Carry;
3929 0008  1422         RETURN
           1423                         ;}
           1424                         ;
           1425                         ;#define setINDF0_address    0x3931
           1426                         ;#pragma origin setINDF0_address
     0000  1427         ORG 0x3931
           1428                         ;void setINDF0(uns8 value @ W)
           1429                         ;{
           1430 setINDF0
           1431                         ;  #asm
           1432                         ;    DW 0x2000
3931 2000  1433         DW    0x2000
           1434                         ;  #endasm
           1435                         ;  #pragma updateBank exit=UserBank_01
           1436                         ;}
3932 0008  1437         RETURN
           1438                         ;
           1439                         ;#define setINDF1_address    0x3934
           1440                         ;#pragma origin setINDF1_address
     0000  1441         ORG 0x3934
           1442                         ;void setINDF1(uns8 value @ W)
           1443                         ;{
           1444 setINDF1
           1445                         ;  #asm
           1446                         ;    DW 0x2000
3934 2000  1447         DW    0x2000
           1448                         ;  #endasm
           1449                         ;  #pragma updateBank exit=UserBank_01
           1450                         ;}
3935 0008  1451         RETURN
           1452                         ;
           1453                         ;#define getRSSI_address 0x3937
           1454                         ;#pragma origin getRSSI_address
     0000  1455         ORG 0x3937
           1456                         ;uns8 getRSSI()
           1457                         ;{
           1458 getRSSI
           1459                         ;  #asm
           1460                         ;    DW 0x2000
3937 2000  1461         DW    0x2000
           1462                         ;  #endasm
           1463                         ;  #pragma updateBank exit=UserBank_01
           1464                         ;  return W;
3938 0008  1465         RETURN
           1466                         ;}
           1467                         ;
           1468                         ;#define removeBondAddress_address   0x393a
           1469                         ;#pragma origin removeBondAddress_address
     0000  1470         ORG 0x393A
           1471                         ;void removeBondAddress()
           1472                         ;{
           1473 removeBondAddress
           1474                         ;  #asm
           1475                         ;    DW 0x2000
393A 2000  1476         DW    0x2000
           1477                         ;  #endasm
           1478                         ;  #pragma updateBank exit=UserBank_01
           1479                         ;}
393B 0008  1480         RETURN
           1481                         ;
           1482                         ;#define sendFRC_address 0x393d
           1483                         ;#pragma origin sendFRC_address
     0000  1484         ORG 0x393D
           1485                         ;uns8 sendFRC(uns8 command @ W)
           1486                         ;{
           1487 sendFRC
           1488                         ;  #asm
           1489                         ;    DW 0x2000
393D 2000  1490         DW    0x2000
           1491                         ;  #endasm
           1492                         ;  #pragma updateBank exit=UserBank_01
           1493                         ;  return W;
393E 0008  1494         RETURN
           1495                         ;}
           1496                         ;
           1497                         ;#define responseFRC_address 0x3940
           1498                         ;#pragma origin responseFRC_address
     0000  1499         ORG 0x3940
           1500                         ;void responseFRC()
           1501                         ;{
           1502 responseFRC
           1503                         ;  #asm
           1504                         ;    DW 0x2000
3940 2000  1505         DW    0x2000
           1506                         ;  #endasm
           1507                         ;  #pragma updateBank exit=UserBank_01
           1508                         ;}
3941 0008  1509         RETURN
           1510                         ;
           1511                         ;#define bondRequestAdvanced_address 0x3943
           1512                         ;#pragma origin bondRequestAdvanced_address
     0000  1513         ORG 0x3943
           1514                         ;bit bondRequestAdvanced()
           1515                         ;{
           1516 bondRequestAdvanced
           1517                         ;  #asm
           1518                         ;    DW 0x2000
3943 2000  1519         DW    0x2000
           1520                         ;  #endasm
           1521                         ;  #pragma updateBank exit=UserBank_01
           1522                         ;  return Carry;
3944 0008  1523         RETURN
           1524                         ;}
           1525                         ;
           1526                         ;#define prebondNodeAtNode_address   0x3946
           1527                         ;#pragma origin prebondNodeAtNode_address
     0000  1528         ORG 0x3946
           1529                         ;bit prebondNodeAtNode()
           1530                         ;{
           1531 prebondNodeAtNode
           1532                         ;  #asm
           1533                         ;    DW 0x2000
3946 2000  1534         DW    0x2000
           1535                         ;  #endasm
           1536                         ;  #pragma updateBank exit=UserBank_01
           1537                         ;  return Carry;
3947 0008  1538         RETURN
           1539                         ;}
           1540                         ;
           1541                         ;#define nodeAuthorization_address   0x3949
           1542                         ;#pragma origin nodeAuthorization_address
     0000  1543         ORG 0x3949
           1544                         ;bit nodeAuthorization(uns8 address @ W)
           1545                         ;{
           1546 nodeAuthorization
           1547                         ;  #asm
           1548                         ;    DW 0x2000
3949 2000  1549         DW    0x2000
           1550                         ;  #endasm
           1551                         ;  #pragma updateBank exit=UserBank_01
           1552                         ;  return Carry;
394A 0008  1553         RETURN
           1554                         ;}
           1555                         ;
           1556                         ;#define dummy01_address 0x394c
           1557                         ;#pragma origin dummy01_address
     0000  1558         ORG 0x394C
           1559                         ;void dummy01()
           1560                         ;{
           1561 dummy01
           1562                         ;  #asm
           1563                         ;  DW 0x2000
394C 2000  1564         DW    0x2000
           1565                         ;  #endasm
           1566                         ;  #pragma updateBank exit=UserBank_01
           1567                         ;}
394D 0008  1568         RETURN
           1569                         ;
           1570                         ;#define setAccessPassword_address   0x3958
           1571                         ;#pragma origin setAccessPassword_address
     0000  1572         ORG 0x3958
           1573                         ;void setAccessPassword()
           1574                         ;{
           1575 setAccessPassword
           1576                         ;  #asm
           1577                         ;    DW 0x2000
3958 2000  1578         DW    0x2000
           1579                         ;  #endasm
           1580                         ;  #pragma updateBank exit=UserBank_01
           1581                         ;}
3959 0008  1582         RETURN
           1583                         ;
           1584                         ;#define setUserKey_address  0x395b
           1585                         ;#pragma origin setUserKey_address
     0000  1586         ORG 0x395B
           1587                         ;void setUserKey()
           1588                         ;{
           1589 setUserKey
           1590                         ;  #asm
           1591                         ;    DW 0x2000
395B 2000  1592         DW    0x2000
           1593                         ;  #endasm
           1594                         ;  #pragma updateBank exit=UserBank_01
           1595                         ;}
395C 0008  1596         RETURN
           1597                         ;
           1598                         ;#define amIRecipientOfFRC_address   0x3961
           1599                         ;#pragma origin amIRecipientOfFRC_address
     0000  1600         ORG 0x3961
           1601                         ;bit amIRecipientOfFRC()
           1602                         ;{
           1603 amIRecipientOfFRC
           1604                         ;  #asm
           1605                         ;    DW 0x2000
3961 2000  1606         DW    0x2000
           1607                         ;  #endasm
           1608                         ;  #pragma updateBank exit=UserBank_01
           1609                         ;  return Carry;
3962 0008  1610         RETURN
           1611                         ;}
           1612                         ;
           1613                         ;#define setLEDR_address 0x3964
           1614                         ;#pragma origin setLEDR_address
     0000  1615         ORG 0x3964
           1616                         ;void setLEDR()
           1617                         ;{
           1618 setLEDR
           1619                         ;  #asm
           1620                         ;    DW 0x2000
3964 2000  1621         DW    0x2000
           1622                         ;  #endasm
           1623                         ;  #pragma updateBank exit=UserBank_01
           1624                         ;}
3965 0008  1625         RETURN
           1626                         ;
           1627                         ;#define encryptBufferRF_address 0x3967
           1628                         ;#pragma origin encryptBufferRF_address
     0000  1629         ORG 0x3967
           1630                         ;void encryptBufferRF(uns8 blocks @ W)
           1631                         ;{
           1632 encryptBufferRF
           1633                         ;  #asm
           1634                         ;    DW 0x2000
3967 2000  1635         DW    0x2000
           1636                         ;  #endasm
           1637                         ;  #pragma updateBank exit=UserBank_01
           1638                         ;}
3968 0008  1639         RETURN
           1640                         ;
           1641                         ;#define decryptBufferRF_address 0x396a
           1642                         ;#pragma origin decryptBufferRF_address
     0000  1643         ORG 0x396A
           1644                         ;void decryptBufferRF(uns8 blocks @ W)
           1645                         ;{
           1646 decryptBufferRF
           1647                         ;  #asm
           1648                         ;    DW 0x2000
396A 2000  1649         DW    0x2000
           1650                         ;  #endasm
           1651                         ;  #pragma updateBank exit=UserBank_01
           1652                         ;}
396B 0008  1653         RETURN
           1654                         ;
           1655                         ;#define prebondNodeAtCoordinator_address    0x396d
           1656                         ;#pragma origin prebondNodeAtCoordinator_address
     0000  1657         ORG 0x396D
           1658                         ;bit prebondNodeAtCoordinator(uns8 address @ W)
           1659                         ;{
           1660 prebondNodeAtCoordinator
           1661                         ;  #asm
           1662                         ;    DW 0x2000
396D 2000  1663         DW    0x2000
           1664                         ;  #endasm
           1665                         ;  #pragma updateBank exit=UserBank_01
           1666                         ;  return Carry;
396E 0008  1667         RETURN
           1668                         ;}
           1669                         ;
           1670                         ;#define setFSRs_address 0x3970
           1671                         ;#pragma origin setFSRs_address
     0000  1672         ORG 0x3970
           1673                         ;uns8 setFSRs(uns8 fsrs @ W)
           1674                         ;{
           1675 setFSRs
           1676                         ;  #asm
           1677                         ;    DW 0x2000
3970 2000  1678         DW    0x2000
           1679                         ;  #endasm
           1680                         ;  #pragma updateBank exit=UserBank_01
           1681                         ;  return W;
3971 0008  1682         RETURN
           1683                         ;}
           1684                         ;
           1685                         ;// For internal usage only
           1686                         ;#define updateCRC16_address 0x3973
           1687                         ;#pragma origin updateCRC16_address
     0000  1688         ORG 0x3973
           1689                         ;void updateCRC16(uns8 value @ W)
           1690                         ;{
           1691 updateCRC16
           1692                         ;  #asm
           1693                         ;    DW 0x2000
3973 2000  1694         DW    0x2000
           1695                         ;  #endasm
           1696                         ;  #pragma updateBank exit=UserBank_01
           1697                         ;}
3974 0008  1698         RETURN
           1699                         ;
           1700                         ;#define smartConnect_address    0x3976
           1701                         ;#pragma origin smartConnect_address
     0000  1702         ORG 0x3976
           1703                         ;bit smartConnect(uns8 address @ W)
           1704                         ;{
           1705 smartConnect
           1706                         ;  #asm
           1707                         ;    DW 0x2000
3976 2000  1708         DW    0x2000
           1709                         ;  #endasm
           1710                         ;  #pragma updateBank exit=UserBank_01
           1711                         ;  return Carry;
3977 0008  1712         RETURN
           1713                         ;}
           1714                         ;
           1715                         ;#define addressBitmap_address   0x3979
           1716                         ;#pragma origin addressBitmap_address
     0000  1717         ORG 0x3979
           1718                         ;uns8 addressBitmap(uns8 bitIndex @ W)
           1719                         ;{
           1720 addressBitmap
           1721                         ;  #asm
           1722                         ;    DW 0x2000
3979 2000  1723         DW    0x2000
           1724                         ;  #endasm
           1725                         ;  #pragma updateBank exit=UserBank_01
           1726                         ;  return W;
397A 0008  1727         RETURN
           1728                         ;}
           1729                         ;
           1730                         ;#define setServiceChannel_address   0x397c
           1731                         ;#pragma origin setServiceChannel_address
     0000  1732         ORG 0x397C
           1733                         ;bit setServiceChannel(uns8 channelNumber @ W)
           1734                         ;{
           1735 setServiceChannel
           1736                         ;  #asm
           1737                         ;    DW 0x2000
397C 2000  1738         DW    0x2000
           1739                         ;  #endasm
           1740                         ;  #pragma updateBank exit=UserBank_01
           1741                         ;  return Carry;
397D 0008  1742         RETURN
           1743                         ;}
           1744                         ;
           1745                         ;#pragma optimize 1
           1746                         ;#pragma update_RP 1
           1747                         ;#pragma update_PAGE 1
           1748                         ;#pragma origin __APPLICATION_ADDRESS
     0000  1749         ORG 0x3A00
           1750 
           1751   ; FILE C:\customdpa\DPA.h
           1752                         ;// *********************************************************************
           1753                         ;//   General public DPA header file                                    *
           1754                         ;// *********************************************************************
           1755                         ;// Copyright (c) MICRORISC s.r.o.
           1756                         ;//
           1757                         ;// File:    $RCSfile: DPA.h,v $
           1758                         ;// Version: $Revision: 1.329 $
           1759                         ;// Date:    $Date: 2024/12/05 09:28:57 $
           1760                         ;//
           1761                         ;// Revision history:
           1762                         ;//   2024/11/05  Release for DPA 4.32
           1763                         ;//   2024/04/17  Release for DPA 4.31
           1764                         ;//   2023/03/07  Release for DPA 4.30
           1765                         ;//   2022/10/05  Release for DPA 4.18
           1766                         ;//   2022/02/24  Release for DPA 4.17
           1767                         ;//   2021/08/20  Release for DPA 4.16
           1768                         ;//   2020/09/03  Release for DPA 4.15
           1769                         ;//   2020/04/03  Release for DPA 4.14
           1770                         ;//   2020/02/27  Release for DPA 4.13
           1771                         ;//   2020/01/09  Release for DPA 4.12
           1772                         ;//   2019/12/11  Release for DPA 4.11
           1773                         ;//   2019/10/09  Release for DPA 4.10
           1774                         ;//   2019/06/12  Release for DPA 4.03
           1775                         ;//   2019/06/03  Release for DPA 4.02
           1776                         ;//   2019/03/07  Release for DPA 4.01
           1777                         ;//   2019/01/10  Release for DPA 4.00
           1778                         ;//   2018/10/25  Release for DPA 3.03
           1779                         ;//   2017/11/16  Release for DPA 3.02
           1780                         ;//   2017/08/14  Release for DPA 3.01
           1781                         ;//   2017/03/13  Release for DPA 3.00
           1782                         ;//   2016/09/12  Release for DPA 2.28
           1783                         ;//   2016/04/14  Release for DPA 2.27
           1784                         ;//   2016/03/03  Release for DPA 2.26
           1785                         ;//   2016/01/21  Release for DPA 2.25
           1786                         ;//   2015/12/01  Release for DPA 2.24
           1787                         ;//   2015/10/23  Release for DPA 2.23
           1788                         ;//   2015/09/25  Release for DPA 2.22
           1789                         ;//   2015/09/03  Release for DPA 2.21
           1790                         ;//   2015/08/05  Release for DPA 2.20
           1791                         ;//   2014/10/31  Release for DPA 2.10
           1792                         ;//   2014/04/30  Release for DPA 2.00
           1793                         ;//   2013/10/03  Release for DPA 1.00
           1794                         ;//
           1795                         ;// *********************************************************************
           1796                         ;
           1797                         ;// Online DPA documentation https://doc.iqrf.org/DpaTechGuide/
           1798                         ;// IQRF Standards documentation https://doc.iqrf.org/
           1799                         ;
           1800                         ;#ifndef _DPA_HEADER_
           1801                         ;#define _DPA_HEADER_
           1802                         ;
           1803                         ;//############################################################################################
           1804                         ;
           1805                         ;// DPA version
           1806                         ;#define DPA_VERSION_MASTER          0x0432
           1807                         ;
           1808                         ;#if defined( __CC5X__ ) && !defined( CC5XnotDPA )
           1809                         ;// Compiled only at CC5X
           1810                         ;#if __CC5X__ < 3800
           1811                         ;#error Insufficient CC5X compiler version, V3.8 is minimum
           1812                         ;#endif
           1813                         ;
           1814                         ;#if IQRFOS < 406
           1815                         ;#error IQRF OS 4.06+ is required
           1816                         ;#endif
           1817                         ;
           1818                         ;// Bank for custom variables
           1819                         ;#pragma rambank = UserBank_01
           1820                         ;
           1821                         ;// Main DPA API entry address (also start of the licensed FLASH)
           1822                         ;#define DPA_API_ADDRESS             __LICENSED_FLASH
           1823                         ;
           1824                         ;// Main DPA entry address
           1825                         ;#define MAIN_DPA_ADDRESS            ( DPA_API_ADDRESS + 4 )
           1826                         ;
           1827                         ;// Main DPA API entry address stub
           1828                         ;#define DPA_API_ADDRESS_ENTRY       0x3A08
           1829                         ;
           1830                         ;// Address of the DPA Custom Handler
           1831                         ;#define CUSTOM_HANDLER_ADDRESS      0x3A20
           1832                         ;
           1833                         ;// Address of the DPA Custom Handler end + 1
           1834                         ;#if defined TR7xD
           1835                         ;#define CUSTOM_HANDLER_ADDRESS_END  0x3D80
           1836                         ;#else
           1837                         ;#define CUSTOM_HANDLER_ADDRESS_END  __USER_INTERRUPT
           1838                         ;#endif
           1839                         ;
           1840                         ;// DPA API entry function
           1841                         ;uns8  DpaApiEntry( uns8 par1, uns8 par2, uns8 apiIndex );
           1842                         ;
           1843                         ;// DPA API codes
           1844                         ;#define DPA_API_RFTX_DPAPACKET              0
           1845                         ;#define DPA_API_READ_CONFIG_BYTE            1
           1846                         ;#define DPA_API_SEND_TO_IFACEMASTER         2
           1847                         ;#define DPA_API_COORDINATOR_RFTX_DPAPACKET  3
           1848                         ;#define DPA_API_LOCAL_REQUEST               4
           1849                         ;#define DPA_API_SET_PERIPHERAL_ERROR        5
           1850                         ;#define DPA_API_SET_RF_DEFAULTS             6
           1851                         ;#define DPA_API_LOCAL_FRC                   7
           1852                         ;#define DPA_API_CRC8                        8
           1853                         ;#define DPA_API_AGGREGATE_FRC               9
           1854                         ;#define DPA_API_SET_OTK                     10
           1855                         ;#define DPA_API_I2C_INIT                    11
           1856                         ;#define DPA_API_I2C_START                   12
           1857                         ;#define DPA_API_I2C_WRITE                   13
           1858                         ;#define DPA_API_I2C_READ                    14
           1859                         ;#define DPA_API_I2C_STOP                    15
           1860                         ;#define DPA_API_I2C_WAIT_FOR_ACK            16
           1861                         ;#define DPA_API_I2C_SHUTDOWN                17
           1862                         ;#define DPA_API_I2C_WAIT_FOR_IDLE           18
           1863                         ;#define DPA_API_SLEEP                       19
           1864                         ;#define DPA_API_AFTER_SLEEP                 20
           1865                         ;#define DPA_API_RANDOM                      21
           1866                         ;#if !defined( TR7xD )
           1867                         ;#define DPA_API_MENU                        22
           1868                         ;#define DPA_API_MENU_INDICATE_RESULT        23
           1869                         ;#define DPA_API_MENU_EXECUTE                24
           1870                         ;#define DPA_API_DEEP_SLEEP                  25
           1871                         ;#endif
           1872                         ;
           1873                         ;// Used buffer size symbols
           1874                         ;#define sizeofBufferRF                      sizeof( bufferRF )
           1875                         ;#define sizeofBufferAUX                     sizeof( bufferAUX )
           1876                         ;#define sizeofBufferCOM                     sizeof( bufferCOM )
           1877                         ;#define sizeofBufferINFO                    sizeof( bufferINFO )
           1878                         ;
           1879                         ;// Converts conventional address to the linear one at PIC16LF1938
           1880                         ;// Note: This is workaround of CC5X preprocessor bug "No '#endif' detected"
           1881                         ;#define error_ #error Address cannot be linearized
           1882                         ;#define LINEARIZE_ADDRESS( a ) \
           1883                         ;#if ( ((uns16)(a)) - ( ((uns16)(a)) / 0x80 ) * 0x80 ) >= 0x20 && ( ((uns16)(a)) - ( ((uns16)(a)) / 0x80 ) * 0x80 ) <= 0x6F && ( ((uns16)(a)) / 0x80 ) <= 12 \
           1884                         ;( ( ( ((uns16)(a)) / 0x80 ) * 0x50 ) + ( ((uns16)(a)) - 0x20 - ( ((uns16)(a)) / 0x80 ) * 0x80 ) + 0x2000 ) \
           1885                         ;#else \
           1886                         ;error_ \
           1887                         ;#endif
           1888                         ;#undef error_
           1889                         ;
           1890                         ;#define STRUCTATTR
           1891                         ;
           1892                         ;#else //__CC5X__
           1893                         ;// Not compiled at CC5X
           1894                         ;
           1895                         ;#if !defined( CC5XnotDPA )
           1896                         ;// Define CC5X types
           1897                         ;typedef int8_t    int8;
           1898                         ;typedef int16_t   int16;
           1899                         ;typedef uint8_t   uns8;
           1900                         ;typedef uint16_t  uns16;
           1901                         ;// Disables alignment of members of structures
           1902                         ;#define STRUCTATTR  __attribute__((packed))
           1903                         ;#else
           1904                         ;#define STRUCTATTR
           1905                         ;#endif
           1906                         ;
           1907                         ;// Fake buffer sizes
           1908                         ;#define sizeofBufferRF    64
           1909                         ;#define sizeofBufferAUX   64
           1910                         ;#define sizeofBufferCOM   64
           1911                         ;#define sizeofBufferINFO  64
           1912                         ;
           1913                         ;#endif  // __CC5X__
           1914                         ;
           1915                         ;// Indexes of configuration bytes used by DpaApiReadConfigByte( index )
           1916                         ;// Checksum
           1917                         ;#define CFGIND_CHECKSUM         0x00
           1918                         ;// Embedded peripherals
           1919                         ;#define CFGIND_DPA_PERIPHERALS  0x01
           1920                         ;// DPA configuration flags #0
           1921                         ;#define CFGIND_DPA_FLAGS0       0x05
           1922                         ;// Main RF channel, used by the subordinate network
           1923                         ;#define CFGIND_CHANNEL_2ND_A    0x06
           1924                         ;// Second RF channel, used by the subordinate network
           1925                         ;#define CFGIND_CHANNEL_2ND_B    0x07
           1926                         ;// TX power
           1927                         ;#define CFGIND_TXPOWER          0x08
           1928                         ;// RX filter used by checkRF()
           1929                         ;#define CFGIND_RXFILTER         0x09
           1930                         ;// toutRF for LP mode
           1931                         ;#define CFGIND_DPA_LP_TOUTRF    0x0A
           1932                         ;// UART interface baud rate
           1933                         ;#define CFGIND_DPA_UART_IFACE_SPEED 0x0B
           1934                         ;// Alternate DSM channel
           1935                         ;#define CFGIND_ALTERNATE_DSM_CHANNEL 0x0C
           1936                         ;// DPA configuration flags #1
           1937                         ;#define CFGIND_DPA_FLAGS1       0x0D
           1938                         ;// Main RF channel
           1939                         ;#define CFGIND_CHANNEL_A        0x11
           1940                         ;// Second RF channel
           1941                         ;#define CFGIND_CHANNEL_B        0x12
           1942                         ;
           1943                         ;// 0: checks only mandatory precondition in order to prevent critical side-effects
           1944                         ;// 1: as above plus checks meaningful parameter conditions
           1945                         ;// 2: full implemented parameter checking (default)
           1946                         ;#ifndef PARAM_CHECK_LEVEL
           1947                         ;#define PARAM_CHECK_LEVEL 2
           1948                         ;#endif
           1949                         ;
           1950                         ;// "foursome" at IFace structure
           1951                         ;typedef struct
           1952                         ;{
           1953                         ;  // Node address low byte
           1954                         ;  uns8  NADRlow;
           1955                         ;  // Node address high byte
           1956                         ;  uns8  NADRhigh;
           1957                         ;  // Peripheral number
           1958                         ;  uns8  PNUM;
           1959                         ;  // Peripheral command
           1960                         ;  uns8  PCMD;
           1961                         ;  // HWPID
           1962                         ;  uns16 HWPID;
           1963                         ;} STRUCTATTR TDpaIFaceHeader;
           1964                         ;
           1965                         ;// Maximum command PCMD value (except reserved 0x3F = CMD_GET_PER_INFO)
           1966                         ;#define PCMD_MAX                    0x7f
           1967                         ;// Bit mask at PCMD that indicates DPA Response message
           1968                         ;#define RESPONSE_FLAG               0x80
           1969                         ;
           1970                         ;// IQMESH coordinator address
           1971                         ;#define COORDINATOR_ADDRESS         0x00
           1972                         ;// IQMESH broadcast address
           1973                         ;#define BROADCAST_ADDRESS           0xff
           1974                         ;// IQMESH temporary address, assigned by pre-bonding before authorization is done
           1975                         ;#define TEMPORARY_ADDRESS           0xfe
           1976                         ;// Address of the local device addressed by IFace
           1977                         ;#define LOCAL_ADDRESS               0xfc
           1978                         ;// Maximum IQMESH network device address
           1979                         ;#define MAX_ADDRESS                 ( 240 - 1 )
           1980                         ;
           1981                         ;// Time slots lengths in 10 ms
           1982                         ;#define MIN_STD_TIMESLOT    4
           1983                         ;#define MAX_STD_TIMESLOT    6
           1984                         ;
           1985                         ;#define MIN_LP_TIMESLOT     8
           1986                         ;#define MAX_LP_TIMESLOT     10
           1987                         ;
           1988                         ;// Maximum number of DPA PData bytes ( minus 8 = 6B foursome + 8b error code + 8b DpaValue )
           1989                         ;#define DPA_MAX_DATA_LENGTH         ( sizeofBufferCOM - sizeof( TDpaIFaceHeader ) - 2 * sizeof( uns8 ) )
           1990                         ;
           1991                         ;// Maximum number of peripherals info that can fit in the message
           1992                         ;#define MAX_PERIPHERALS_PER_BLOCK_INFO  ( DPA_MAX_DATA_LENGTH / sizeof( TPeripheralInfoAnswer ) )
           1993                         ;
           1994                         ;// Embedded peripheral numbers
           1995                         ;#define PNUM_COORDINATOR    0x00
           1996                         ;#define PNUM_NODE           0x01
           1997                         ;#define PNUM_OS             0x02
           1998                         ;#define PNUM_EEPROM         0x03
           1999                         ;#define PNUM_EEEPROM        0x04
           2000                         ;#define PNUM_RAM            0x05
           2001                         ;#define PNUM_LEDR           0x06
           2002                         ;#define PNUM_LEDG           0x07
           2003                         ;#define PNUM_IO             0x09
           2004                         ;#define PNUM_THERMOMETER    0x0A
           2005                         ;#define PNUM_UART           0x0C
           2006                         ;#define PNUM_FRC            0x0D
           2007                         ;
           2008                         ;// Number of the 1st user peripheral
           2009                         ;#define PNUM_USER           0x20
           2010                         ;// Number of the last user peripheral
           2011                         ;#define PNUM_USER_MAX       0x3E
           2012                         ;// Maximum peripheral number
           2013                         ;#define PNUM_MAX            0x7F
           2014                         ;
           2015                         ;// Fake peripheral number used to flag DPA response with error sent by RF
           2016                         ;#define PNUM_ERROR_FLAG     0xFE
           2017                         ;// Special peripheral used for enumeration
           2018                         ;#define PNUM_ENUMERATION    0xFF
           2019                         ;
           2020                         ;// DPA Commands for embedded peripherals
           2021                         ;#define CMD_COORDINATOR_ADDR_INFO  0
           2022                         ;#define CMD_COORDINATOR_DISCOVERED_DEVICES 1
           2023                         ;#define CMD_COORDINATOR_BONDED_DEVICES 2
           2024                         ;#define CMD_COORDINATOR_CLEAR_ALL_BONDS 3
           2025                         ;#define CMD_COORDINATOR_BOND_NODE 4
           2026                         ;#define CMD_COORDINATOR_REMOVE_BOND 5
           2027                         ;#define CMD_COORDINATOR_DISCOVERY 7
           2028                         ;#define CMD_COORDINATOR_SET_DPAPARAMS 8
           2029                         ;#define CMD_COORDINATOR_SET_HOPS 9
           2030                         ;#define CMD_COORDINATOR_BACKUP 11
           2031                         ;#define CMD_COORDINATOR_RESTORE 12
           2032                         ;#define CMD_COORDINATOR_AUTHORIZE_BOND 13
           2033                         ;#define CMD_COORDINATOR_BRIDGE 14
           2034                         ;#define CMD_COORDINATOR_SMART_CONNECT 18
           2035                         ;#define CMD_COORDINATOR_SET_MID 19
           2036                         ;
           2037                         ;#define CMD_NODE_READ 0
           2038                         ;#define CMD_NODE_REMOVE_BOND 1
           2039                         ;#define CMD_NODE_BACKUP 6
           2040                         ;#define CMD_NODE_RESTORE 7
           2041                         ;#define CMD_NODE_VALIDATE_BONDS 8
           2042                         ;
           2043                         ;#define CMD_OS_READ 0
           2044                         ;#define CMD_OS_RESET 1
           2045                         ;#define CMD_OS_READ_CFG 2
           2046                         ;#define CMD_OS_RFPGM 3
           2047                         ;#define CMD_OS_SLEEP 4
           2048                         ;#define CMD_OS_BATCH 5
           2049                         ;#define CMD_OS_SET_SECURITY 6
           2050                         ;#define CMD_OS_INDICATE 7
           2051                         ;#define CMD_OS_RESTART 8
           2052                         ;#define CMD_OS_WRITE_CFG_BYTE 9
           2053                         ;#define CMD_OS_LOAD_CODE 10
           2054                         ;#define CMD_OS_SELECTIVE_BATCH 11
           2055                         ;#define CMD_OS_TEST_RF_SIGNAL 12
           2056                         ;#define CMD_OS_FACTORY_SETTINGS 13
           2057                         ;#define CMD_OS_WRITE_CFG 15
           2058                         ;
           2059                         ;#define CMD_RAM_READ 0
           2060                         ;#define CMD_RAM_WRITE 1
           2061                         ;#define CMD_RAM_READ_ANY    15
           2062                         ;
           2063                         ;#define CMD_EEPROM_READ CMD_RAM_READ
           2064                         ;#define CMD_EEPROM_WRITE CMD_RAM_WRITE
           2065                         ;
           2066                         ;#define CMD_EEEPROM_XREAD ( CMD_RAM_READ + 2 )
           2067                         ;#define CMD_EEEPROM_XWRITE ( CMD_RAM_WRITE + 2 )
           2068                         ;
           2069                         ;#define CMD_LED_SET_OFF 0
           2070                         ;#define CMD_LED_SET_ON 1
           2071                         ;#define CMD_LED_PULSE 3
           2072                         ;#define CMD_LED_FLASHING 4
           2073                         ;
           2074                         ;#define CMD_IO_DIRECTION  0
           2075                         ;#define CMD_IO_SET  1
           2076                         ;#define CMD_IO_GET  2
           2077                         ;
           2078                         ;#define CMD_THERMOMETER_READ 0
           2079                         ;
           2080                         ;#define CMD_UART_OPEN 0
           2081                         ;#define CMD_UART_CLOSE 1
           2082                         ;#define CMD_UART_WRITE_READ 2
           2083                         ;#define CMD_UART_CLEAR_WRITE_READ 3
           2084                         ;
           2085                         ;#define CMD_FRC_SEND 0
           2086                         ;#define CMD_FRC_EXTRARESULT 1
           2087                         ;#define CMD_FRC_SEND_SELECTIVE 2
           2088                         ;#define CMD_FRC_SET_PARAMS 3
           2089                         ;
           2090                         ;#define CMD_GET_PER_INFO  0x3f
           2091                         ;
           2092                         ;// DPA peripheral type
           2093                         ;typedef enum
           2094                         ;{
           2095                         ;  PERIPHERAL_TYPE_DUMMY = 0x00,
           2096                         ;  PERIPHERAL_TYPE_COORDINATOR = 0x01,
           2097                         ;  PERIPHERAL_TYPE_NODE = 0x02,
           2098                         ;  PERIPHERAL_TYPE_OS = 0x03,
           2099                         ;  PERIPHERAL_TYPE_EEPROM = 0x04,
           2100                         ;  PERIPHERAL_TYPE_BLOCK_EEPROM = 0x05,
           2101                         ;  PERIPHERAL_TYPE_RAM = 0x06,
           2102                         ;  PERIPHERAL_TYPE_LED = 0x07,
           2103                         ;  PERIPHERAL_TYPE_SPI = 0x08,
           2104                         ;  PERIPHERAL_TYPE_IO = 0x09,
           2105                         ;  PERIPHERAL_TYPE_UART = 0x0a,
           2106                         ;  PERIPHERAL_TYPE_THERMOMETER = 0x0b,
           2107                         ;  PERIPHERAL_TYPE_ADC = 0x0c,
           2108                         ;  PERIPHERAL_TYPE_PWM = 0x0d,
           2109                         ;  PERIPHERAL_TYPE_FRC = 0x0e,
           2110                         ;  // Starts peripheral type number interval for user peripherals
           2111                         ;  PERIPHERAL_TYPE_USER_AREA = 0x80
           2112                         ;} TDpaPeripheralType;
           2113                         ;
           2114                         ;// Peripheral extended information
           2115                         ;typedef enum
           2116                         ;{
           2117                         ;  PERIPHERAL_TYPE_EXTENDED_DEFAULT = 0x00,
           2118                         ;  PERIPHERAL_TYPE_EXTENDED_READ = 0x01,
           2119                         ;  PERIPHERAL_TYPE_EXTENDED_WRITE = 0x02,
           2120                         ;  PERIPHERAL_TYPE_EXTENDED_READ_WRITE = PERIPHERAL_TYPE_EXTENDED_READ | PERIPHERAL_TYPE_EXTENDED_WRITE
           2121                         ;} TDpaPeripheralTypeExtended;
           2122                         ;
           2123                         ;// Response packet error codes
           2124                         ;typedef enum
           2125                         ;{
           2126                         ;  // No error
           2127                         ;  STATUS_NO_ERROR = 0,
           2128                         ;
           2129                         ;  // General fail
           2130                         ;  ERROR_FAIL = 1,
           2131                         ;  // Incorrect PCMD
           2132                         ;  ERROR_PCMD = 2,
           2133                         ;  // Incorrect PNUM or PCMD
           2134                         ;  ERROR_PNUM = 3,
           2135                         ;  // Incorrect Address value when addressing memory type peripherals
           2136                         ;  ERROR_ADDR = 4,
           2137                         ;  // Incorrect Data length
           2138                         ;  ERROR_DATA_LEN = 5,
           2139                         ;  // Incorrect Data
           2140                         ;  ERROR_DATA = 6,
           2141                         ;  // Incorrect HWPID used
           2142                         ;  ERROR_HWPID = 7,
           2143                         ;  // Incorrect NADR
           2144                         ;  ERROR_NADR = 8,
           2145                         ;  // IFACE data consumed by Custom DPA Handler
           2146                         ;  ERROR_IFACE_CUSTOM_HANDLER = 9,
           2147                         ;  // Custom DPA Handler is missing
           2148                         ;  ERROR_MISSING_CUSTOM_DPA_HANDLER = 10,
           2149                         ;
           2150                         ;  // Beginning of the user code error interval
           2151                         ;  ERROR_USER_FROM = 0x20,
           2152                         ;  // End of the user code error interval
           2153                         ;  ERROR_USER_TO = 0x3f,
           2154                         ;
           2155                         ;  // Bit/flag reserved for a future use
           2156                         ;  STATUS_RESERVED_FLAG = 0x40,
           2157                         ;  // Bit to flag asynchronous DPA Response from [N]
           2158                         ;  STATUS_ASYNC_RESPONSE = 0x80,
           2159                         ;  // Error code used to mark DPA Confirmation
           2160                         ;  STATUS_CONFIRMATION = 0xff
           2161                         ;} TErrorCodes;
           2162                         ;
           2163                         ;// Embedded FRC commands
           2164                         ;typedef enum
           2165                         ;{
           2166                         ;  // 2 bits
           2167                         ;  FRC_Ping = 0x00,
           2168                         ;  FRC_AcknowledgedBroadcastBits = 0x02,
           2169                         ;  FRC_PrebondedAlive = 0x03,
           2170                         ;  FRC_SupplyVoltage = 0x04,
           2171                         ;  FRC_PrebondedMemoryCompare2B = 0x05,
           2172                         ;  // 1 byte
           2173                         ;  FRC_Temperature = 0x80,
           2174                         ;  FRC_AcknowledgedBroadcastBytes = 0x81,
           2175                         ;  FRC_MemoryRead = 0x82,
           2176                         ;  FRC_MemoryReadPlus1 = 0x83,
           2177                         ;  FRC_FrcResponseTime = 0x84,
           2178                         ;  FRC_TestRFsignal = 0x85,
           2179                         ;  // 4 bytes
           2180                         ;  FRC_PrebondedMemoryRead4BPlus1 = 0xF8,
           2181                         ;  FRC_MemoryRead4B = 0xFA
           2182                         ;} TFRCommands;
           2183                         ;
           2184                         ;// Intervals of user FRC codes
           2185                         ;#define FRC_USER_BIT_FROM     0x40
           2186                         ;#define FRC_USER_BIT_TO       0x7F
           2187                         ;#define FRC_USER_BYTE_FROM    0xC0
           2188                         ;#define FRC_USER_BYTE_TO      0xDF
           2189                         ;#define FRC_USER_2BYTE_FROM   0xF0
           2190                         ;#define FRC_USER_2BYTE_TO     0xF7
           2191                         ;#define FRC_USER_4BYTE_FROM   0xFC
           2192                         ;#define FRC_USER_4BYTE_TO     0xFF
           2193                         ;
           2194                         ;// No HWPID specified
           2195                         ;#define HWPID_Default         0x0000
           2196                         ;// Use this type to override HWPID check
           2197                         ;#define HWPID_DoNotCheck      0xFfFf
           2198                         ;
           2199                         ;// RAM peripheral block definitions
           2200                         ;#ifdef TR7xD
           2201                         ;#define PERIPHERAL_RAM_LENGTH 48
           2202                         ;#else
           2203                         ;#define PERIPHERAL_RAM_LENGTH 80
           2204                         ;#endif
           2205                         ;
           2206                         ;// Start address of EEPROM peripheral in the real EEPROM
           2207                         ;#ifndef COORDINATOR_CUSTOM_HANDLER // Node
           2208                         ;#define PERIPHERAL_EEPROM_START     ( (uns8)0x00 )
           2209                         ;#else // Coordinator
           2210                         ;#define PERIPHERAL_EEPROM_START     ( (uns8)0x80 )
           2211                         ;#endif
           2212                         ;
           2213                         ;// Length of the internal EEPROM peripheral array
           2214                         ;#define PERIPHERAL_EEPROM_LENGTH            ( (uns8)( 0xC0 - PERIPHERAL_EEPROM_START ) )
           2215                         ;
           2216                         ;// Length of the readable area of serial EEEPROM from the EEEPROM DPA peripheral write point of view.
           2217                         ;#define EEEPROM_READ_LENGTH                 0x8000
           2218                         ;// Length of the writable area of serial EEEPROM from the EEEPROM DPA peripheral write point of view.
           2219                         ;#define EEEPROM_WRITE_LENGTH                0x4000
           2220                         ;
           2221                         ;// Starting address of the IO Setup DPA storage at external EEPROM
           2222                         ;#define IOSETUP_EEEPROM_ADDR                ( 0x0000 + sizeofBufferAUX )
           2223                         ;// Length of the IO setup memory block
           2224                         ;#define IOSETUP_LENGTH                      sizeofBufferAUX
           2225                         ;
           2226                         ;#if !defined( TR7xD )
           2227                         ;// Parameter at [_]DpaApi[Deep]Sleep() for not using Watchdog timer wakeup
           2228                         ;#define DpaApiSleep_WdtOff                  0b00000.0
           2229                         ;#endif
           2230                         ;
           2231                         ;// ---------------------------------------------------------
           2232                         ;
           2233                         ;// Enumerate peripherals structure
           2234                         ;typedef struct
           2235                         ;{
           2236                         ;  uns16 DpaVersion;
           2237                         ;  uns8  UserPerNr;
           2238                         ;  uns8  EmbeddedPers[PNUM_USER / 8];
           2239                         ;  uns16 HWPID;
           2240                         ;  uns16 HWPIDver;
           2241                         ;  uns8  Flags;
           2242                         ;  uns8  UserPer[( PNUM_MAX - PNUM_USER + 1 + 7 ) / 8];
           2243                         ;} STRUCTATTR TEnumPeripheralsAnswer;
           2244                         ;
           2245                         ;#define FlagUserPer(UserPersArray,UserPerNumber)    UserPersArray[((UserPerNumber)-PNUM_USER) / 8] |= (uns8)0x01 << (((UserPerNumber)-PNUM_USER) % 8);
           2246                         ;
           2247                         ;// Get peripheral info structure (CMD_GET_PER_INFO)
           2248                         ;typedef struct
           2249                         ;{
           2250                         ;  uns8  PerTE;
           2251                         ;  uns8  PerT;
           2252                         ;  uns8  Par1;
           2253                         ;  uns8  Par2;
           2254                         ;} STRUCTATTR TPeripheralInfoAnswer;
           2255                         ;
           2256                         ;// Error DPA response (PNUM_ERROR_FLAG)
           2257                         ;typedef struct
           2258                         ;{
           2259                         ;  uns8  ErrN;
           2260                         ;  uns8  PNUMoriginal;
           2261                         ;} STRUCTATTR TErrorAnswer;
           2262                         ;
           2263                         ;// Structure returned by CMD_COORDINATOR_ADDR_INFO
           2264                         ;typedef struct
           2265                         ;{
           2266                         ;  uns8  DevNr;
           2267                         ;  uns8  DID;
           2268                         ;} STRUCTATTR TPerCoordinatorAddrInfo_Response;
           2269                         ;
           2270                         ;// Structure for CMD_COORDINATOR_BOND_NODE
           2271                         ;typedef struct
           2272                         ;{
           2273                         ;  uns8  ReqAddr;
           2274                         ;  uns8  BondingTestRetries;
           2275                         ;} STRUCTATTR TPerCoordinatorBondNode_Request;
           2276                         ;
           2277                         ;// Structure returned by CMD_COORDINATOR_BOND_NODE or CMD_COORDINATOR_SMART_CONNECT
           2278                         ;typedef struct
           2279                         ;{
           2280                         ;  uns8  BondAddr;
           2281                         ;  uns8  DevNr;
           2282                         ;} STRUCTATTR TPerCoordinatorBondNodeSmartConnect_Response;
           2283                         ;
           2284                         ;// Structure for CMD_COORDINATOR_REMOVE_BOND
           2285                         ;typedef struct
           2286                         ;{
           2287                         ;  uns8  BondAddr;
           2288                         ;} STRUCTATTR TPerCoordinatorRemoveBond_Request;
           2289                         ;
           2290                         ;// Structure returned by CMD_COORDINATOR_REMOVE_BOND
           2291                         ;typedef struct
           2292                         ;{
           2293                         ;  uns8  DevNr;
           2294                         ;} STRUCTATTR TPerCoordinatorRemoveBond_Response;
           2295                         ;
           2296                         ;// Structure for CMD_COORDINATOR_DISCOVERY
           2297                         ;typedef struct
           2298                         ;{
           2299                         ;  uns8  TxPower;
           2300                         ;  uns8  MaxAddr;
           2301                         ;} STRUCTATTR TPerCoordinatorDiscovery_Request;
           2302                         ;
           2303                         ;// Structure returned by CMD_COORDINATOR_DISCOVERY
           2304                         ;typedef struct
           2305                         ;{
           2306                         ;  uns8  DiscNr;
           2307                         ;} STRUCTATTR TPerCoordinatorDiscovery_Response;
           2308                         ;
           2309                         ;// Structure for and also returned by CMD_COORDINATOR_SET_DPAPARAMS
           2310                         ;typedef struct
           2311                         ;{
           2312                         ;  uns8  DpaParam;
           2313                         ;} STRUCTATTR TPerCoordinatorSetDpaParams_Request_Response;
           2314                         ;
           2315                         ;// Structure for and also returned by CMD_COORDINATOR_SET_HOPS
           2316                         ;typedef struct
           2317                         ;{
           2318                         ;  uns8  RequestHops;
           2319                         ;  uns8  ResponseHops;
           2320                         ;} STRUCTATTR TPerCoordinatorSetHops_Request_Response;
           2321                         ;
           2322                         ;// Structure for CMD_COORDINATOR_BACKUP and CMD_NODE_BACKUP
           2323                         ;typedef struct
           2324                         ;{
           2325                         ;  uns8  Index;
           2326                         ;} STRUCTATTR TPerCoordinatorNodeBackup_Request;
           2327                         ;
           2328                         ;// Structure returned by CMD_COORDINATOR_BACKUP and CMD_NODE_BACKUP
           2329                         ;typedef struct
           2330                         ;{
           2331                         ;  uns8  NetworkData[49];
           2332                         ;} STRUCTATTR TPerCoordinatorNodeBackup_Response;
           2333                         ;
           2334                         ;// Structure for CMD_COORDINATOR_RESTORE and CMD_NODE_RESTORE
           2335                         ;typedef struct
           2336                         ;{
           2337                         ;  uns8  NetworkData[49];
           2338                         ;} STRUCTATTR TPerCoordinatorNodeRestore_Request;
           2339                         ;
           2340                         ;// Structure for CMD_COORDINATOR_AUTHORIZE_BOND
           2341                         ;typedef struct
           2342                         ;{
           2343                         ;  uns8  ReqAddr;
           2344                         ;  uns8  MID[4];
           2345                         ;} STRUCTATTR TPerCoordinatorAuthorizeBond_Request;
           2346                         ;
           2347                         ;// Structure returned by CMD_COORDINATOR_AUTHORIZE_BOND
           2348                         ;typedef struct
           2349                         ;{
           2350                         ;  uns8  BondAddr;
           2351                         ;  uns8  DevNr;
           2352                         ;} STRUCTATTR TPerCoordinatorAuthorizeBond_Response;
           2353                         ;
           2354                         ;// Structure for CMD_COORDINATOR_BRIDGE
           2355                         ;typedef struct
           2356                         ;{
           2357                         ;  TDpaIFaceHeader subHeader;
           2358                         ;  uns8  subPData[DPA_MAX_DATA_LENGTH - sizeof( TDpaIFaceHeader )];
           2359                         ;} STRUCTATTR TPerCoordinatorBridge_Request;
           2360                         ;
           2361                         ;// Structure returned by CMD_COORDINATOR_BRIDGE
           2362                         ;typedef struct
           2363                         ;{
           2364                         ;  TDpaIFaceHeader subHeader;
           2365                         ;  uns8  subRespCode;
           2366                         ;  uns8  subDpaValue;
           2367                         ;  uns8  subPData[DPA_MAX_DATA_LENGTH - sizeof( TDpaIFaceHeader ) - 2 * sizeof( uns8 )];
           2368                         ;} STRUCTATTR TPerCoordinatorBridge_Response;
           2369                         ;
           2370                         ;// Structure for CMD_COORDINATOR_SMART_CONNECT
           2371                         ;typedef struct
           2372                         ;{
           2373                         ;  uns8  ReqAddr;
           2374                         ;  uns8  BondingTestRetries;
           2375                         ;  uns8  IBK[16];
           2376                         ;  uns8  MID[4];
           2377                         ;  uns8  reserved0;
           2378                         ;  uns8  VirtualDeviceAddress;
           2379                         ;  uns8  UserData[4];
           2380                         ;  uns8  reserved1[10];
           2381                         ;} STRUCTATTR TPerCoordinatorSmartConnect_Request;
           2382                         ;
           2383                         ;// Structure for CMD_COORDINATOR_SET_MID
           2384                         ;typedef struct
           2385                         ;{
           2386                         ;  uns8  MID[4];
           2387                         ;  uns8  BondAddr;
           2388                         ;} STRUCTATTR TPerCoordinatorSetMID_Request;
           2389                         ;
           2390                         ;// Structure returned by CMD_NODE_READ
           2391                         ;typedef struct
           2392                         ;{
           2393                         ;  uns8  ntwADDR;
           2394                         ;  uns8  ntwVRN;
           2395                         ;  uns8  ntwZIN;
           2396                         ;  uns8  ntwDID;
           2397                         ;  uns8  ntwPVRN;
           2398                         ;  uns16 ntwUSERADDRESS;
           2399                         ;  uns16 ntwID;
           2400                         ;  uns8  ntwVRNFNZ;
           2401                         ;  uns8  ntwCFG;
           2402                         ;  uns8  Flags;
           2403                         ;} STRUCTATTR TPerNodeRead_Response;
           2404                         ;
           2405                         ;// Structures for CMD_NODE_VALIDATE_BONDS
           2406                         ;typedef struct
           2407                         ;{
           2408                         ;  uns8  Address;
           2409                         ;  uns8  MID[4];
           2410                         ;} STRUCTATTR TPerNodeValidateBondsItem;
           2411                         ;
           2412                         ;// Structure for CMD_NODE_VALIDATE_BONDS
           2413                         ;typedef struct
           2414                         ;{
           2415                         ;  TPerNodeValidateBondsItem Bonds[DPA_MAX_DATA_LENGTH / sizeof( TPerNodeValidateBondsItem )];
           2416                         ;} STRUCTATTR TPerNodeValidateBonds_Request;
           2417                         ;
           2418                         ;// Structure returned by CMD_OS_READ
           2419                         ;typedef struct
           2420                         ;{
           2421                         ;  uns8  MID[4];
           2422                         ;  uns8  OsVersion;
           2423                         ;  uns8  TrType;
           2424                         ;  uns16 OsBuild;
           2425                         ;  uns8  Rssi;
           2426                         ;  uns8  SupplyVoltage;
           2427                         ;  uns8  Flags;
           2428                         ;  uns8  SlotLimits;
           2429                         ;  uns8  IBK[16];
           2430                         ;  // Enumerate peripherals part, variable length because of UserPer field
           2431                         ;  uns16 DpaVersion;
           2432                         ;  uns8  UserPerNr;
           2433                         ;  uns8  EmbeddedPers[PNUM_USER / 8];
           2434                         ;  uns16 HWPID;
           2435                         ;  uns16 HWPIDver;
           2436                         ;  uns8  FlagsEnum;
           2437                         ;  uns8  UserPer[( PNUM_MAX - PNUM_USER + 1 + 7 ) / 8];
           2438                         ;} STRUCTATTR TPerOSRead_Response;
           2439                         ;
           2440                         ;// Structure returned by CMD_OS_READ_CFG
           2441                         ;typedef struct
           2442                         ;{
           2443                         ;  uns8  Checksum;
           2444                         ;  uns8  Configuration[31];
           2445                         ;  uns8  RFPGM;
           2446                         ;  uns8  Undocumented[1];
           2447                         ;} STRUCTATTR TPerOSReadCfg_Response;
           2448                         ;
           2449                         ;// Structure for CMD_OS_WRITE_CFG
           2450                         ;typedef struct
           2451                         ;{
           2452                         ;  uns8  Undefined;
           2453                         ;  uns8  Configuration[31];
           2454                         ;  uns8  RFPGM;
           2455                         ;} STRUCTATTR TPerOSWriteCfg_Request;
           2456                         ;
           2457                         ;// Structures for CMD_OS_WRITE_CFG_BYTE
           2458                         ;typedef struct
           2459                         ;{
           2460                         ;  uns8  Address;
           2461                         ;  uns8  Value;
           2462                         ;  uns8  Mask;
           2463                         ;} STRUCTATTR TPerOSWriteCfgByteTriplet;
           2464                         ;
           2465                         ;// Structure for CMD_OS_WRITE_CFG_BYTE
           2466                         ;typedef struct
           2467                         ;{
           2468                         ;  TPerOSWriteCfgByteTriplet Triplets[DPA_MAX_DATA_LENGTH / sizeof( TPerOSWriteCfgByteTriplet )];
           2469                         ;} STRUCTATTR TPerOSWriteCfgByte_Request;
           2470                         ;
           2471                         ;// Structure for CMD_OS_SET_SECURITY
           2472                         ;typedef struct
           2473                         ;{
           2474                         ;  uns8  Type;
           2475                         ;  uns8  Data[16];
           2476                         ;} STRUCTATTR TPerOSSetSecurity_Request;
           2477                         ;
           2478                         ;// Structure for CMD_OS_LOAD_CODE
           2479                         ;typedef struct
           2480                         ;{
           2481                         ;  uns8  Flags;
           2482                         ;  uns16 Address;
           2483                         ;  uns16 Length;
           2484                         ;  uns16 CheckSum;
           2485                         ;} STRUCTATTR TPerOSLoadCode_Request;
           2486                         ;
           2487                         ;// Structure for CMD_OS_SLEEP
           2488                         ;typedef struct
           2489                         ;{
           2490                         ;  uns16 Time;
           2491                         ;  uns8  Control;
           2492                         ;} STRUCTATTR TPerOSSleep_Request;
           2493                         ;
           2494                         ;// Structure for CMD_OS_SELECTIVE_BATCH
           2495                         ;typedef struct
           2496                         ;{
           2497                         ;  uns8  SelectedNodes[30];
           2498                         ;  uns8  Requests[DPA_MAX_DATA_LENGTH - 30];
           2499                         ;} STRUCTATTR TPerOSSelectiveBatch_Request;
           2500                         ;
           2501                         ;// Structure for CMD_OS_TEST_RF_SIGNAL request
           2502                         ;typedef struct
           2503                         ;{
           2504                         ;  uns8  Channel;
           2505                         ;  uns8  RXfilter;
           2506                         ;  uns16 Time;
           2507                         ;} STRUCTATTR TPerOSTestRfSignal_Request;
           2508                         ;
           2509                         ;// Structure for CMD_OS_TEST_RF_SIGNAL response
           2510                         ;typedef struct
           2511                         ;{
           2512                         ;  uns8  Counter;
           2513                         ;} STRUCTATTR TPerOSTestRfSignal_Response;
           2514                         ;
           2515                         ;// Structure for CMD_OS_INDICATE request
           2516                         ;typedef struct
           2517                         ;{
           2518                         ;  uns8  Control;
           2519                         ;} STRUCTATTR TPerOSIndicate_Request;
           2520                         ;
           2521                         ;// Structure for general memory request
           2522                         ;typedef struct
           2523                         ;{
           2524                         ;  // Address of data to write or read
           2525                         ;  uns8  Address;
           2526                         ;
           2527                         ;  union
           2528                         ;  {
           2529                         ;    // Memory read request
           2530                         ;    struct
           2531                         ;    {
           2532                         ;      // Length of data to read
           2533                         ;      uns8  Length;
           2534                         ;    } Read;
           2535                         ;
           2536                         ;    // Size of Address field
           2537                         ;#define MEMORY_WRITE_REQUEST_OVERHEAD   ( sizeof( uns8 ) )
           2538                         ;
           2539                         ;    // Memory write request
           2540                         ;    struct
           2541                         ;    {
           2542                         ;      uns8  PData[DPA_MAX_DATA_LENGTH - MEMORY_WRITE_REQUEST_OVERHEAD];
           2543                         ;    } Write;
           2544                         ;
           2545                         ;  } ReadWrite;
           2546                         ;} STRUCTATTR TPerMemoryRequest;
           2547                         ;
           2548                         ;// Structure for general extended memory request
           2549                         ;typedef struct
           2550                         ;{
           2551                         ;  // Address of data to write or read
           2552                         ;  uns16 Address;
           2553                         ;
           2554                         ;  union
           2555                         ;  {
           2556                         ;    // Memory read request
           2557                         ;    struct
           2558                         ;    {
           2559                         ;      // Length of data to read
           2560                         ;      uns8  Length;
           2561                         ;    } Read;
           2562                         ;
           2563                         ;    // Size of Address field
           2564                         ;#define XMEMORY_WRITE_REQUEST_OVERHEAD  ( sizeof( uns16 ) )
           2565                         ;
           2566                         ;    // Memory write request
           2567                         ;    struct
           2568                         ;    {
           2569                         ;      uns8  PData[DPA_MAX_DATA_LENGTH - XMEMORY_WRITE_REQUEST_OVERHEAD];
           2570                         ;    } Write;
           2571                         ;
           2572                         ;  } ReadWrite;
           2573                         ;} STRUCTATTR TPerXMemoryRequest;
           2574                         ;
           2575                         ;// Structure for CMD_IO requests
           2576                         ;typedef struct
           2577                         ;{
           2578                         ;  uns8  Port;
           2579                         ;  uns8  Mask;
           2580                         ;  uns8  Value;
           2581                         ;} STRUCTATTR TPerIOTriplet;
           2582                         ;
           2583                         ;typedef struct
           2584                         ;{
           2585                         ;  uns8  Header; // == PNUM_IO_DELAY
           2586                         ;  uns16 Delay;
           2587                         ;} STRUCTATTR TPerIODelay;
           2588                         ;
           2589                         ;// Union for CMD_IO_SET and CMD_IO_DIRECTION requests
           2590                         ;typedef union
           2591                         ;{
           2592                         ;  TPerIOTriplet Triplets[DPA_MAX_DATA_LENGTH / sizeof( TPerIOTriplet )];
           2593                         ;  TPerIODelay   Delays[DPA_MAX_DATA_LENGTH / sizeof( TPerIODelay )];
           2594                         ;} STRUCTATTR TPerIoDirectionAndSet_Request;
           2595                         ;
           2596                         ;// Structure returned by CMD_THERMOMETER_READ
           2597                         ;typedef struct
           2598                         ;{
           2599                         ;  int8  IntegerValue;
           2600                         ;  int16 SixteenthValue;
           2601                         ;} STRUCTATTR TPerThermometerRead_Response;
           2602                         ;
           2603                         ;// Structure for CMD_UART_OPEN
           2604                         ;typedef struct
           2605                         ;{
           2606                         ;  uns8  BaudRate;
           2607                         ;} STRUCTATTR TPerUartOpen_Request;
           2608                         ;
           2609                         ;// Structure for CMD_UART_[CLEAR_]WRITE_READ
           2610                         ;typedef struct
           2611                         ;{
           2612                         ;  uns8  ReadTimeout;
           2613                         ;  uns8  WrittenData[DPA_MAX_DATA_LENGTH - sizeof( uns8 )];
           2614                         ;} STRUCTATTR TPerUartWriteRead_Request;
           2615                         ;
           2616                         ;// Structure for CMD_FRC_SEND
           2617                         ;typedef struct
           2618                         ;{
           2619                         ;  uns8  FrcCommand;
           2620                         ;  uns8  UserData[30];
           2621                         ;} STRUCTATTR TPerFrcSend_Request;
           2622                         ;
           2623                         ;// Structure for CMD_FRC_SEND_SELECTIVE
           2624                         ;typedef struct
           2625                         ;{
           2626                         ;  uns8  FrcCommand;
           2627                         ;  uns8  SelectedNodes[30];
           2628                         ;  uns8  UserData[25];
           2629                         ;} STRUCTATTR TPerFrcSendSelective_Request;
           2630                         ;
           2631                         ;// Structure returned by CMD_FRC_SEND and CMD_FRC_SEND_SELECTIVE
           2632                         ;typedef struct
           2633                         ;{
           2634                         ;  uns8  Status;
           2635                         ;  uns8  FrcData[DPA_MAX_DATA_LENGTH - sizeof( uns8 )];
           2636                         ;} STRUCTATTR TPerFrcSend_Response;
           2637                         ;
           2638                         ;// Structure for request and response of CMD_FRC_SET_PARAMS
           2639                         ;typedef struct
           2640                         ;{
           2641                         ;  uns8  FrcParams;
           2642                         ;} STRUCTATTR TPerFrcSetParams_RequestResponse;
           2643                         ;
           2644                         ;// Interface and CMD_COORDINATOR_BRIDGE confirmation structure
           2645                         ;typedef struct
           2646                         ;{
           2647                         ;  // Number of hops
           2648                         ;  uns8  Hops;
           2649                         ;  // Time slot length in 10ms
           2650                         ;  uns8  TimeSlotLength;
           2651                         ;  // Number of hops for response
           2652                         ;  uns8  HopsResponse;
           2653                         ;} STRUCTATTR TIFaceConfirmation;
           2654                         ;
           2655                         ;// ---------------------------------------------------------
           2656                         ;
           2657                         ;// DPA Message data structure (packet w/o NADR, PNUM, PCMD, HWPID)
           2658                         ;typedef union
           2659                         ;{
           2660                         ;  // General DPA request
           2661                         ;  struct
           2662                         ;  {
           2663                         ;    uns8    PData[DPA_MAX_DATA_LENGTH];
           2664                         ;  } Request;
           2665                         ;
           2666                         ;  // General DPA response
           2667                         ;  struct
           2668                         ;  {
           2669                         ;    uns8    PData[DPA_MAX_DATA_LENGTH];
           2670                         ;  } Response;
           2671                         ;
           2672                         ;  // Enumerate peripherals structure
           2673                         ;  TEnumPeripheralsAnswer EnumPeripheralsAnswer;
           2674                         ;
           2675                         ;  // Get peripheral info structure (CMD_GET_PER_INFO)
           2676                         ;  TPeripheralInfoAnswer PeripheralInfoAnswer;
           2677                         ;
           2678                         ;  // Get peripheral info structure (CMD_GET_PER_INFO) for more peripherals
           2679                         ;  TPeripheralInfoAnswer PeripheralInfoAnswers[MAX_PERIPHERALS_PER_BLOCK_INFO];
           2680                         ;
           2681                         ;  // Error DPA response (PNUM_ERROR_FLAG)
           2682                         ;  TErrorAnswer ErrorAnswer;
           2683                         ;
           2684                         ;  // Structure returned by CMD_COORDINATOR_ADDR_INFO
           2685                         ;  TPerCoordinatorAddrInfo_Response PerCoordinatorAddrInfo_Response;
           2686                         ;
           2687                         ;  // Structure for CMD_COORDINATOR_BOND_NODE
           2688                         ;  TPerCoordinatorBondNode_Request PerCoordinatorBondNode_Request;
           2689                         ;
           2690                         ;  // Structure returned by CMD_COORDINATOR_BOND_NODE or CMD_COORDINATOR_SMART_CONNECT
           2691                         ;  TPerCoordinatorBondNodeSmartConnect_Response PerCoordinatorBondNodeSmartConnect_Response;
           2692                         ;
           2693                         ;  // Structure for CMD_COORDINATOR_REMOVE_BOND
           2694                         ;  TPerCoordinatorRemoveBond_Request PerCoordinatorRemoveBond_Request;
           2695                         ;
           2696                         ;  // Structure returned by CMD_COORDINATOR_REMOVE_BOND
           2697                         ;  TPerCoordinatorRemoveBond_Response PerCoordinatorRemoveBond_Response;
           2698                         ;
           2699                         ;  // Structure for CMD_COORDINATOR_DISCOVERY
           2700                         ;  TPerCoordinatorDiscovery_Request PerCoordinatorDiscovery_Request;
           2701                         ;
           2702                         ;  // Structure returned by CMD_COORDINATOR_DISCOVERY
           2703                         ;  TPerCoordinatorDiscovery_Response PerCoordinatorDiscovery_Response;
           2704                         ;
           2705                         ;  // Structure for and also returned by CMD_COORDINATOR_SET_DPAPARAMS
           2706                         ;  TPerCoordinatorSetDpaParams_Request_Response PerCoordinatorSetDpaParams_Request_Response;
           2707                         ;
           2708                         ;  // Structure for and also returned by CMD_COORDINATOR_SET_HOPS
           2709                         ;  TPerCoordinatorSetHops_Request_Response PerCoordinatorSetHops_Request_Response;
           2710                         ;
           2711                         ;  // Structure for CMD_COORDINATOR_BACKUP and CMD_NODE_BACKUP
           2712                         ;  TPerCoordinatorNodeBackup_Request PerCoordinatorNodeBackup_Request;
           2713                         ;
           2714                         ;  // Structure returned by CMD_COORDINATOR_BACKUP and CMD_NODE_BACKUP
           2715                         ;  TPerCoordinatorNodeBackup_Response PerCoordinatorNodeBackup_Response;
           2716                         ;
           2717                         ;  // Structure for CMD_COORDINATOR_RESTORE and CMD_NODE_RESTORE
           2718                         ;  TPerCoordinatorNodeRestore_Request PerCoordinatorNodeRestore_Request;
           2719                         ;
           2720                         ;  // Structure for CMD_COORDINATOR_AUTHORIZE_BOND
           2721                         ;  TPerCoordinatorAuthorizeBond_Request PerCoordinatorAuthorizeBond_Request;
           2722                         ;
           2723                         ;  // Structure returned by CMD_COORDINATOR_AUTHORIZE_BOND
           2724                         ;  TPerCoordinatorAuthorizeBond_Response PerCoordinatorAuthorizeBond_Response;
           2725                         ;
           2726                         ;  // Structure for CMD_COORDINATOR_BRIDGE
           2727                         ;  TPerCoordinatorBridge_Request PerCoordinatorBridge_Request;
           2728                         ;
           2729                         ;  // Structure returned by CMD_COORDINATOR_BRIDGE
           2730                         ;  TPerCoordinatorBridge_Response PerCoordinatorBridge_Response;
           2731                         ;
           2732                         ;  // Structure for CMD_COORDINATOR_SMART_CONNECT
           2733                         ;  TPerCoordinatorSmartConnect_Request PerCoordinatorSmartConnect_Request;
           2734                         ;
           2735                         ;  // Structure for CMD_COORDINATOR_SET_MID
           2736                         ;  TPerCoordinatorSetMID_Request PerCoordinatorSetMID_Request;
           2737                         ;
           2738                         ;  // Structure returned by CMD_NODE_READ
           2739                         ;  TPerNodeRead_Response PerNodeRead_Response;
           2740                         ;
           2741                         ;  // Structure for CMD_NODE_VALIDATE_BONDS
           2742                         ;  TPerNodeValidateBonds_Request PerNodeValidateBonds_Request;
           2743                         ;
           2744                         ;  // Structure returned by CMD_OS_READ
           2745                         ;  TPerOSRead_Response PerOSRead_Response;
           2746                         ;
           2747                         ;  // Structure returned by CMD_OS_READ_CFG
           2748                         ;  TPerOSReadCfg_Response PerOSReadCfg_Response;
           2749                         ;
           2750                         ;  // Structure for CMD_OS_WRITE_CFG
           2751                         ;  TPerOSWriteCfg_Request PerOSWriteCfg_Request;
           2752                         ;
           2753                         ;  // Structure for CMD_OS_WRITE_CFG_BYTE
           2754                         ;  TPerOSWriteCfgByte_Request PerOSWriteCfgByte_Request;
           2755                         ;
           2756                         ;  // Structure for CMD_OS_SET_SECURITY
           2757                         ;  TPerOSSetSecurity_Request PerOSSetSecurity_Request;
           2758                         ;
           2759                         ;  // Structure for CMD_OS_LOAD_CODE
           2760                         ;  TPerOSLoadCode_Request PerOSLoadCode_Request;
           2761                         ;
           2762                         ;  // Structure for CMD_OS_SLEEP
           2763                         ;  TPerOSSleep_Request PerOSSleep_Request;
           2764                         ;
           2765                         ;  // Structure for CMD_OS_SELECTIVE_BATCH
           2766                         ;  TPerOSSelectiveBatch_Request PerOSSelectiveBatch_Request;
           2767                         ;
           2768                         ;  // Structure for CMD_OS_TEST_RF_SIGNAL request
           2769                         ;  TPerOSTestRfSignal_Request PerOSTestRfSignal_Request;
           2770                         ;
           2771                         ;  // Structure for CMD_OS_INDICATE request
           2772                         ;  TPerOSIndicate_Request PerOSIndicate_Request;
           2773                         ;
           2774                         ;  // Structure for CMD_OS_TEST_RF_SIGNAL response
           2775                         ;  TPerOSTestRfSignal_Response PerOSTestRfSignal_Response;
           2776                         ;
           2777                         ;  // Structure for general memory request
           2778                         ;  TPerMemoryRequest MemoryRequest;
           2779                         ;
           2780                         ;  // Structure for general extended memory request
           2781                         ;  TPerXMemoryRequest XMemoryRequest;
           2782                         ;
           2783                         ;  // Structure for CMD_IO requests
           2784                         ;  TPerIoDirectionAndSet_Request PerIoDirectionAndSet_Request;
           2785                         ;
           2786                         ;  // Structure returned by CMD_THERMOMETER_READ
           2787                         ;  TPerThermometerRead_Response PerThermometerRead_Response;
           2788                         ;
           2789                         ;  // Structure for CMD_UART_OPEN
           2790                         ;  TPerUartOpen_Request PerUartOpen_Request;
           2791                         ;
           2792                         ;  // Structure for CMD_UART_[CLEAR_]WRITE_READ
           2793                         ;  TPerUartWriteRead_Request PerUartWriteRead_Request;
           2794                         ;
           2795                         ;  // Structure for CMD_FRC_SEND
           2796                         ;  TPerFrcSend_Request PerFrcSend_Request;
           2797                         ;
           2798                         ;  // Structure returned by CMD_FRC_SEND and CMD_FRC_SEND_SELECTIVE
           2799                         ;  TPerFrcSend_Response PerFrcSend_Response;
           2800                         ;
           2801                         ;  // Structure for CMD_FRC_SEND_SELECTIVE
           2802                         ;  TPerFrcSendSelective_Request PerFrcSendSelective_Request;
           2803                         ;
           2804                         ;  // Structure for request and response of CMD_FRC_SET_PARAMS
           2805                         ;  TPerFrcSetParams_RequestResponse PerFrcSetParams_RequestResponse;
           2806                         ;
           2807                         ;  // Interface and CMD_COORDINATOR_BRIDGE confirmation structure
           2808                         ;  TIFaceConfirmation IFaceConfirmation;
           2809                         ;} TDpaMessage;
           2810                         ;
           2811                         ;// Custom DPA Handler events
           2812                         ;#define DpaEvent_DpaRequest               0
           2813                         ;#define DpaEvent_Interrupt                1
           2814                         ;#define DpaEvent_Idle                     2
           2815                         ;#define DpaEvent_Init                     3
           2816                         ;#define DpaEvent_Notification             4
           2817                         ;#define DpaEvent_AfterRouting             5
           2818                         ;#define DpaEvent_BeforeSleep              6
           2819                         ;#define DpaEvent_AfterSleep               7
           2820                         ;#define DpaEvent_Reset                    8
           2821                         ;#define DpaEvent_DisableInterrupts        9
           2822                         ;#define DpaEvent_FrcValue                 10
           2823                         ;#define DpaEvent_ReceiveDpaResponse       11
           2824                         ;#define DpaEvent_IFaceReceive             12
           2825                         ;#define DpaEvent_ReceiveDpaRequest        13
           2826                         ;#define DpaEvent_BeforeSendingDpaResponse 14
           2827                         ;#define DpaEvent_PeerToPeer               15
           2828                         ;#define DpaEvent_UserDpaValue             17
           2829                         ;#define DpaEvent_FrcResponseTime          18
           2830                         ;#if defined( TR7xD )
           2831                         ;#define DpaEvent_BondingButton            19
           2832                         ;#endif
           2833                         ;#define DpaEvent_Indicate                 20
           2834                         ;#define DpaEvent_VerifyLocalFrc           21
           2835                         ;#if !defined( TR7xD )
           2836                         ;#define DpaEvent_MenuActivated            22
           2837                         ;#define DpaEvent_MenuItemSelected         23
           2838                         ;#define DpaEvent_MenuItemFinalize         24
           2839                         ;#define DpaEvent_InStandby                25
           2840                         ;#endif
           2841                         ;
           2842                         ;#if defined( TR7xD )
           2843                         ;#define DpaEvent_LAST                     DpaEvent_VerifyLocalFrc
           2844                         ;#else
           2845                         ;#define DpaEvent_LAST                     DpaEvent_InStandby
           2846                         ;#endif
           2847                         ;
           2848                         ;// Types of the diagnostic DPA Value that is returned inside DPA response
           2849                         ;typedef enum
           2850                         ;{
           2851                         ;  DpaValueType_RSSI = 0,
           2852                         ;  DpaValueType_SupplyVoltage = 1,
           2853                         ;  DpaValueType_System = 2,
           2854                         ;  DpaValueType_User = 3
           2855                         ;} TDpaValueType;
           2856                         ;
           2857                         ;// Type (color) of LED peripheral
           2858                         ;typedef enum
           2859                         ;{
           2860                         ;  LED_COLOR_RED = 0,
           2861                         ;  LED_COLOR_GREEN = 1,
           2862                         ;  LED_COLOR_BLUE = 2,
           2863                         ;  LED_COLOR_YELLOW = 3,
           2864                         ;  LED_COLOR_WHITE = 4,
           2865                         ;  LED_COLOR_UNKNOWN = 0xff
           2866                         ;} TLedColor;
           2867                         ;
           2868                         ;// Baud rates
           2869                         ;typedef enum
           2870                         ;{
           2871                         ;  DpaBaud_1200 = 0x00,
           2872                         ;  DpaBaud_2400 = 0x01,
           2873                         ;  DpaBaud_4800 = 0x02,
           2874                         ;  DpaBaud_9600 = 0x03,
           2875                         ;  DpaBaud_19200 = 0x04,
           2876                         ;  DpaBaud_38400 = 0x05,
           2877                         ;  DpaBaud_57600 = 0x06,
           2878                         ;  DpaBaud_115200 = 0x07,
           2879                         ;  DpaBaud_230400 = 0x08
           2880                         ;} TBaudRates;
           2881                         ;
           2882                         ;// Useful PNUM_IO definitions
           2883                         ;typedef enum
           2884                         ;{
           2885                         ;  PNUM_IO_PORTA = 0x00,
           2886                         ;  PNUM_IO_TRISA = 0x00,
           2887                         ;
           2888                         ;  PNUM_IO_PORTB = 0x01,
           2889                         ;  PNUM_IO_TRISB = 0x01,
           2890                         ;
           2891                         ;  PNUM_IO_PORTC = 0x02,
           2892                         ;  PNUM_IO_TRISC = 0x02,
           2893                         ;
           2894                         ;  PNUM_IO_PORTE = 0x04,
           2895                         ;  PNUM_IO_TRISE = 0x04,
           2896                         ;
           2897                         ;  PNUM_IO_WPUB = 0x11,
           2898                         ;#if !defined( TR7xD )
           2899                         ;  PNUM_IO_WPUA = 0x10,
           2900                         ;  PNUM_IO_WPUC = 0x12,
           2901                         ;  PNUM_IO_WPUE = 0x14,
           2902                         ;#endif
           2903                         ;  PNUM_IO_DELAY = 0xff,
           2904                         ;} PNUM_IO_Definitions;
           2905                         ;
           2906                         ;// To test for enumeration peripherals request
           2907                         ;#define IsDpaEnumPeripheralsRequestNoSize() ( _PNUM == PNUM_ENUMERATION && _PCMD == CMD_GET_PER_INFO )
           2908                         ;
           2909                         ;#if PARAM_CHECK_LEVEL >= 2
           2910                         ;#define IsDpaEnumPeripheralsRequest() ( IsDpaEnumPeripheralsRequestNoSize() && _DpaDataLength == 0 )
           2911                         ;#else
           2912                         ;#define IsDpaEnumPeripheralsRequest() IsDpaEnumPeripheralsRequestNoSize()
           2913                         ;#endif
           2914                         ;
           2915                         ;// To test for peripherals information request
           2916                         ;#define IsDpaPeripheralInfoRequestNoSize()  ( _PNUM != PNUM_ENUMERATION && _PCMD == CMD_GET_PER_INFO )
           2917                         ;
           2918                         ;#if PARAM_CHECK_LEVEL >= 2
           2919                         ;#define IsDpaPeripheralInfoRequest()  ( IsDpaPeripheralInfoRequestNoSize() && _DpaDataLength == 0 )
           2920                         ;#else
           2921                         ;#define IsDpaPeripheralInfoRequest()  IsDpaPeripheralInfoRequestNoSize()
           2922                         ;#endif
           2923                         ;
           2924                         ;// Optimized macro for both testing enumeration peripherals ELSE peripherals information. See examples
           2925                         ;#define IfDpaEnumPeripherals_Else_PeripheralInfo_Else_PeripheralRequestNoSize() if ( _PCMD == CMD_GET_PER_INFO ) if ( _PNUM == PNUM_ENUMERATION )
           2926                         ;
           2927                         ;#if PARAM_CHECK_LEVEL >= 2
           2928                         ;#define IfDpaEnumPeripherals_Else_PeripheralInfo_Else_PeripheralRequest() if ( _DpaDataLength == 0 && _PCMD == CMD_GET_PER_INFO ) if ( _PNUM == PNUM_ENUMERATION )
           2929                         ;#else
           2930                         ;#define IfDpaEnumPeripherals_Else_PeripheralInfo_Else_PeripheralRequest() IfDpaEnumPeripherals_Else_PeripheralInfo_Else_PeripheralRequestNoSize()
           2931                         ;#endif
           2932                         ;
           2933                         ;#if defined( __CC5X__ ) && !defined( CC5XnotDPA )
           2934                         ;
           2935                         ;// DPA message at bufferRF
           2936                         ;TDpaMessage DpaRfMessage @bufferRF;
           2937                         ;
           2938                         ;// Note: Works only, because _DpaMessage.Request.PData is at the same location as bufferRF!
           2939                         ;#define _FSR_DPA    _FSR_RF
           2940                         ;
           2941                         ;// Actual allocation of the RAM Peripheral memory block @ UserBank_02
           2942                         ;bank12 uns8  PeripheralRam[PERIPHERAL_RAM_LENGTH] @ 0x620;
           2943                         ;
           2944                         ;// Actual DPA message parameters at memory
           2945                         ;#define _NADR           RX
           2946                         ;#define _NADRhigh       RTAUX
           2947                         ;#define _PNUM           PNUM
           2948                         ;#define _PCMD           PCMD
           2949                         ;#define _DpaDataLength  DLEN
           2950                         ;#define _DpaMessage     DpaRfMessage
           2951                         ;
           2952                         ;// Return actual DPA user routine event
           2953                         ;#define GetDpaEvent()   userReg0
           2954                         ;
           2955                         ;// Stores DPA Params inside DPA request/response
           2956                         ;#define _DpaParams      PPAR
           2957                         ;// Get DPA Value type out of the DPA Params
           2958                         ;#define DpaValueType()  ( _DpaParams & 0b11 )
           2959                         ;
           2960                         ;// When TRUE then encryptBufferRF/decryptBufferRF is done by AccessPassord
           2961                         ;bit encryptByAccessPassword @ usedBank0[0x23].7;
           2962                         ;
           2963                         ;// DP2P response time-slot time in 10 ms
           2964                         ;#define DP2P_TIMESLOT   11
           2965                         ;
           2966                         ;// DP2P request packet. Fills out the whole bufferRF.
           2967                         ;typedef struct
           2968                         ;{
           2969                         ;  uns8  Header[3];  // 0x000000
           2970                         ;  uns8  SelectedNodes[30];
           2971                         ;  uns8  SlotLength;
           2972                         ;  uns8  ResponseTxPower;
           2973                         ;  uns8  Reserved;
           2974                         ;  uns16 HWPID;
           2975                         ;  uns8  PDATA[sizeofBufferRF - ( 3 + 30 + 1 + 1 + 1 ) * sizeof( uns8 ) - ( 1 ) * sizeof( uns16 )]; // size is 26 bytes
           2976                         ;} STRUCTATTR TDP2Prequest;
           2977                         ;
           2978                         ;// DP2P invite packet.
           2979                         ;typedef struct
           2980                         ;{
           2981                         ;  uns8  Header[3];  // 0x000001
           2982                         ;  uns8  NADR;
           2983                         ;  uns8  Rand[12];
           2984                         ;} STRUCTATTR TDP2Invite;
           2985                         ;
           2986                         ;// DP2P confirm packet.
           2987                         ;typedef struct
           2988                         ;{
           2989                         ;  uns8  Header[3];  // 0x000003
           2990                         ;  uns8  NADR;
           2991                         ;  uns8  Rand[12];
           2992                         ;} STRUCTATTR TDP2Confirm;
           2993                         ;
           2994                         ;// DP2P response packet.
           2995                         ;typedef struct
           2996                         ;{
           2997                         ;  uns8  Header[3];  // 0xFfFfFf
           2998                         ;  uns8  NADR;
           2999                         ;  uns8  PDATA[DPA_MAX_DATA_LENGTH];
           3000                         ;} STRUCTATTR TDP2Presponse;
           3001                         ;
           3002                         ;#ifndef TR7xD
           3003                         ;
           3004                         ;// Menus
           3005                         ;#define DMENU_Online                                  0x0
           3006                         ;#define DMENU_ReadyToBond                             0x1
           3007                         ;#define DMENU_Beaming                                 0x2
           3008                         ;#define DMENU_Standby                                 0x3
           3009                         ;
           3010                         ;// Menu items
           3011                         ;#define DMENU_Item_None                               0x0
           3012                         ;#define DMENU_Item_Beaming                            ( DMENU_Online + 1 )
           3013                         ;#define DMENU_Item_BondRequest                        ( DMENU_ReadyToBond + 1 )
           3014                         ;#define DMENU_Item_ConnectivityCheck                  ( DMENU_Beaming + 1 )
           3015                         ;#define DMENU_Item_ExitStandby                        ( DMENU_Standby + 1 )
           3016                         ;#define DMENU_Item_StateIndication                    ( DMENU_Item_ExitStandby + 1 )
           3017                         ;#define DMENU_Item_User1                              ( DMENU_Item_StateIndication + 1 )
           3018                         ;#define DMENU_Item_User2                              ( DMENU_Item_User1 + 1 )
           3019                         ;#define DMENU_Item_Standby                            ( DMENU_Item_User2 + 1 )
           3020                         ;#define DMENU_Item_Reset                              ( DMENU_Item_Standby + 1 )
           3021                         ;#define DMENU_Item_UnbondAndRestart                   ( DMENU_Item_Reset + 2 )
           3022                         ;#define DMENU_Item_UnbondFactorySettingsAndRestart    ( DMENU_Item_UnbondAndRestart + 1 )
           3023                         ;
           3024                         ;// Flags for enabling/disabling menu items at event DpaEvent_MenuActivated (when TRUE is returned) and at DpaApiMenu call
           3025                         ;#define DMENU_Item_Implemented_Beaming                            0b0000.0001
           3026                         ;#define DMENU_Item_Implemented_User1                              0b0000.0100
           3027                         ;#define DMENU_Item_Implemented_User1Confirmed                     ( DMENU_Item_Implemented_User1 | DMENU_Item_Confirm_User1 )
           3028                         ;#define DMENU_Item_Implemented_User2                              0b0000.1000
           3029                         ;#define DMENU_Item_Implemented_User2Confirmed                     ( DMENU_Item_Implemented_User2 | DMENU_Item_Confirm_User2 )
           3030                         ;
           3031                         ;#define DMENU_Item_Unimplemented_Standby                          0b0001.0000
           3032                         ;#define DMENU_Item_Unimplemented_UnbondAndRestart                 0b0100.0000
           3033                         ;#define DMENU_Item_Unimplemented_UnbondFactorySettingsAndRestart  0b1000.0000
           3034                         ;
           3035                         ;#define DMENU_Item_Confirm_User1                                  0b0000.0010
           3036                         ;#define DMENU_Item_Confirm_User2                                  0b0010.0000
           3037                         ;
           3038                         ;// Flags for DpaEvent_MenuActivated when FALSE is returned
           3039                         ;#define DMENU_MenuActivated_DoNotOpen                             0b1000.0000
           3040                         ;
           3041                         ;// Macro to construct value containing both menu and item values
           3042                         ;#define MakeDMenuAndItem( menu, menuItem )            ( ((menu) << 4 ) | (menuItem) )
           3043                         ;// Macro to get menu from menu&item value
           3044                         ;#define GetDMenu( menuAndItem )                       ( (menuAndItem) >> 4 )
           3045                         ;// Macro to get menu item from menu&item value
           3046                         ;#define GetDMenuItem( menuAndItem )                   ( (menuAndItem) & 0x0F )
           3047                         ;
           3048                         ;#endif
           3049                         ;// Include assembler definitions
           3050                         ;#include "HexCodes.h"
           3051                         ;// CC5X fix
           3052                         ;#if __CC5X__ <= 3800 && _16LF18877 == 1
           3053                         ;#undef  __MOVLB
           3054                         ;#define __MOVLB(k)    (0x0140+((k)&0x3F))
           3055                         ;#endif
           3056                         ;
           3057                         ;// Next code must start at the IQRF APPLICATION routine entry point
           3058                         ;#pragma origin __APPLICATION_ADDRESS
     0000  3059         ORG 0x3A00
           3060 
           3061   ; FILE C:\customdpa\DPAcustomHandler.h
           3062                         ;// *********************************************************************
           3063                         ;//   Main Custom DPA Handler header                                    *
           3064                         ;// *********************************************************************
           3065                         ;// Copyright (c) MICRORISC s.r.o.
           3066                         ;//
           3067                         ;// File:    $RCSfile: DPAcustomHandler.h,v $
           3068                         ;// Version: $Revision: 1.167 $
           3069                         ;// Date:    $Date: 2024/12/05 09:28:58 $
           3070                         ;//
           3071                         ;// Revision history:
           3072                         ;//   2024/11/05  Release for DPA 4.32
           3073                         ;//   2024/04/17  Release for DPA 4.31
           3074                         ;//   2023/03/07  Release for DPA 4.30
           3075                         ;//   2022/10/05  Release for DPA 4.18
           3076                         ;//   2022/02/24  Release for DPA 4.17
           3077                         ;//   2021/08/20  Release for DPA 4.16
           3078                         ;//   2020/09/03  Release for DPA 4.15
           3079                         ;//   2020/04/03  Release for DPA 4.14
           3080                         ;//   2020/02/27  Release for DPA 4.13
           3081                         ;//   2020/01/09  Release for DPA 4.12
           3082                         ;//   2019/12/11  Release for DPA 4.11
           3083                         ;//   2019/10/09  Release for DPA 4.10
           3084                         ;//   2019/06/12  Release for DPA 4.03
           3085                         ;//   2019/06/03  Release for DPA 4.02
           3086                         ;//   2019/03/07  Release for DPA 4.01
           3087                         ;//   2019/01/10  Release for DPA 4.00
           3088                         ;//   2018/10/25  Release for DPA 3.03
           3089                         ;//   2017/11/16  Release for DPA 3.02
           3090                         ;//   2017/08/14  Release for DPA 3.01
           3091                         ;//   2017/03/13  Release for DPA 3.00
           3092                         ;//   2016/09/12  Release for DPA 2.28
           3093                         ;//   2016/04/14  Release for DPA 2.27
           3094                         ;//   2016/03/03  Release for DPA 2.26
           3095                         ;//   2016/01/21  Release for DPA 2.25
           3096                         ;//   2015/12/01  Release for DPA 2.24
           3097                         ;//   2015/10/23  Release for DPA 2.23
           3098                         ;//   2015/09/25  Release for DPA 2.22
           3099                         ;//   2015/09/03  Release for DPA 2.21
           3100                         ;//   2015/08/05  Release for DPA 2.20
           3101                         ;//   2014/10/31  Release for DPA 2.10
           3102                         ;//   2014/04/30  Release for DPA 2.00
           3103                         ;//   2013/10/03  Release for DPA 1.00
           3104                         ;//
           3105                         ;// *********************************************************************
           3106                         ;
           3107                         ;// Online DPA documentation https://doc.iqrf.org/DpaTechGuide/
           3108                         ;// IQRF Standards documentation https://doc.iqrf.org/
           3109                         ;
           3110                         ;#ifndef _CUSTOM_DPA_HANDLER_
           3111                         ;#define _CUSTOM_DPA_HANDLER_
           3112                         ;
           3113                         ;//############################################################################################
           3114                         ;// 1st include
           3115                         ;
           3116                         ;// Custom DPA Handler routine declaration
           3117                         ;bit CustomDpaHandler();
           3118                         ;
           3119                         ;// Various DPA flags shared between DPA and Custom DPA Handler
           3120                         ;uns8 DpaFlags @ usedBank4[0];
           3121                         ;
           3122                         ;// [C][N] TRUE if I2C timeout occurred at the last DpaApiI2C?() call
           3123                         ;bit I2CwasTimeout @ DpaFlags.0;
           3124                         ;// [N] Flag for the 1st DpaApiSleep
           3125                         ;bit FirstDpaApiSleep @ DpaFlags.1;
           3126                         ;
           3127                         ;#ifdef COORDINATOR_CUSTOM_HANDLER
           3128                         ;// [C] TRUE if interface master is not connected (detected)
           3129                         ;bit IFaceMasterNotConnected @ DpaFlags.2;
           3130                         ;#endif
           3131                         ;// [N] DPA by interface notification is sent also when there was a "reading" like DPA request
           3132                         ;bit EnableIFaceNotificationOnRead @ DpaFlags.3;
           3133                         ;// [N] TRUE when node was just bonded using default bonding procedure
           3134                         ;bit NodeWasBonded @ DpaFlags.4;
           3135                         ;// [N] When TRUE, then next call of DpaApiRfTxDpaPacket sends non-routed packet
           3136                         ;bit NonroutedRfTxDpaPacket @ DpaFlags.7;
           3137                         ;
           3138                         ;// [C] Ticks (decrementing) counter usable for timing in the coordinator's Customer DPA Handler
           3139                         ;uns16 DpaTicks @ usedBank4[1];
           3140                         ;// [N] toutRF for LP mode, read from configuration memory after reset
           3141                         ;uns8 LPtoutRF @ usedBank4[3];
           3142                         ;// DPA Request/Response HWPID
           3143                         ;uns16 _HWPID @ usedBank4[4];
           3144                         ;// Identifies type of reset (stored at UserReg0 upon module reset). See Reset chapter at IQRF User's Guide for more information
           3145                         ;uns8 ResetType @ usedBank4[6];
           3146                         ;// User DPA Values to return
           3147                         ;uns8 UserDpaValue @ usedBank4[7];
           3148                         ;// Network depth of the DPA request/response, increases on bridging, decreases on back-bridging
           3149                         ;uns8 NetDepth @ usedBank4[8];
           3150                         ;// TRUE when node was at DPA Service Mode after last boot
           3151                         ;bit DSMactivated @ usedBank4[9].0;
           3152                         ;// If set to TRUE, then LP RX mode in the main loop can be terminated by pin, see _RLPMAT
           3153                         ;bit LpRxPinTerminate @ usedBank4[9].1;
           3154                         ;// If set to TRUE, then [C] executes asynchronous DPA requests received from [N]
           3155                         ;bit AsyncReqAtCoordinator @ usedBank4[9].2;
           3156                         ;// RX filter used at the DPA main loop checkRF call
           3157                         ;uns8 RxFilter @ usedBank4[11];
           3158                         ;// Countdown variable for button bonding before going to deep sleep
           3159                         ;uns16 BondingSleepCountdown @ usedBank4[12];
           3160                         ;#define BONDING_SLEEP_COUNTDOWN_UNIT  290
           3161                         ;// Non-zero pseudo-random value, read-only, updated on every Reset and Idle event, at [N] only.
           3162                         ;uns16 Random @ usedBank4[14];
           3163                         ;// DPA value from the received packet or just to be sent to the interface.
           3164                         ;uns8 DpaValue @ usedBank4[16];
           3165                         ;// If non-zero then timeout value for DpaApiI2C?() calls
           3166                         ;uns8 I2Ctimeout @ usedBank4[17];
           3167                         ;
           3168                         ;// Macro to return an error from the peripheral handler. If the code size is not an issue this macro is the right choice.
           3169                         ;#define DpaApiReturnPeripheralError(error) do { \
           3170                         ;    DpaApiSetPeripheralError( error ); \
           3171                         ;    return Carry; \
           3172                         ;  } while( 0 )
           3173                         ;
           3174                         ;// DPA API functions, see documentation for details
           3175                         ;#define DpaApiRfTxDpaPacket( dpaValue, netDepthAndFlags ) DpaApiEntry( dpaValue, netDepthAndFlags, DPA_API_RFTX_DPAPACKET )
           3176                         ;#define DpaApiReadConfigByte( index )                     DpaApiEntry( index, param3.low8, DPA_API_READ_CONFIG_BYTE )
           3177                         ;#define DpaApiLocalRequest()                              DpaApiEntry( param2, param3.low8, DPA_API_LOCAL_REQUEST )
           3178                         ;#define DpaApiSetPeripheralError( error )                 DpaApiEntry( error, param3.low8, DPA_API_SET_PERIPHERAL_ERROR )
           3179                         ;#define DpaApiSendToIFaceMaster( dpaValue, flags )        DpaApiEntry( dpaValue, flags, DPA_API_SEND_TO_IFACEMASTER )
           3180                         ;#define DpaApiSetRfDefaults()                             DpaApiEntry( param2, param3.low8, DPA_API_SET_RF_DEFAULTS )
           3181                         ;#define DpaApiLocalFrc( frcCommand, replyTxPower )        DpaApiEntry( frcCommand, replyTxPower, DPA_API_LOCAL_FRC )
           3182                         ;#define DpaApiCrc8( crc8, data )                          DpaApiEntry( crc8, data, DPA_API_CRC8 )
           3183                         ;#define DpaApiAggregateFrc()                              DpaApiEntry( param2, param3.low8, DPA_API_AGGREGATE_FRC )
           3184                         ;#define DpaApiSetOTK()                                    DpaApiEntry( param2, param3.low8, DPA_API_SET_OTK )
           3185                         ;#define DpaApiI2Cinit( frequency )                        DpaApiEntry( frequency, param3.low8, DPA_API_I2C_INIT )
           3186                         ;#define DpaApiI2Cstart( address )                         DpaApiEntry( address, param3.low8, DPA_API_I2C_START )
           3187                         ;#define DpaApiI2Cwrite( data )                            DpaApiEntry( data, param3.low8, DPA_API_I2C_WRITE )
           3188                         ;#define DpaApiI2Cread( ack )                              DpaApiEntry( ack, param3.low8, DPA_API_I2C_READ )
           3189                         ;#define DpaApiI2Cstop()                                   DpaApiEntry( param2, param3.low8, DPA_API_I2C_STOP )
           3190                         ;#define DpaApiI2CwaitForACK( address )                    DpaApiEntry( address, param3.low8, DPA_API_I2C_WAIT_FOR_ACK )
           3191                         ;#define DpaApiI2Cshutdown()                               DpaApiEntry( param2, param3.low8, DPA_API_I2C_SHUTDOWN )
           3192                         ;#define DpaApiI2CwaitForIdle()                            DpaApiEntry( param2, param3.low8, DPA_API_I2C_WAIT_FOR_IDLE )
           3193                         ;#define DpaApiSleep( wdtcon )                             DpaApiEntry( wdtcon, param3.low8, DPA_API_SLEEP )
           3194                         ;#define DpaApiAfterSleep()                                DpaApiEntry( param2, param3.low8, DPA_API_AFTER_SLEEP )
           3195                         ;#define DpaApiRandom()                                    DpaApiEntry( param2, param3.low8, DPA_API_RANDOM )
           3196                         ;
           3197                         ;#ifdef COORDINATOR_CUSTOM_HANDLER
           3198                         ;#define DpaApiRfTxDpaPacketCoordinator()                  DpaApiEntry( param2, param3.low8, DPA_API_COORDINATOR_RFTX_DPAPACKET )
           3199                         ;#endif
           3200                         ;
           3201                         ;#if !defined( TR7xD )
           3202                         ;#define DpaApiMenu( menu, flags )                         DpaApiEntry( menu, flags, DPA_API_MENU )
           3203                         ;#define DpaApiMenuIndicateResult( ok )                    DpaApiEntry( ok, param3.low8, DPA_API_MENU_INDICATE_RESULT )
           3204                         ;#define DpaApiMenuExecute( menuAndItem )                  DpaApiEntry( menuAndItem, param3.low8, DPA_API_MENU_EXECUTE )
           3205                         ;#define DpaApiDeepSleep( wdtcon )                         DpaApiEntry( wdtcon, param3.low8, DPA_API_DEEP_SLEEP )
           3206                         ;#endif
           3207                         ;
           3208                         ;#define DpaApiLocalFrc_StackSaver( frcCommand, replyTxPower ) \
           3209                         ;  param2 = frcCommand; \
           3210                         ;  param3.low8 = replyTxPower; \
           3211                         ;  W = DPA_API_LOCAL_FRC; \
           3212                         ;  #asm \
           3213                         ;    DW  __MOVLP( DPA_API_ADDRESS >> 8 ); \
           3214                         ;    DW  __CALL( DPA_API_ADDRESS ); \
           3215                         ;    DW  __MOVLP( CUSTOM_HANDLER_ADDRESS >> 8 ); \
           3216                         ;  #endasm \
           3217                         ;
           3218                         ;#define I2CcomputeFrequency( I2Cfrequency)                ( ( ( F_OSC ) / ( ( I2Cfrequency ) * 4 ) ) - 1 )
           3219                         ;
           3220                         ;// Wrapper routines to be called instead of DpaApi??? macros to decrease code size if more than ~2 calls are needed
           3221                         ;void _DpaApiI2Cinit( uns8 frequency );
           3222                         ;void _DpaApiI2Cstart( uns8 address );
           3223                         ;void _DpaApiI2Cwrite( uns8 data );
           3224                         ;uns8 _DpaApiI2Cread( uns8 ack );
           3225                         ;void _DpaApiI2Cstop();
           3226                         ;void _DpaApiI2CwaitForACK( uns8 address );
           3227                         ;void _DpaApiI2Cshutdown();
           3228                         ;void _DpaApiI2CwaitForIdle();
           3229                         ;void _DpaApiSleep( uns8 wdtcon );
           3230                         ;#if !defined( TR7xD )
           3231                         ;void _DpaApiDeepSleep( uns8 wdtcon );
           3232                         ;#endif
           3233                         ;void _DpaApiSleepFirst( uns8 wdtcon );
           3234                         ;void _DpaApiAfterSleep();
           3235                         ;uns8 _DpaApiRandom();
           3236                         ;void _DpaApiSetRfDefaults();
           3237                         ;
           3238                         ;// Helper "multi" function to decrease code size if used more times
           3239                         ;void _DpaApiI2Cwrite0();
           3240                         ;void _DpaApiI2CwriteAndStop( uns8 data );
           3241                         ;uns8 _DpaApiI2CreadACK();
           3242                         ;uns8 _DpaApiI2CreadNACK();
           3243                         ;uns8 _DpaApiI2CreadNACKandStop();
           3244                         ;
           3245                         ;#ifdef COORDINATOR_CUSTOM_HANDLER
           3246                         ;#undef  DpaEvent_Interrupt
           3247                         ;#undef  DpaEvent_BeforeSleep
           3248                         ;#undef  DpaEvent_AfterSleep
           3249                         ;#undef  DpaEvent_FrcValue
           3250                         ;#undef  DpaEvent_FrcResponseTime
           3251                         ;#else
           3252                         ;#undef  DpaEvent_ReceiveDpaResponse
           3253                         ;#undef  DpaEvent_IFaceReceive
           3254                         ;#endif
           3255                         ;
           3256                         ;// To detect overlapping code in case someone would put some code before this header by mistake
           3257                         ;#pragma origin __APPLICATION_ADDRESS
     0000  3258         ORG 0x3A00
           3259                         ;#pragma updateBank 0
           3260                         ;
           3261                         ;//############################################################################################
           3262                         ;// Main IQRF entry point jumps to the main DPA entry point
           3263                         ;void APPLICATION()
           3264                         ;//############################################################################################
           3265                         ;{
           3266 APPLICATION
           3267                         ;  #asm
           3268                         ;    DW  __MOVLP( MAIN_DPA_ADDRESS >> 8 );
3A00 31AC  3269         DW    0x31AC
           3270                         ;  DW  __GOTO( MAIN_DPA_ADDRESS );
3A01 2C04  3271         DW    0x2C04
           3272                         ;  #endasm
           3273                         ;
           3274                         ;#ifndef NO_CUSTOM_DPA_HANDLER
           3275                         ;    // Fake call to force CustomDpaHandler() compilation
           3276                         ;    CustomDpaHandler();
3A02 2220  3277         CALL  CustomDpaHandler
           3278                         ;#endif
           3279                         ;
           3280                         ;  // Fake call to force DpaApiEntry() compilation
           3281                         ;  DpaApiEntry( param2, param3.low8, W );
3A03 2A08  3282         GOTO  DpaApiEntry
           3283                         ;}
           3284                         ;
           3285                         ;//############################################################################################
           3286                         ;// Entry stub to the real DPA API entry
           3287                         ;#pragma origin DPA_API_ADDRESS_ENTRY
     0000  3288         ORG 0x3A08
           3289                         ;uns8  DpaApiEntry( uns8 par1 @ param2, uns8 par2 @ param3.low8, uns8 apiIndex @ W )
           3290                         ;//############################################################################################
           3291                         ;{
           3292 DpaApiEntry
           3293                         ;  #asm
           3294                         ;    DW  __MOVLP( DPA_API_ADDRESS >> 8 );
3A08 31AC  3295         DW    0x31AC
           3296                         ;  DW  __CALL( DPA_API_ADDRESS );
3A09 2400  3297         DW    0x2400
           3298                         ;  DW  __MOVLP( DPA_API_ADDRESS_ENTRY >> 8 );
3A0A 31BA  3299         DW    0x31BA
           3300                         ;  #endasm
           3301                         ;
           3302                         ;    return W;
3A0B 0008  3303         RETURN
           3304                         ;}
           3305                         ;
           3306                         ;//############################################################################################
           3307                         ;#pragma origin DPA_API_ADDRESS_ENTRY + 0x08
     0000  3308         ORG 0x3A10
           3309                         ;
           3310                         ;//############################################################################################
           3311                         ;
           3312                         ;#ifndef NO_CUSTOM_DPA_HANDLER
           3313                         ;// Next comes Custom DPA handler routine
           3314                         ;#pragma origin CUSTOM_HANDLER_ADDRESS
     0000  3315         ORG 0x3A20
           3316                         ;#endif
           3317                         ;
           3318                         ;#pragma updateBank 1
           3319 
           3320   ; FILE C:\customdpa\CustomDpaHandler-Node.c
           3321                         ;// *********************************************************************
           3322                         ;//   Custom DPA Handler code template                                  *
           3323                         ;// *********************************************************************
           3324                         ;// Copyright (c) MICRORISC s.r.o.
           3325                         ;//
           3326                         ;// File:    $RCSfile: CustomDpaHandler-Template-Node.c,v $
           3327                         ;// Version: $Revision: 1.23 $
           3328                         ;// Date:    $Date: 2024/01/22 14:51:08 $
           3329                         ;//
           3330                         ;// Revision history:
           3331                         ;//   2023/03/07  Release for DPA 4.30
           3332                         ;//   2022/10/05  Release for DPA 4.18
           3333                         ;//   2022/02/24  Release for DPA 4.17
           3334                         ;//   2021/08/20  Release for DPA 4.16
           3335                         ;//   2020/09/03  Release for DPA 4.15
           3336                         ;//   2020/02/27  Release for DPA 4.13
           3337                         ;//   2019/01/10  Release for DPA 4.00
           3338                         ;//   2017/08/14  Release for DPA 3.01
           3339                         ;//   2017/03/13  Release for DPA 3.00
           3340                         ;//   2015/08/05  Release for DPA 2.20
           3341                         ;//   2014/10/31  Release for DPA 2.10
           3342                         ;//   2014/04/30  Release for DPA 2.00
           3343                         ;//
           3344                         ;// *********************************************************************
           3345                         ;
           3346                         ;// Online DPA documentation https://doc.iqrf.org/DpaTechGuide/
           3347                         ;
           3348                         ;// Default IQRF include (modify the path according to your setup)
           3349                         ;#include "IQRF.h"
           3350                         ;
           3351                         ;// Default DPA header (modify the path according to your setup)
           3352                         ;#include "DPA.h"
           3353                         ;// Default Custom DPA Handler header (modify the path according to your setup)
           3354                         ;#include "DPAcustomHandler.h"
           3355                         ;
           3356                         ;// Uncomment the following includes if the respective component is needed
           3357                         ;// IQRF standards header (modify the path according to your setup)
           3358                         ;//#include "IQRFstandard.h"
           3359                         ;//#include "IQRF_HWPID.h"
           3360                         ;//#include "NFC.c"
           3361                         ;
           3362                         ;//############################################################################################
           3363                         ;
           3364                         ;// Place for global variables shared among CustomDpaHandler() and other function, otherwise local [static] variables are recommended
           3365                         ;// example: uns8 globalCounter;
           3366                         ;
           3367                         ;// Must be the 1st defined function in the source code in order to be placed at the correct FLASH location!
           3368                         ;//############################################################################################
           3369                         ;// https://doc.iqrf.org/DpaTechGuide/pages/custom-dpa-handler.html
           3370                         ;bit CustomDpaHandler()
           3371                         ;//############################################################################################
           3372                         ;{
           3373 CustomDpaHandler
           3374                         ;  // Handler presence mark
           3375                         ;  clrwdt();
3A20 0064  3376         CLRWDT
           3377                         ;
           3378                         ;  // Place for local static variables used only within CustomDpaHandler() among more events
           3379                         ;  // example: static bit interruptOccured;
           3380                         ;
           3381                         ;  // Detect DPA event to handle (unused event handlers can be commented out or even deleted)
           3382                         ;  switch ( GetDpaEvent() )
3A21 0870  3383         MOVF  userReg0,W
3A22 3A01  3384         XORLW 0x01
3A23 1903  3385         BTFSC 0x03,Zero_
3A24 3240  3386         BRA   m001
3A25 3A03  3387         XORLW 0x03
3A26 1903  3388         BTFSC 0x03,Zero_
3A27 327A  3389         BRA   m008
3A28 3A0A  3390         XORLW 0x0A
3A29 1903  3391         BTFSC 0x03,Zero_
3A2A 3277  3392         BRA   m008
3A2B 3A1C  3393         XORLW 0x1C
3A2C 1903  3394         BTFSC 0x03,Zero_
3A2D 3274  3395         BRA   m008
3A2E 3A17  3396         XORLW 0x17
3A2F 1903  3397         BTFSC 0x03,Zero_
3A30 3235  3398         BRA   m002
3A31 3A0E  3399         XORLW 0x0E
3A32 1903  3400         BTFSC 0x03,Zero_
3A33 326E  3401         BRA   m008
3A34 3A03  3402         XORLW 0x03
3A35 1903  3403         BTFSC 0x03,Zero_
3A36 326B  3404         BRA   m008
3A37 3A0A  3405         XORLW 0x0A
3A38 1903  3406         BTFSC 0x03,Zero_
3A39 3230  3407         BRA   m003
3A3A 3A01  3408         XORLW 0x01
3A3B 1903  3409         BTFSC 0x03,Zero_
3A3C 3265  3410         BRA   m008
3A3D 3A0F  3411         XORLW 0x0F
3A3E 1903  3412         BTFSC 0x03,Zero_
3A3F 3262  3413         BRA   m008
3A40 3A18  3414         XORLW 0x18
3A41 1903  3415         BTFSC 0x03,Zero_
3A42 325F  3416         BRA   m008
3A43 3A14  3417         XORLW 0x14
3A44 1903  3418         BTFSC 0x03,Zero_
3A45 325C  3419         BRA   m008
3A46 3A01  3420         XORLW 0x01
3A47 1903  3421         BTFSC 0x03,Zero_
3A48 3259  3422         BRA   m008
3A49 3A0E  3423         XORLW 0x0E
3A4A 1903  3424         BTFSC 0x03,Zero_
3A4B 3256  3425         BRA   m008
3A4C 3A06  3426         XORLW 0x06
3A4D 1903  3427         BTFSC 0x03,Zero_
3A4E 3253  3428         BRA   m008
3A4F 3A1E  3429         XORLW 0x1E
3A50 1903  3430         BTFSC 0x03,Zero_
3A51 3250  3431         BRA   m008
3A52 3A08  3432         XORLW 0x08
3A53 1903  3433         BTFSC 0x03,Zero_
3A54 324D  3434         BRA   m008
3A55 3A0C  3435         XORLW 0x0C
3A56 1903  3436         BTFSC 0x03,Zero_
3A57 324A  3437         BRA   m008
3A58 3A03  3438         XORLW 0x03
3A59 1903  3439         BTFSC 0x03,Zero_
3A5A 3247  3440         BRA   m008
3A5B 3A01  3441         XORLW 0x01
3A5C 1903  3442         BTFSC 0x03,Zero_
3A5D 3244  3443         BRA   m008
3A5E 3A0F  3444         XORLW 0x0F
3A5F 1903  3445         BTFSC 0x03,Zero_
3A60 3241  3446         BRA   m008
3A61 3A18  3447         XORLW 0x18
3A62 1903  3448         BTFSC 0x03,Zero_
3A63 321C  3449         BRA   m004
3A64 323D  3450         BRA   m008
           3451                         ;  {
           3452                         ;    // -------------------------------------------------
           3453                         ;    case DpaEvent_Interrupt:
           3454                         ;      // Do an extra quick background interrupt work
           3455                         ;      // ! The time spent handling this event is critical.If there is no interrupt to handle return immediately otherwise keep the code as fast as possible.
           3456                         ;      // ! Make sure the event is the 1st case in the main switch statement at the handler routine.This ensures that the event is handled as the 1st one.
           3457                         ;      // ! It is desirable that this event is handled with immediate return even if it is not used by the custom handler because the Interrupt event is raised on every MCU interrupt and the �empty� return handler ensures the shortest possible interrupt routine response time.
           3458                         ;      // ! Only global variables or local ones marked by static keyword can be used to allow reentrancy.
           3459                         ;      // ! Make sure race condition does not occur when accessing those variables at other places.
           3460                         ;      // ! Make sure( inspect.lst file generated by C compiler ) compiler does not create any hidden temporary local variable( occurs when using division, multiplication or bit shifts ) at the event handler code.The name of such variable is usually Cnumbercnt.
           3461                         ;      // ! Do not call any OS functions except setINDFx().
           3462                         ;      // ! Do not use any OS variables especially for writing access.
           3463                         ;      // ! All above rules apply also to any other function being called from the event handler code, although calling any function from Interrupt event is not recommended because of additional MCU stack usage.
           3464                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/EventInterrupt.html
           3465                         ;      return Carry;
3A65 0008  3466 m001    RETURN
           3467                         ;
           3468                         ;      // -------------------------------------------------
           3469                         ;    case DpaEvent_Idle:
           3470                         ;        /*
           3471                         ;        LATC.2 = 0;
           3472                         ;        LATC.5 = 0;
           3473                         ;        waitMS(255);
           3474                         ;        LATC.5 = 1;
           3475                         ;        waitMS(255);
           3476                         ;        LATC.5 = 0;
           3477                         ;        LATC.2 = 0;
           3478                         ;        waitMS(255);
           3479                         ;        LATC.2 = 1;
           3480                         ;        waitMS(255);
           3481                         ;         */
           3482                         ;      // Do a quick background work when RF packet is not received
           3483                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/idle.html
           3484                         ;      break;
           3485                         ;
           3486                         ;      // -------------------------------------------------
           3487                         ;    case DpaEvent_Reset:
           3488                         ;      // Called after module is reset
           3489                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/ResetEvent.html
           3490                         ;
           3491                         ;      //goto DpaHandleReturnTRUE; // return TRUE only if you handle node bonding/unbonding
           3492                         ;      break;
           3493                         ;
           3494                         ;      // -------------------------------------------------
           3495                         ;#if defined( DpaEvent_BondingButton )
           3496                         ;    case DpaEvent_BondingButton:
           3497                         ;      // Called to allow a bonding button customization
           3498                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/bondingbutton.html
           3499                         ;
           3500                         ;      //goto DpaHandleReturnTRUE; // return TRUE to handle bonding button
           3501                         ;      break;
           3502                         ;#endif
           3503                         ;
           3504                         ;      // -------------------------------------------------
           3505                         ;    case DpaEvent_Indicate:
           3506                         ;      // Called to allow a customization of the device indication
           3507                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/IndicateEvent.html
           3508                         ;
           3509                         ;      //goto DpaHandleReturnTRUE; // return TRUE to skip default indication
           3510                         ;      break;
           3511                         ;
           3512                         ;      // -------------------------------------------------
           3513                         ;    case DpaEvent_Init:
           3514                         ;      // Do a one time initialization before main loop starts
           3515                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/init.html
           3516                         ;        TRISC.2 = 0;
3A66 0140  3517 m002    MOVLB 0x00
3A67 1113  3518         BCF   TRISC,2
           3519                         ;        TRISC.5 = 0;
3A68 1293  3520         BCF   TRISC,5
           3521                         ;      break;
3A69 3238  3522         BRA   m008
           3523                         ;
           3524                         ;      // -------------------------------------------------
           3525                         ;    case DpaEvent_ReceiveDpaRequest:
           3526                         ;      // Called after DPA request was received
           3527                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/receivedparequest.html
           3528                         ;
           3529                         ;      //goto DpaHandleReturnTRUE; // return TRUE to skip default processing
           3530                         ;      break;
           3531                         ;
           3532                         ;      // -------------------------------------------------
           3533                         ;    case DpaEvent_BeforeSendingDpaResponse:
           3534                         ;      // Called before sending DPA response back to originator of DPA response
           3535                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/beforesendingdparesponse.html
           3536                         ;      break;
           3537                         ;
           3538                         ;      // -------------------------------------------------
           3539                         ;    case DpaEvent_Notification:
           3540                         ;        if ( _PNUM == PNUM_RAM && _PCMD == CMD_RAM_WRITE )
3A6A 0145  3541 m003    MOVLB 0x05
3A6B 082E  3542         MOVF  PNUM,W
3A6C 3A05  3543         XORLW 0x05
3A6D 1D03  3544         BTFSS 0x03,Zero_
3A6E 3233  3545         BRA   m008
3A6F 0B2F  3546         DECFSZ PCMD,W
3A70 3231  3547         BRA   m008
           3548                         ;        {
           3549                         ;            LATC.2 = PeripheralRam[0];
3A71 014C  3550         MOVLB 0x0C
3A72 0820  3551         MOVF  PeripheralRam,W
3A73 0140  3552         MOVLB 0x00
3A74 1D03  3553         BTFSS 0x03,Zero_
3A75 1518  3554         BSF   LATC,2
3A76 1903  3555         BTFSC 0x03,Zero_
3A77 1118  3556         BCF   LATC,2
           3557                         ;            LATC.5 = PeripheralRam[1];
3A78 014C  3558         MOVLB 0x0C
3A79 0821  3559         MOVF  PeripheralRam+1,W
3A7A 0140  3560         MOVLB 0x00
3A7B 1D03  3561         BTFSS 0x03,Zero_
3A7C 1698  3562         BSF   LATC,5
3A7D 1903  3563         BTFSC 0x03,Zero_
3A7E 1298  3564         BCF   LATC,5
           3565                         ;            /*
           3566                         ;            uns8 counter = 0;
           3567                         ;            while (counter < PeripheralRam[0]) {
           3568                         ;                setLEDR();
           3569                         ;                waitMS(PeripheralRam[1]);
           3570                         ;                stopLEDR();
           3571                         ;                waitMS(PeripheralRam[2]);
           3572                         ;                counter++;
           3573                         ;            }
           3574                         ;            counter = 0;
           3575                         ;            while (counter < PeripheralRam[3]) {
           3576                         ;                setLEDG();
           3577                         ;                waitMS(PeripheralRam[4]);
           3578                         ;                stopLEDG();
           3579                         ;                waitMS(PeripheralRam[5]);
           3580                         ;                counter++;
           3581                         ;            }*/
           3582                         ;        }
           3583                         ;      // Called after DPA request was processed and after DPA response was sent
           3584                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/notification.html
           3585                         ;      break;
3A7F 3222  3586         BRA   m008
           3587                         ;
           3588                         ;      // -------------------------------------------------
           3589                         ;    case DpaEvent_AfterRouting:
           3590                         ;      // Called after Notification and after routing of the DPA response was finished
           3591                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/afterrouting.html
           3592                         ;      break;
           3593                         ;
           3594                         ;      // -------------------------------------------------
           3595                         ;    case DpaEvent_FrcValue:
           3596                         ;      // Called to get FRC value
           3597                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/frcvalue.html
           3598                         ;      break;
           3599                         ;
           3600                         ;      // -------------------------------------------------
           3601                         ;    case DpaEvent_FrcResponseTime:
           3602                         ;      // Called to get FRC response time
           3603                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/frcresponsetime.html
           3604                         ;      break;
           3605                         ;
           3606                         ;      // -------------------------------------------------
           3607                         ;    case DpaEvent_BeforeSleep:
           3608                         ;      // Called before going to sleep
           3609                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/beforesleep.html
           3610                         ;      break;
           3611                         ;
           3612                         ;      // -------------------------------------------------
           3613                         ;    case DpaEvent_AfterSleep:
           3614                         ;      // Called after woken up after sleep
           3615                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/aftersleep.html
           3616                         ;      break;
           3617                         ;
           3618                         ;      // -------------------------------------------------
           3619                         ;    case DpaEvent_DisableInterrupts:
           3620                         ;      // Called when device needs all hardware interrupts to be disabled (before Reset, Restart, LoadCode, Remove bond and run RFPGM)
           3621                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/eventDisableInterrupts.html
           3622                         ;      break;
           3623                         ;
           3624                         ;      // -------------------------------------------------
           3625                         ;    case DpaEvent_PeerToPeer:
           3626                         ;      // Called when peer-to-peer (non-networking) packet is received
           3627                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/peertopeer.html
           3628                         ;      break;
           3629                         ;
           3630                         ;      // -------------------------------------------------
           3631                         ;    case DpaEvent_UserDpaValue:
           3632                         ;      // Called when DPA is required to return User defined DPA value in the response
           3633                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/userdpavalue.html
           3634                         ;      break;
           3635                         ;
           3636                         ;      // -------------------------------------------------
           3637                         ;#ifdef DpaEvent_InStandby
           3638                         ;    case DpaEvent_InStandby:
           3639                         ;      // Called to set WDT during Standby
           3640                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/instandby.html
           3641                         ;
           3642                         ;      //goto DpaHandleReturnTRUE; // return TRUE to indicate that userReg1 contains WDT settings
           3643                         ;      break;
           3644                         ;#endif
           3645                         ;
           3646                         ;      // -------------------------------------------------
           3647                         ;    case DpaEvent_VerifyLocalFrc:
           3648                         ;      // Called to verify local FRC command
           3649                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/verifylocalfrc.html
           3650                         ;
           3651                         ;      //goto DpaHandleReturnTRUE; // return TRUE allow FRC command
           3652                         ;      break;
           3653                         ;
           3654                         ;      // -------------------------------------------------
           3655                         ;#ifdef DpaEvent_MenuActivated
           3656                         ;    case DpaEvent_MenuActivated:
           3657                         ;      // Called to customize DPA menu
           3658                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/menuactivated.html
           3659                         ;
           3660                         ;      //goto DpaHandleReturnTRUE; // return TRUE to allow customizing menu specified by userReg1
           3661                         ;      break;
           3662                         ;#endif
           3663                         ;
           3664                         ;      // -------------------------------------------------
           3665                         ;#ifdef DpaEvent_MenuItemSelected
           3666                         ;    case DpaEvent_MenuItemSelected:
           3667                         ;      // Called to indicate "OK" or "Error" for selected menu item
           3668                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/menuitemselected.html
           3669                         ;
           3670                         ;      //goto DpaHandleReturnTRUE; // return TRUE to indicate "OK" for menu item specified by userReg1, otherwise to indicate Error
           3671                         ;      break;
           3672                         ;#endif
           3673                         ;
           3674                         ;      // -------------------------------------------------
           3675                         ;#ifdef DpaEvent_MenuItemFinalize
           3676                         ;    case DpaEvent_MenuItemFinalize:
           3677                         ;      // Called to finalize menu item execution
           3678                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/menuitemfinalize.html
           3679                         ;
           3680                         ;      break;
           3681                         ;#endif
           3682                         ;
           3683                         ;      // -------------------------------------------------
           3684                         ;    case DpaEvent_DpaRequest:
           3685                         ;      // Called to interpret DPA request for peripherals
           3686                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/EventDpaRequest.html
           3687                         ;      IfDpaEnumPeripherals_Else_PeripheralInfo_Else_PeripheralRequest()
3A80 0145  3688 m004    MOVLB 0x05
3A81 08A1  3689         MOVF  DLEN,1
3A82 1D03  3690         BTFSS 0x03,Zero_
3A83 3216  3691         BRA   m007
3A84 082F  3692         MOVF  PCMD,W
3A85 3A3F  3693         XORLW 0x3F
3A86 1D03  3694         BTFSS 0x03,Zero_
3A87 3212  3695         BRA   m007
3A88 0F2E  3696         INCFSZ PNUM,W
3A89 3205  3697         BRA   m006
           3698                         ;      {
           3699                         ;        // -------------------------------------------------
           3700                         ;        // Peripheral enumeration
           3701                         ;        // https://doc.iqrf.org/DpaTechGuide/pages/enumerate-peripherals.html
           3702                         ;
           3703                         ;        _DpaMessage.EnumPeripheralsAnswer.UserPerNr |= 0; // ?
           3704                         ;        // FlagUserPer( _DpaMessage.EnumPeripheralsAnswer.UserPer, PNUM_USER + 0 ); // ?
           3705                         ;        _DpaMessage.EnumPeripheralsAnswer.HWPID |= 0x000F; // ????
3A8A 300F  3706         MOVLW 0x0F
3A8B 0149  3707         MOVLB 0x09
3A8C 04A7  3708         IORWF DpaRfMessage+7,1
           3709                         ;        _DpaMessage.EnumPeripheralsAnswer.HWPIDver |= 0; // ????
           3710                         ;
           3711                         ;DpaHandleReturnTRUE:
           3712                         ;        return TRUE;
3A8D 1403  3713 m005    BSF   0x03,Carry
3A8E 0008  3714         RETURN
           3715                         ;      }
           3716                         ;      else
           3717                         ;      {
           3718                         ;      // -------------------------------------------------
           3719                         ;      // Get information about peripheral
           3720                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/get-peripheral-info.html
           3721                         ;
           3722                         ;      if ( _PNUM == PNUM_USER + 0 ) // ?
3A8F 0145  3723 m006    MOVLB 0x05
3A90 082E  3724         MOVF  PNUM,W
3A91 3A20  3725         XORLW 0x20
3A92 1D03  3726         BTFSS 0x03,Zero_
3A93 320E  3727         BRA   m008
           3728                         ;      {
           3729                         ;        _DpaMessage.PeripheralInfoAnswer.PerT = 0; // PERIPHERAL_TYPE_?
3A94 0149  3730         MOVLB 0x09
3A95 01A1  3731         CLRF  DpaRfMessage+1
           3732                         ;        _DpaMessage.PeripheralInfoAnswer.PerTE = 0; // PERIPHERAL_TYPE_EXTENDED_?
3A96 01A0  3733         CLRF  DpaRfMessage
           3734                         ;        _DpaMessage.PeripheralInfoAnswer.Par1 = 0; // ?
3A97 01A2  3735         CLRF  DpaRfMessage+2
           3736                         ;        _DpaMessage.PeripheralInfoAnswer.Par2 = 0; // ?
3A98 01A3  3737         CLRF  DpaRfMessage+3
           3738                         ;        goto DpaHandleReturnTRUE;
3A99 33F3  3739         BRA   m005
           3740                         ;      }
           3741                         ;
           3742                         ;      break;
           3743                         ;      }
           3744                         ;
           3745                         ;      // -------------------------------------------------
           3746                         ;      // Handle peripheral command
           3747                         ;      // https://doc.iqrf.org/DpaTechGuide/pages/handle-peripheral-request.html
           3748                         ;
           3749                         ;      if ( _PNUM == PNUM_USER + 0 ) // ?
3A9A 0145  3750 m007    MOVLB 0x05
3A9B 082E  3751         MOVF  PNUM,W
3A9C 3A20  3752         XORLW 0x20
3A9D 1D03  3753         BTFSS 0x03,Zero_
3A9E 3203  3754         BRA   m008
           3755                         ;      {
           3756                         ;        if ( _PCMD == 0 ) // ????
3A9F 08AF  3757         MOVF  PCMD,1
3AA0 1903  3758         BTFSC 0x03,Zero_
           3759                         ;        {
           3760                         ;          goto DpaHandleReturnTRUE;
3AA1 33EB  3761         BRA   m005
           3762                         ;        }
           3763                         ;      }
           3764                         ;
           3765                         ;      break;
           3766                         ;  }
           3767                         ;
           3768                         ;DpaHandleReturnFALSE:
           3769                         ;  return FALSE;
3AA2 1003  3770 m008    BCF   0x03,Carry
3AA3 0008  3771         RETURN
           3772 
           3773   ; FILE C:\customdpa\DPAcustomHandler.h
           3774                         ;// *********************************************************************
           3775                         ;//   Main Custom DPA Handler header                                    *
           3776                         ;// *********************************************************************
           3777                         ;// Copyright (c) MICRORISC s.r.o.
           3778                         ;//
           3779                         ;// File:    $RCSfile: DPAcustomHandler.h,v $
           3780                         ;// Version: $Revision: 1.167 $
           3781                         ;// Date:    $Date: 2024/12/05 09:28:58 $
           3782                         ;//
           3783                         ;// Revision history:
           3784                         ;//   2024/11/05  Release for DPA 4.32
           3785                         ;//   2024/04/17  Release for DPA 4.31
           3786                         ;//   2023/03/07  Release for DPA 4.30
           3787                         ;//   2022/10/05  Release for DPA 4.18
           3788                         ;//   2022/02/24  Release for DPA 4.17
           3789                         ;//   2021/08/20  Release for DPA 4.16
           3790                         ;//   2020/09/03  Release for DPA 4.15
           3791                         ;//   2020/04/03  Release for DPA 4.14
           3792                         ;//   2020/02/27  Release for DPA 4.13
           3793                         ;//   2020/01/09  Release for DPA 4.12
           3794                         ;//   2019/12/11  Release for DPA 4.11
           3795                         ;//   2019/10/09  Release for DPA 4.10
           3796                         ;//   2019/06/12  Release for DPA 4.03
           3797                         ;//   2019/06/03  Release for DPA 4.02
           3798                         ;//   2019/03/07  Release for DPA 4.01
           3799                         ;//   2019/01/10  Release for DPA 4.00
           3800                         ;//   2018/10/25  Release for DPA 3.03
           3801                         ;//   2017/11/16  Release for DPA 3.02
           3802                         ;//   2017/08/14  Release for DPA 3.01
           3803                         ;//   2017/03/13  Release for DPA 3.00
           3804                         ;//   2016/09/12  Release for DPA 2.28
           3805                         ;//   2016/04/14  Release for DPA 2.27
           3806                         ;//   2016/03/03  Release for DPA 2.26
           3807                         ;//   2016/01/21  Release for DPA 2.25
           3808                         ;//   2015/12/01  Release for DPA 2.24
           3809                         ;//   2015/10/23  Release for DPA 2.23
           3810                         ;//   2015/09/25  Release for DPA 2.22
           3811                         ;//   2015/09/03  Release for DPA 2.21
           3812                         ;//   2015/08/05  Release for DPA 2.20
           3813                         ;//   2014/10/31  Release for DPA 2.10
           3814                         ;//   2014/04/30  Release for DPA 2.00
           3815                         ;//   2013/10/03  Release for DPA 1.00
           3816                         ;//
           3817                         ;// *********************************************************************
           3818                         ;
           3819                         ;// Online DPA documentation https://doc.iqrf.org/DpaTechGuide/
           3820                         ;// IQRF Standards documentation https://doc.iqrf.org/
           3821                         ;
           3822                         ;#ifndef _CUSTOM_DPA_HANDLER_
           3823                         ;#define _CUSTOM_DPA_HANDLER_
           3824                         ;
           3825                         ;//############################################################################################
           3826                         ;// 1st include
           3827                         ;
           3828                         ;// Custom DPA Handler routine declaration
           3829                         ;bit CustomDpaHandler();
           3830                         ;
           3831                         ;// Various DPA flags shared between DPA and Custom DPA Handler
           3832                         ;uns8 DpaFlags @ usedBank4[0];
           3833                         ;
           3834                         ;// [C][N] TRUE if I2C timeout occurred at the last DpaApiI2C?() call
           3835                         ;bit I2CwasTimeout @ DpaFlags.0;
           3836                         ;// [N] Flag for the 1st DpaApiSleep
           3837                         ;bit FirstDpaApiSleep @ DpaFlags.1;
           3838                         ;
           3839                         ;#ifdef COORDINATOR_CUSTOM_HANDLER
           3840                         ;// [C] TRUE if interface master is not connected (detected)
           3841                         ;bit IFaceMasterNotConnected @ DpaFlags.2;
           3842                         ;#endif
           3843                         ;// [N] DPA by interface notification is sent also when there was a "reading" like DPA request
           3844                         ;bit EnableIFaceNotificationOnRead @ DpaFlags.3;
           3845                         ;// [N] TRUE when node was just bonded using default bonding procedure
           3846                         ;bit NodeWasBonded @ DpaFlags.4;
           3847                         ;// [N] When TRUE, then next call of DpaApiRfTxDpaPacket sends non-routed packet
           3848                         ;bit NonroutedRfTxDpaPacket @ DpaFlags.7;
           3849                         ;
           3850                         ;// [C] Ticks (decrementing) counter usable for timing in the coordinator's Customer DPA Handler
           3851                         ;uns16 DpaTicks @ usedBank4[1];
           3852                         ;// [N] toutRF for LP mode, read from configuration memory after reset
           3853                         ;uns8 LPtoutRF @ usedBank4[3];
           3854                         ;// DPA Request/Response HWPID
           3855                         ;uns16 _HWPID @ usedBank4[4];
           3856                         ;// Identifies type of reset (stored at UserReg0 upon module reset). See Reset chapter at IQRF User's Guide for more information
           3857                         ;uns8 ResetType @ usedBank4[6];
           3858                         ;// User DPA Values to return
           3859                         ;uns8 UserDpaValue @ usedBank4[7];
           3860                         ;// Network depth of the DPA request/response, increases on bridging, decreases on back-bridging
           3861                         ;uns8 NetDepth @ usedBank4[8];
           3862                         ;// TRUE when node was at DPA Service Mode after last boot
           3863                         ;bit DSMactivated @ usedBank4[9].0;
           3864                         ;// If set to TRUE, then LP RX mode in the main loop can be terminated by pin, see _RLPMAT
           3865                         ;bit LpRxPinTerminate @ usedBank4[9].1;
           3866                         ;// If set to TRUE, then [C] executes asynchronous DPA requests received from [N]
           3867                         ;bit AsyncReqAtCoordinator @ usedBank4[9].2;
           3868                         ;// RX filter used at the DPA main loop checkRF call
           3869                         ;uns8 RxFilter @ usedBank4[11];
           3870                         ;// Countdown variable for button bonding before going to deep sleep
           3871                         ;uns16 BondingSleepCountdown @ usedBank4[12];
           3872                         ;#define BONDING_SLEEP_COUNTDOWN_UNIT  290
           3873                         ;// Non-zero pseudo-random value, read-only, updated on every Reset and Idle event, at [N] only.
           3874                         ;uns16 Random @ usedBank4[14];
           3875                         ;// DPA value from the received packet or just to be sent to the interface.
           3876                         ;uns8 DpaValue @ usedBank4[16];
           3877                         ;// If non-zero then timeout value for DpaApiI2C?() calls
           3878                         ;uns8 I2Ctimeout @ usedBank4[17];
           3879                         ;
           3880                         ;// Macro to return an error from the peripheral handler. If the code size is not an issue this macro is the right choice.
           3881                         ;#define DpaApiReturnPeripheralError(error) do { \
           3882                         ;    DpaApiSetPeripheralError( error ); \
           3883                         ;    return Carry; \
           3884                         ;  } while( 0 )
           3885                         ;
           3886                         ;// DPA API functions, see documentation for details
           3887                         ;#define DpaApiRfTxDpaPacket( dpaValue, netDepthAndFlags ) DpaApiEntry( dpaValue, netDepthAndFlags, DPA_API_RFTX_DPAPACKET )
           3888                         ;#define DpaApiReadConfigByte( index )                     DpaApiEntry( index, param3.low8, DPA_API_READ_CONFIG_BYTE )
           3889                         ;#define DpaApiLocalRequest()                              DpaApiEntry( param2, param3.low8, DPA_API_LOCAL_REQUEST )
           3890                         ;#define DpaApiSetPeripheralError( error )                 DpaApiEntry( error, param3.low8, DPA_API_SET_PERIPHERAL_ERROR )
           3891                         ;#define DpaApiSendToIFaceMaster( dpaValue, flags )        DpaApiEntry( dpaValue, flags, DPA_API_SEND_TO_IFACEMASTER )
           3892                         ;#define DpaApiSetRfDefaults()                             DpaApiEntry( param2, param3.low8, DPA_API_SET_RF_DEFAULTS )
           3893                         ;#define DpaApiLocalFrc( frcCommand, replyTxPower )        DpaApiEntry( frcCommand, replyTxPower, DPA_API_LOCAL_FRC )
           3894                         ;#define DpaApiCrc8( crc8, data )                          DpaApiEntry( crc8, data, DPA_API_CRC8 )
           3895                         ;#define DpaApiAggregateFrc()                              DpaApiEntry( param2, param3.low8, DPA_API_AGGREGATE_FRC )
           3896                         ;#define DpaApiSetOTK()                                    DpaApiEntry( param2, param3.low8, DPA_API_SET_OTK )
           3897                         ;#define DpaApiI2Cinit( frequency )                        DpaApiEntry( frequency, param3.low8, DPA_API_I2C_INIT )
           3898                         ;#define DpaApiI2Cstart( address )                         DpaApiEntry( address, param3.low8, DPA_API_I2C_START )
           3899                         ;#define DpaApiI2Cwrite( data )                            DpaApiEntry( data, param3.low8, DPA_API_I2C_WRITE )
           3900                         ;#define DpaApiI2Cread( ack )                              DpaApiEntry( ack, param3.low8, DPA_API_I2C_READ )
           3901                         ;#define DpaApiI2Cstop()                                   DpaApiEntry( param2, param3.low8, DPA_API_I2C_STOP )
           3902                         ;#define DpaApiI2CwaitForACK( address )                    DpaApiEntry( address, param3.low8, DPA_API_I2C_WAIT_FOR_ACK )
           3903                         ;#define DpaApiI2Cshutdown()                               DpaApiEntry( param2, param3.low8, DPA_API_I2C_SHUTDOWN )
           3904                         ;#define DpaApiI2CwaitForIdle()                            DpaApiEntry( param2, param3.low8, DPA_API_I2C_WAIT_FOR_IDLE )
           3905                         ;#define DpaApiSleep( wdtcon )                             DpaApiEntry( wdtcon, param3.low8, DPA_API_SLEEP )
           3906                         ;#define DpaApiAfterSleep()                                DpaApiEntry( param2, param3.low8, DPA_API_AFTER_SLEEP )
           3907                         ;#define DpaApiRandom()                                    DpaApiEntry( param2, param3.low8, DPA_API_RANDOM )
           3908                         ;
           3909                         ;#ifdef COORDINATOR_CUSTOM_HANDLER
           3910                         ;#define DpaApiRfTxDpaPacketCoordinator()                  DpaApiEntry( param2, param3.low8, DPA_API_COORDINATOR_RFTX_DPAPACKET )
           3911                         ;#endif
           3912                         ;
           3913                         ;#if !defined( TR7xD )
           3914                         ;#define DpaApiMenu( menu, flags )                         DpaApiEntry( menu, flags, DPA_API_MENU )
           3915                         ;#define DpaApiMenuIndicateResult( ok )                    DpaApiEntry( ok, param3.low8, DPA_API_MENU_INDICATE_RESULT )
           3916                         ;#define DpaApiMenuExecute( menuAndItem )                  DpaApiEntry( menuAndItem, param3.low8, DPA_API_MENU_EXECUTE )
           3917                         ;#define DpaApiDeepSleep( wdtcon )                         DpaApiEntry( wdtcon, param3.low8, DPA_API_DEEP_SLEEP )
           3918                         ;#endif
           3919                         ;
           3920                         ;#define DpaApiLocalFrc_StackSaver( frcCommand, replyTxPower ) \
           3921                         ;  param2 = frcCommand; \
           3922                         ;  param3.low8 = replyTxPower; \
           3923                         ;  W = DPA_API_LOCAL_FRC; \
           3924                         ;  #asm \
           3925                         ;    DW  __MOVLP( DPA_API_ADDRESS >> 8 ); \
           3926                         ;    DW  __CALL( DPA_API_ADDRESS ); \
           3927                         ;    DW  __MOVLP( CUSTOM_HANDLER_ADDRESS >> 8 ); \
           3928                         ;  #endasm \
           3929                         ;
           3930                         ;#define I2CcomputeFrequency( I2Cfrequency)                ( ( ( F_OSC ) / ( ( I2Cfrequency ) * 4 ) ) - 1 )
           3931                         ;
           3932                         ;// Wrapper routines to be called instead of DpaApi??? macros to decrease code size if more than ~2 calls are needed
           3933                         ;void _DpaApiI2Cinit( uns8 frequency );
           3934                         ;void _DpaApiI2Cstart( uns8 address );
           3935                         ;void _DpaApiI2Cwrite( uns8 data );
           3936                         ;uns8 _DpaApiI2Cread( uns8 ack );
           3937                         ;void _DpaApiI2Cstop();
           3938                         ;void _DpaApiI2CwaitForACK( uns8 address );
           3939                         ;void _DpaApiI2Cshutdown();
           3940                         ;void _DpaApiI2CwaitForIdle();
           3941                         ;void _DpaApiSleep( uns8 wdtcon );
           3942                         ;#if !defined( TR7xD )
           3943                         ;void _DpaApiDeepSleep( uns8 wdtcon );
           3944                         ;#endif
           3945                         ;void _DpaApiSleepFirst( uns8 wdtcon );
           3946                         ;void _DpaApiAfterSleep();
           3947                         ;uns8 _DpaApiRandom();
           3948                         ;void _DpaApiSetRfDefaults();
           3949                         ;
           3950                         ;// Helper "multi" function to decrease code size if used more times
           3951                         ;void _DpaApiI2Cwrite0();
           3952                         ;void _DpaApiI2CwriteAndStop( uns8 data );
           3953                         ;uns8 _DpaApiI2CreadACK();
           3954                         ;uns8 _DpaApiI2CreadNACK();
           3955                         ;uns8 _DpaApiI2CreadNACKandStop();
           3956                         ;
           3957                         ;#ifdef COORDINATOR_CUSTOM_HANDLER
           3958                         ;#undef  DpaEvent_Interrupt
           3959                         ;#undef  DpaEvent_BeforeSleep
           3960                         ;#undef  DpaEvent_AfterSleep
           3961                         ;#undef  DpaEvent_FrcValue
           3962                         ;#undef  DpaEvent_FrcResponseTime
           3963                         ;#else
           3964                         ;#undef  DpaEvent_ReceiveDpaResponse
           3965                         ;#undef  DpaEvent_IFaceReceive
           3966                         ;#endif
           3967                         ;
           3968                         ;// To detect overlapping code in case someone would put some code before this header by mistake
           3969                         ;#pragma origin __APPLICATION_ADDRESS
           3970                         ;#pragma updateBank 0
           3971                         ;
           3972                         ;//############################################################################################
           3973                         ;// Main IQRF entry point jumps to the main DPA entry point
           3974                         ;void APPLICATION()
           3975                         ;//############################################################################################
           3976                         ;{
           3977                         ;  #asm
           3978                         ;    DW  __MOVLP( MAIN_DPA_ADDRESS >> 8 );
           3979                         ;  DW  __GOTO( MAIN_DPA_ADDRESS );
           3980                         ;  #endasm
           3981                         ;
           3982                         ;#ifndef NO_CUSTOM_DPA_HANDLER
           3983                         ;    // Fake call to force CustomDpaHandler() compilation
           3984                         ;    CustomDpaHandler();
           3985                         ;#endif
           3986                         ;
           3987                         ;  // Fake call to force DpaApiEntry() compilation
           3988                         ;  DpaApiEntry( param2, param3.low8, W );
           3989                         ;}
           3990                         ;
           3991                         ;//############################################################################################
           3992                         ;// Entry stub to the real DPA API entry
           3993                         ;#pragma origin DPA_API_ADDRESS_ENTRY
           3994                         ;uns8  DpaApiEntry( uns8 par1 @ param2, uns8 par2 @ param3.low8, uns8 apiIndex @ W )
           3995                         ;//############################################################################################
           3996                         ;{
           3997                         ;  #asm
           3998                         ;    DW  __MOVLP( DPA_API_ADDRESS >> 8 );
           3999                         ;  DW  __CALL( DPA_API_ADDRESS );
           4000                         ;  DW  __MOVLP( DPA_API_ADDRESS_ENTRY >> 8 );
           4001                         ;  #endasm
           4002                         ;
           4003                         ;    return W;
           4004                         ;}
           4005                         ;
           4006                         ;//############################################################################################
           4007                         ;#pragma origin DPA_API_ADDRESS_ENTRY + 0x08
           4008                         ;
           4009                         ;//############################################################################################
           4010                         ;
           4011                         ;#ifndef NO_CUSTOM_DPA_HANDLER
           4012                         ;// Next comes Custom DPA handler routine
           4013                         ;#pragma origin CUSTOM_HANDLER_ADDRESS
           4014                         ;#endif
           4015                         ;
           4016                         ;#pragma updateBank 1
           4017                         ;
           4018                         ;//############################################################################################
           4019                         ;#else // _CUSTOM_DPA_HANDLER_
           4020                         ;//############################################################################################
           4021                         ;// 2nd include
           4022                         ;
           4023                         ;#ifndef NO_CUSTOM_DPA_HANDLER
           4024                         ;
           4025                         ;// Library wrappers and helpers to decrease code size
           4026                         ;//############################################################################################
           4027                         ;#pragma library 1
           4028                         ;//############################################################################################
           4029                         ;uns8 _DpaApiUserBank_01( uns8 apiIndex @ W )
           4030                         ;//############################################################################################
           4031                         ;{
           4032 _DpaApiUserBank_01
           4033                         ;#pragma updateBank exit = UserBank_01
           4034                         ;  return DpaApiEntry( param2, param3.low8, apiIndex );
           4035                         ;}
           4036                         ;//############################################################################################
           4037                         ;void _DpaApiI2Cinit( uns8 frequency @ W )
           4038                         ;//############################################################################################
           4039                         ;{
           4040 _DpaApiI2Cinit
           4041                         ;#pragma updateBank exit = UserBank_01
           4042                         ;  param2 = frequency;
           4043                         ;  _DpaApiUserBank_01( DPA_API_I2C_INIT );
           4044                         ;}
           4045                         ;//############################################################################################
           4046                         ;void _DpaApiI2Cstart( uns8 address @ W )
           4047                         ;//############################################################################################
           4048                         ;{
           4049 _DpaApiI2Cstart
           4050                         ;#pragma updateBank exit = UserBank_01
           4051                         ;  param2 = address;
           4052                         ;  _DpaApiUserBank_01( DPA_API_I2C_START );
           4053                         ;}
           4054                         ;//############################################################################################
           4055                         ;void _DpaApiI2Cwrite0()
           4056                         ;//############################################################################################
           4057                         ;{
           4058 _DpaApiI2Cwrite0
           4059                         ;#pragma updateBank exit = UserBank_01
           4060                         ;  _DpaApiI2Cwrite( 0 );
           4061                         ;}
           4062                         ;//############################################################################################
           4063                         ;void _DpaApiI2Cwrite( uns8 data @ W )
           4064                         ;//############################################################################################
           4065                         ;{
           4066 _DpaApiI2Cwrite
           4067                         ;#pragma updateBank exit = UserBank_01
           4068                         ;  param2 = data;
           4069                         ;  _DpaApiUserBank_01( DPA_API_I2C_WRITE );
           4070                         ;}
           4071                         ;//############################################################################################
           4072                         ;uns8 _DpaApiI2CreadNACKandStop()
           4073                         ;//############################################################################################
           4074                         ;{
           4075 _DpaApiI2CreadNACKandStop
           4076                         ;#pragma updateBank exit = UserBank_01
           4077                         ;  param2 = _DpaApiI2CreadNACK();
           4078                         ;  _DpaApiI2Cstop(); /* Must not use param2 */
           4079                         ;  return param2;
           4080                         ;}
           4081                         ;//############################################################################################
           4082                         ;uns8 _DpaApiI2CreadACK()
           4083                         ;//############################################################################################
           4084                         ;{
           4085 _DpaApiI2CreadACK
           4086                         ;#pragma updateBank exit = UserBank_01
           4087                         ;  return _DpaApiI2Cread( 1 );
           4088                         ;}
           4089                         ;//############################################################################################
           4090                         ;uns8 _DpaApiI2CreadNACK()
           4091                         ;//############################################################################################
           4092                         ;{
           4093 _DpaApiI2CreadNACK
           4094                         ;#pragma updateBank exit = UserBank_01
           4095                         ;  return _DpaApiI2Cread( 0 );
           4096                         ;}
           4097                         ;//############################################################################################
           4098                         ;uns8 _DpaApiI2Cread( uns8 ack @ W )
           4099                         ;//############################################################################################
           4100                         ;{
           4101 _DpaApiI2Cread
           4102                         ;#pragma updateBank exit = UserBank_01
           4103                         ;  param2 = ack;
           4104                         ;  return _DpaApiUserBank_01( DPA_API_I2C_READ );
           4105                         ;}
           4106                         ;//############################################################################################
           4107                         ;void _DpaApiI2CwriteAndStop( uns8 data @ W )
           4108                         ;//############################################################################################
           4109                         ;{
           4110 _DpaApiI2CwriteAndStop
           4111                         ;#pragma updateBank exit = UserBank_01
           4112                         ;  _DpaApiI2Cwrite( data );
           4113                         ;  _DpaApiI2Cstop();
           4114                         ;}
           4115                         ;//############################################################################################
           4116                         ;void _DpaApiI2Cstop()
           4117                         ;//############################################################################################
           4118                         ;{
           4119 _DpaApiI2Cstop
           4120                         ;#pragma updateBank exit = UserBank_01
           4121                         ;  _DpaApiUserBank_01( DPA_API_I2C_STOP );
           4122                         ;}
           4123                         ;//############################################################################################
           4124                         ;void _DpaApiI2CwaitForACK( uns8 address @ W )
           4125                         ;//############################################################################################
           4126                         ;{
           4127 _DpaApiI2CwaitForACK
           4128                         ;#pragma updateBank exit = UserBank_01
           4129                         ;  DpaApiI2CwaitForACK( address );
           4130                         ;}
           4131                         ;//############################################################################################
           4132                         ;void _DpaApiI2Cshutdown()
           4133                         ;//############################################################################################
           4134                         ;{
           4135 _DpaApiI2Cshutdown
           4136                         ;#pragma updateBank exit = UserBank_01
           4137                         ;  _DpaApiUserBank_01( DPA_API_I2C_SHUTDOWN );
           4138                         ;}
           4139                         ;//############################################################################################
           4140                         ;void _DpaApiI2CwaitForIdle()
           4141                         ;//############################################################################################
           4142                         ;{
           4143 _DpaApiI2CwaitForIdle
           4144                         ;#pragma updateBank exit = UserBank_01
           4145                         ;  _DpaApiUserBank_01( DPA_API_I2C_WAIT_FOR_IDLE );
           4146                         ;}
           4147                         ;//############################################################################################
           4148                         ;void _DpaApiSleep( uns8 wdtcon @ W )
           4149                         ;//############################################################################################
           4150                         ;{
           4151 _DpaApiSleep
           4152                         ;#pragma updateBank exit = UserBank_01
           4153                         ;  param2 = wdtcon;
           4154                         ;  _DpaApiUserBank_01( DPA_API_SLEEP );
           4155                         ;}
           4156                         ;#if !defined( TR7xD )
           4157                         ;//############################################################################################
           4158                         ;void _DpaApiDeepSleep( uns8 wdtcon @ W )
           4159                         ;//############################################################################################
           4160                         ;{
           4161 _DpaApiDeepSleep
           4162                         ;#pragma updateBank exit = UserBank_01
           4163                         ;  param2 = wdtcon;
           4164                         ;  _DpaApiUserBank_01( DPA_API_DEEP_SLEEP );
           4165                         ;}
           4166                         ;#endif
           4167                         ;//############################################################################################
           4168                         ;void _DpaApiSleepFirst( uns8 wdtcon @ W )
           4169                         ;//############################################################################################
           4170                         ;{
           4171 _DpaApiSleepFirst
           4172                         ;#pragma updateBank exit = UserBank_01
           4173                         ;  FirstDpaApiSleep = TRUE;
           4174                         ;  _DpaApiSleep( wdtcon );
           4175                         ;}
           4176                         ;//############################################################################################
           4177                         ;void _DpaApiAfterSleep()
           4178                         ;//############################################################################################
           4179                         ;{
           4180 _DpaApiAfterSleep
           4181                         ;#pragma updateBank exit = UserBank_01
           4182                         ;  _DpaApiUserBank_01( DPA_API_AFTER_SLEEP );
           4183                         ;}
           4184                         ;//############################################################################################
           4185                         ;uns8 _DpaApiRandom()
           4186                         ;//############################################################################################
           4187                         ;{
           4188 _DpaApiRandom
           4189                         ;#pragma updateBank exit = UserBank_01
           4190                         ;  return _DpaApiUserBank_01( DPA_API_RANDOM );
           4191                         ;}
           4192                         ;//############################################################################################
           4193                         ;void _DpaApiSetRfDefaults()
           4194                         ;//############################################################################################
           4195                         ;{
           4196 _DpaApiSetRfDefaults
           4197                         ;#pragma updateBank exit = UserBank_01
           4198                         ;  _DpaApiUserBank_01( DPA_API_SET_RF_DEFAULTS );
           4199                         ;}
           4200                         ;//############################################################################################
           4201                         ;
           4202                         ;// Code bumper to detect too long code of Custom DPA handler + other routines
           4203                         ;#pragma origin CUSTOM_HANDLER_ADDRESS_END
     0000  4204         ORG 0x4F00
           4205                         ;// To avoid adding some code after handler by mistake
           4206                         ;#pragma origin __MAX_FLASH_ADDRESS
     0000  4207         ORG 0x7FFF
           4208 
     0000  4209         ORG 0x3800
3800 0046  4210         DATA 0046H
3801 0005  4211         DATA 0005H
3802 0082  4212         DATA 0082H
           4213         END
           4214 
           4215 
           4216 ; *** KEY INFO ***
           4217 
           4218 ; 0x0100 P0    5 word(s)  0 % : main
           4219 
           4220 ; 0x3A00 P7    4 word(s)  0 % : APPLICATION
           4221 ; 0x3810 P7    2 word(s)  0 % : dummy
           4222 ; 0x3816 P7    2 word(s)  0 % : iqrfSleep
           4223 ; 0x3819 P7    2 word(s)  0 % : _debug
           4224 ; 0x381C P7    2 word(s)  0 % : moduleInfo
           4225 ; 0x3822 P7    2 word(s)  0 % : pulsingLEDR
           4226 ; 0x3825 P7    2 word(s)  0 % : pulseLEDR
           4227 ; 0x3828 P7    2 word(s)  0 % : stopLEDR
           4228 ; 0x382B P7    2 word(s)  0 % : pulsingLEDG
           4229 ; 0x382E P7    2 word(s)  0 % : pulseLEDG
           4230 ; 0x3831 P7    2 word(s)  0 % : stopLEDG
           4231 ; 0x3834 P7    2 word(s)  0 % : setOnPulsingLED
           4232 ; 0x3837 P7    2 word(s)  0 % : setOffPulsingLED
           4233 ; 0x383A P7    2 word(s)  0 % : eeReadByte
           4234 ; 0x383D P7    2 word(s)  0 % : eeReadData
           4235 ; 0x3840 P7    2 word(s)  0 % : eeWriteByte
           4236 ; 0x3843 P7    2 word(s)  0 % : eeWriteData
           4237 ; 0x3846 P7    2 word(s)  0 % : readFromRAM
           4238 ; 0x384C P7    2 word(s)  0 % : clearBufferINFO
           4239 ; 0x384F P7    2 word(s)  0 % : swapBufferINFO
           4240 ; 0x3852 P7    2 word(s)  0 % : compareBufferINFO2RF
           4241 ; 0x3855 P7    2 word(s)  0 % : copyBufferINFO2COM
           4242 ; 0x3858 P7    2 word(s)  0 % : copyBufferINFO2RF
           4243 ; 0x385B P7    2 word(s)  0 % : copyBufferRF2COM
           4244 ; 0x385E P7    2 word(s)  0 % : copyBufferRF2INFO
           4245 ; 0x3861 P7    2 word(s)  0 % : copyBufferCOM2RF
           4246 ; 0x3864 P7    2 word(s)  0 % : copyBufferCOM2INFO
           4247 ; 0x3867 P7    2 word(s)  0 % : copyMemoryBlock
           4248 ; 0x386A P7    2 word(s)  0 % : startDelay
           4249 ; 0x386D P7    2 word(s)  0 % : startLongDelay
           4250 ; 0x3870 P7    2 word(s)  0 % : isDelay
           4251 ; 0x3873 P7    2 word(s)  0 % : waitDelay
           4252 ; 0x3876 P7    2 word(s)  0 % : waitMS
           4253 ; 0x3879 P7    2 word(s)  0 % : startCapture
           4254 ; 0x387C P7    2 word(s)  0 % : captureTicks
           4255 ; 0x3882 P7    2 word(s)  0 % : waitNewTick
           4256 ; 0x3885 P7    2 word(s)  0 % : enableSPI
           4257 ; 0x3888 P7    2 word(s)  0 % : disableSPI
           4258 ; 0x388B P7    2 word(s)  0 % : startSPI
           4259 ; 0x388E P7    2 word(s)  0 % : stopSPI
           4260 ; 0x3891 P7    2 word(s)  0 % : restartSPI
           4261 ; 0x3894 P7    2 word(s)  0 % : getStatusSPI
           4262 ; 0x3897 P7    2 word(s)  0 % : setRFpower
           4263 ; 0x389A P7    2 word(s)  0 % : setLEDG
           4264 ; 0x389D P7    2 word(s)  0 % : setRFchannel
           4265 ; 0x38A0 P7    2 word(s)  0 % : setRFmode
           4266 ; 0x38A3 P7    2 word(s)  0 % : setRFspeed
           4267 ; 0x38A6 P7    2 word(s)  0 % : setRFsleep
           4268 ; 0x38A9 P7    2 word(s)  0 % : setRFready
           4269 ; 0x38AC P7    2 word(s)  0 % : RFTXpacket
           4270 ; 0x38AF P7    2 word(s)  0 % : RFRXpacket
           4271 ; 0x38B2 P7    2 word(s)  0 % : checkRF
           4272 ; 0x38B8 P7    2 word(s)  0 % : amIBonded
           4273 ; 0x38BB P7    2 word(s)  0 % : removeBond
           4274 ; 0x38BE P7    2 word(s)  0 % : bondNewNode
           4275 ; 0x38C1 P7    2 word(s)  0 % : isBondedNode
           4276 ; 0x38C4 P7    2 word(s)  0 % : removeBondedNode
           4277 ; 0x38C7 P7    2 word(s)  0 % : rebondNode
           4278 ; 0x38CA P7    2 word(s)  0 % : clearAllBonds
           4279 ; 0x38CD P7    2 word(s)  0 % : setNonetMode
           4280 ; 0x38D0 P7    2 word(s)  0 % : setCoordinatorMode
           4281 ; 0x38D3 P7    2 word(s)  0 % : setNodeMode
           4282 ; 0x38D6 P7    2 word(s)  0 % : setNetworkFilteringOn
           4283 ; 0x38D9 P7    2 word(s)  0 % : setNetworkFilteringOff
           4284 ; 0x38DC P7    2 word(s)  0 % : getNetworkParams
           4285 ; 0x38DF P7    2 word(s)  0 % : setRoutingOn
           4286 ; 0x38E2 P7    2 word(s)  0 % : setRoutingOff
           4287 ; 0x38E8 P7    2 word(s)  0 % : answerSystemPacket
           4288 ; 0x38EB P7    2 word(s)  0 % : discovery
           4289 ; 0x38EE P7    2 word(s)  0 % : wasRouted
           4290 ; 0x38F1 P7    2 word(s)  0 % : optimizeHops
           4291 ; 0x38F4 P7    2 word(s)  0 % : getSupplyVoltage
           4292 ; 0x38F7 P7    2 word(s)  0 % : getTemperature
           4293 ; 0x38FA P7    2 word(s)  0 % : clearBufferRF
           4294 ; 0x3910 P7    2 word(s)  0 % : isDiscoveredNode
           4295 ; 0x3913 P7    2 word(s)  0 % : enableRFPGM
           4296 ; 0x3916 P7    2 word(s)  0 % : disableRFPGM
           4297 ; 0x3919 P7    2 word(s)  0 % : setupRFPGM
           4298 ; 0x391C P7    2 word(s)  0 % : runRFPGM
           4299 ; 0x391F P7    2 word(s)  0 % : iqrfDeepSleep
           4300 ; 0x3922 P7    2 word(s)  0 % : wasRFICrestarted
           4301 ; 0x3925 P7    2 word(s)  0 % : eeeWriteData
           4302 ; 0x3928 P7    2 word(s)  0 % : eeeReadData
           4303 ; 0x3931 P7    2 word(s)  0 % : setINDF0
           4304 ; 0x3934 P7    2 word(s)  0 % : setINDF1
           4305 ; 0x3937 P7    2 word(s)  0 % : getRSSI
           4306 ; 0x393A P7    2 word(s)  0 % : removeBondAddress
           4307 ; 0x393D P7    2 word(s)  0 % : sendFRC
           4308 ; 0x3940 P7    2 word(s)  0 % : responseFRC
           4309 ; 0x3943 P7    2 word(s)  0 % : bondRequestAdvanced
           4310 ; 0x3946 P7    2 word(s)  0 % : prebondNodeAtNode
           4311 ; 0x3949 P7    2 word(s)  0 % : nodeAuthorization
           4312 ; 0x394C P7    2 word(s)  0 % : dummy01
           4313 ; 0x3958 P7    2 word(s)  0 % : setAccessPassword
           4314 ; 0x395B P7    2 word(s)  0 % : setUserKey
           4315 ; 0x3961 P7    2 word(s)  0 % : amIRecipientOfFRC
           4316 ; 0x3964 P7    2 word(s)  0 % : setLEDR
           4317 ; 0x3967 P7    2 word(s)  0 % : encryptBufferRF
           4318 ; 0x396A P7    2 word(s)  0 % : decryptBufferRF
           4319 ; 0x396D P7    2 word(s)  0 % : prebondNodeAtCoordinator
           4320 ; 0x3970 P7    2 word(s)  0 % : setFSRs
           4321 ; 0x3973 P7    2 word(s)  0 % : updateCRC16
           4322 ; 0x3976 P7    2 word(s)  0 % : smartConnect
           4323 ; 0x3979 P7    2 word(s)  0 % : addressBitmap
           4324 ; 0x397C P7    2 word(s)  0 % : setServiceChannel
           4325 ; 0x3A08 P7    4 word(s)  0 % : DpaApiEntry
           4326 ; 0x3A20 P7  132 word(s)  6 % : CustomDpaHandler
           4327 
           4328 ; RAM usage: 1088 bytes (0 local), 3008 bytes free
           4329 ; Maximum call level: 2
           4330 ;  Codepage 0 has    6 word(s) :   0 %
           4331 ;  Codepage 1 has    0 word(s) :   0 %
           4332 ;  Codepage 2 has    0 word(s) :   0 %
           4333 ;  Codepage 3 has    0 word(s) :   0 %
           4334 ;  Codepage 4 has    0 word(s) :   0 %
           4335 ;  Codepage 5 has    0 word(s) :   0 %
           4336 ;  Codepage 6 has    0 word(s) :   0 %
           4337 ;  Codepage 7 has  351 word(s) :  17 %
           4338 ;  Codepage 8 has    0 word(s) :   0 %
           4339 ;  Codepage 9 has    0 word(s) :   0 %
           4340 ;  Codepage 10 has    0 word(s) :   0 %
           4341 ;  Codepage 11 has    0 word(s) :   0 %
           4342 ;  Codepage 12 has    0 word(s) :   0 %
           4343 ;  Codepage 13 has    0 word(s) :   0 %
           4344 ;  Codepage 14 has    0 word(s) :   0 %
           4345 ;  Codepage 15 has    0 word(s) :   0 %
           4346 ; Total of 357 code words (1 %)
